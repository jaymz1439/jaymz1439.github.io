<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chart 模板指南 on Helm</title>
    <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/</link>
    <description>Recent content in Chart 模板指南 on Helm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <atom:link href="https://zou-zongming.github.io/zh/docs/chart_template_guide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从这里开始吧</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/getting_started/</guid>
      <description>指南的该部分，我们会创建一个chart并添加第一个模板。创建的chart会在后续指南中用到。&#xA;接下来，让我们简单看一下Helm chart。&#xA;Charts 如&#xD;Charts 指南所述， Helm chart的结构如下：&#xA;mychart/ Chart.yaml values.yaml charts/ templates/ ... templates/ 目录包括了模板文件。当Helm评估chart时，会通过模板渲染引擎将所有文件发送到templates/目录中。 然后收集模板的结果并发送给Kubernetes。&#xA;values.yaml 文件也导入到了模板。这个文件包含了chart的 默认值 。这些值会在用户执行helm install 或 helm upgrade时被覆盖。&#xA;Chart.yaml 文件包含了该chart的描述。你可以从模板中访问它。charts/目录 可以 包含其他的chart(称之为 子chart)。 指南稍后我们会看到当涉及模板渲染时这些是如何工作的。&#xA;入门 Chart 在本指南中我们会创建一个名为mychart的chart，然后会在chart中创建一些模板。&#xA;$ helm create mychart Creating mychart 快速查看 mychart/templates/ 如果你看看 mychart/templates/ 目录，会注意到一些文件已经存在了：&#xA;NOTES.txt: chart的&amp;quot;帮助文本&amp;quot;。这会在你的用户执行helm install时展示给他们。 deployment.yaml: 创建Kubernetes 工作负载的基本清单 service.yaml: 为你的工作负载创建一个&#xD;service终端基本清单。 _helpers.tpl: 放置可以通过chart复用的模板辅助对象 然后我们要做的是... 把它们全部删掉！ 这样我们就可以从头开始学习我们的教程。我们在开始时会创造自己的NOTES.txt和_helpers.tpl。&#xA;$ rm -rf mychart/templates/* 编制生产环境级别的chart时，有这些chart的基础版本会很有用。因此在日常编写中，你可能不想删除它们。&#xA;第一个模板 第一个创建的模板是ConfigMap。Kubernetes中，配置映射只是用于存储配置数据的对象。其他组件，比如pod，可以访问配置映射中的数据。&#xA;因为配置映射是基础资源，对我们来说是很好的起点。&#xA;让我们以创建一个名为 mychart/templates/configmap.yaml的文件开始：</description>
    </item>
    <item>
      <title>内置对象</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/builtin_objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/builtin_objects/</guid>
      <description>对象可以通过模板引擎传递到模板中。 当然你的代码也可以传递对象。（我们在使用with和range语句时，会看到示例）。有几种方式可以在模板中创建新对象，比如说我们后面会看到的tuple功能。&#xA;对象可以是非常简单的:仅有一个值。或者可以包含其他对象或方法。比如，Release对象可以包含其他对象（比如：Release.Name）和Files对象有一组方法。&#xA;在上一部分中，我们用{{ .Release.Name }}在模板中插入版本名称。Release是你可以在模板中访问的顶层对象之一。&#xA;Release： Release对象描述了版本发布本身。包含了以下对象： Release.Name： release名称 Release.Namespace： 版本中包含的命名空间(如果manifest没有覆盖的话) Release.IsUpgrade： 如果当前操作是升级或回滚的话，该值将被设置为true Release.IsInstall： 如果当前操作是安装的话，该值将被设置为true Release.Revision： 此次修订的版本号。安装时是1，每次升级或回滚都会自增 Release.Service： 该service用来渲染当前模板。Helm里始终Helm Values： Values对象是从values.yaml文件和用户提供的文件传进模板的。默认为空 Chart： Chart.yaml文件内容。 Chart.yaml里的所有数据在这里都可以可访问的。比如 {{ .Chart.Name }}-{{ .Chart.Version }} 会打印出 mychart-0.1.0 在&#xD;Chart 指南 中列出了可获得属性 Files： 在chart中提供访问所有的非特殊文件的对象。你不能使用它访问Template对象，只能访问其他文件。 请查看这个&#xD;文件访问部分了解更多信息 Files.Get 通过文件名获取文件的方法。 （.Files.Getconfig.ini） Files.GetBytes 用字节数组代替字符串获取文件内容的方法。 对图片之类的文件很有用 Files.Glob 用给定的shell glob模式匹配文件名返回文件列表的方法 Files.Lines 逐行读取文件内容的方法。迭代文件中每一行时很有用 Files.AsSecrets 使用Base 64编码字符串返回文件体的方法 Files.AsConfig 使用YAML格式返回文件体的方法 Capabilities： 提供关于Kubernetes集群支持功能的信息 Capabilities.APIVersions 是一个版本列表 Capabilities.APIVersions.Has $version 说明集群中的版本 (比如,batch/v1) 或是资源 (比如, apps/v1/Deployment) 是否可用 Capabilities.KubeVersion 和Capabilities.KubeVersion.Version 是Kubernetes的版本号 Capabilities.</description>
    </item>
    <item>
      <title>Values 文件</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/values_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/values_files/</guid>
      <description>在上一部分我们了解了Helm模板提供的内置对象。其中一个是Values对象。该对象提供了传递值到chart的方法，&#xA;其内容来自于多个位置：&#xA;chart中的values.yaml文件 如果是子chart，就是父chart中的values.yaml文件 使用-f参数(helm install -f myvals.yaml ./mychart)传递到 helm install 或 helm upgrade的values文件 使用--set (比如helm install --set foo=bar ./mychart)传递的单个参数 以上列表有明确顺序：默认使用values.yaml，可以被父chart的values.yaml覆盖，继而被用户提供values文件覆盖， 最后会被--set参数覆盖，优先级为values.yaml最低，--set参数最高。&#xA;values文件是普通的YAML文件。现在编辑mychart/values.yaml然后编辑配置映射ConfigMap模板。&#xA;删除values.yaml中的默认内容，仅设置一个参数：&#xA;favoriteDrink: coffee 现在可以在模板中使用它：&#xA;apiVersion: v1 kind: ConfigMap metadata: name: {{ .Release.Name }}-configmap data: myvalue: &amp;#34;Hello World&amp;#34; drink: {{ .Values.favoriteDrink }} 注意最后一行，favoriteDrink是Values的一个属性: {{ .Values.favoriteDrink }}。&#xA;看看是如何渲染的：&#xA;$ helm install geared-marsupi ./mychart --dry-run --debug install.go:158: [debug] Original chart version: &amp;#34;&amp;#34; install.go:175: [debug] CHART PATH: /home/bagratte/src/playground/mychart NAME: geared-marsupi LAST DEPLOYED: Wed Feb 19 23:21:13 2020 NAMESPACE: default STATUS: pending-install REVISION: 1 TEST SUITE: None USER-SUPPLIED VALUES: {} COMPUTED VALUES: favoriteDrink: coffee HOOKS: MANIFEST: --- # Source: mychart/templates/configmap.</description>
    </item>
    <item>
      <title>模板函数和流水线</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/functions_and_pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/functions_and_pipelines/</guid>
      <description>到目前为止，我们已经知道了如何将信息传到模板中。 但是传入的信息并不能被修改。 有时我们希望以一种更有用的方式来转换所提供的数据。&#xA;让我们从一个最佳实践开始：可以通过调用模板指令中的quote函数把.Values对象中的字符串属性用引号引起来，然后放到模板中。&#xA;apiVersion: v1 kind: ConfigMap metadata: name: {{ .Release.Name }}-configmap data: myvalue: &amp;#34;Hello World&amp;#34; drink: {{ quote .Values.favorite.drink }} food: {{ quote .Values.favorite.food }} 模板函数的语法是 functionName arg1 arg2...。在上面的代码片段中，quote .Values.favorite.drink调用了quote函数并传递了一个参数(.Values.favorite.drink)。&#xA;Helm 有超过60个可用函数。其中有些通过&#xD;Go模板语言本身定义。其他大部分都是&#xD;Sprig 模板库。我们可以在示例看到其中很多函数。&#xA;当我们讨论&amp;quot;Helm模板语言&amp;quot;时，感觉它是Helm专属的，实际上他是Go模板语言、一些额外的函数和用于 向模板暴露某些对象的装饰器组合而成的。很多Go模板的资料也有助于你学习模板。&#xA;管道符 模板语言其中一个强大功能是 管道 概念。借鉴UNIX中的概念，管道符是将一系列的模板语言紧凑地将多个流式处理结果合并的工具。换句话说，管道符是按顺序完成一系列任务的方式。 现在用管道符重写上述示例：&#xA;apiVersion: v1 kind: ConfigMap metadata: name: {{ .Release.Name }}-configmap data: myvalue: &amp;#34;Hello World&amp;#34; drink: {{ .Values.favorite.drink | quote }} food: {{ .Values.favorite.food | quote }} 在这个示例中，并不是调用quote 参数，而是倒置了命令。使用管道符(|)将参数“发送”给函数： .</description>
    </item>
    <item>
      <title>模板函数列表</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/function_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/function_list/</guid>
      <description>Helm 包含了很多可以在模板中利用的模板函数。以下列出了具体分类：&#xA;Cryptographic and Security Date Dictionaries Encoding File Path Kubernetes and Chart Logic and Flow Control Lists Math Float Math Network Reflection Regular Expressions Semantic Versions String Type Conversion URL UUID Logic and Flow Control Functions Helm 包括了需要逻辑和流控制函数，包括&#xD;and,&#xD;coalesce, default, empty, eq,&#xD;fail, ge, gt, le, lt, ne, not, and or。&#xA;and 返回两个参数的and布尔值。&#xA;and .Arg1 .Arg2 or 返回两个参数的or布尔值。会返回第一个非空参数或最后一个参数。&#xA;or .Arg1 .Arg2 not 返回参数的布尔求反。&#xA;not .Arg eq 返回参数的布尔等式（比如， Arg1 == Arg2）。</description>
    </item>
    <item>
      <title>流控制</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/control_structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/control_structures/</guid>
      <description>控制结构(在模板语言中称为&amp;quot;actions&amp;quot;)提供给你和模板作者控制模板迭代流的能力。 Helm的模板语言提供了以下控制结构：&#xA;if/else， 用来创建条件语句 with， 用来指定范围 range， 提供&amp;quot;for each&amp;quot;类型的循环 除了这些之外，还提供了一些声明和使用命名模板的关键字：&#xA;define 在模板中声明一个新的命名模板 template 导入一个命名模板 block 声明一种特殊的可填充的模板块 该部分，我们会讨论关于if，with，和 range。其他部分会在该指南的“命名模板”部分说明。&#xA;If/Else 第一个控制结构是在按照条件在一个模板中包含一个块文本。即if/else块。&#xA;基本的条件结构看起来像这样：&#xA;{{ if PIPELINE }} # Do something {{ else if OTHER PIPELINE }} # Do something else {{ else }} # Default case {{ end }} 注意我们讨论的是 管道 而不是值。这样做的原因是要清楚地说明控制结构可以执行整个管道，而不仅仅是计算一个值。&#xA;如果是以下值时，管道会被设置为 false：&#xA;布尔false 数字0 空字符串 nil (空或null) 空集合(map, slice, tuple, dict, array) 在所有其他条件下，条件都为true。&#xA;让我们先在配置映射中添加一个简单的条件。如果饮品是coffee会添加另一个配置：&#xA;apiVersion: v1 kind: ConfigMap metadata: name: {{ .</description>
    </item>
    <item>
      <title>变量</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/variables/</guid>
      <description>函数、管道符、对象和控制结构都可以控制，我们转向很多编程语言中更基本的思想之一：变量。 在模板中，很少被使用。但是我们可以使用变量简化代码，并更好地使用with和range。&#xA;在之前的例子中，我们看到下面的代码会失败：&#xA;{{- with .Values.favorite }} drink: {{ .drink | default &amp;#34;tea&amp;#34; | quote }} food: {{ .food | upper | quote }} release: {{ .Release.Name }} {{- end }} Release.Name 不在with块的限制范围内。解决作用域问题的一种方法是将对象分配给可以不考虑当前作用域而访问的变量。&#xA;Helm模板中，变量是对另一个对象的命名引用。遵循$name变量的格式且指定了一个特殊的赋值运算符：:=。 我们可以使用针对Release.Name的变量重写上述内容。&#xA;apiVersion: v1 kind: ConfigMap metadata: name: {{ .Release.Name }}-configmap data: myvalue: &amp;#34;Hello World&amp;#34; {{- $relname := .Release.Name -}} {{- with .Values.favorite }} drink: {{ .drink | default &amp;#34;tea&amp;#34; | quote }} food: {{ .food | upper | quote }} release: {{ $relname }} {{- end }} 注意在with块开始之前，赋值$relname := .</description>
    </item>
    <item>
      <title>命名模板</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/named_templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/named_templates/</guid>
      <description>此时需要越过模板，开始创建其他内容了。该部分我们会看到如何在一个文件中定义 命名模板，并在其他地方使用。命名模板 (有时称作一个 部分 或一个 子模板)仅仅是在文件内部定义的模板，并使用了一个名字。有两种创建方式和几种不同的使用方法。&#xA;在&#xD;流控制部分， 我们介绍了三种声明和管理模板的方法：define，template，和block。在这部分，我们将使用这三种操作并介绍一种特殊用途的 include方法，类似于template操作。&#xA;命名模板时要记住一个重要细节：模板名称是全局的。如果您想声明两个相同名称的模板，哪个最后加载就使用哪个。 因为在子chart中的模板和顶层模板一起编译，命名时要注意 chart特定名称。&#xA;一个常见的命名惯例是用chart名称作为模板前缀：{{ define &amp;quot;mychart.labels&amp;quot; }}。使用特定chart名称作为前缀可以避免可能因为 两个不同chart使用了相同名称的模板而引起的冲突。&#xA;这个规则同样适用于chart的不同版本。如果有 mychart 的 1.0.0版本以一种方式定义了模板， mychart 的 2.0.0 版本修改了已有的命名模板，那就会使用最后加载的版本。也可以在chart名称中添加版本来解决这个问题： {{ define &amp;quot;mychart.v1.labels&amp;quot; }} 和 {{ define &amp;quot;mychart.v2.labels&amp;quot; }}。&#xA;局部的和_文件 目前为止，我们已经使用了单个文件，且单个文件中包含了单个模板。但Helm的模板语言允许你创建命名的嵌入式模板， 这样就可以在其他位置按名称访问。&#xA;在编写模板细节之前，文件的命名惯例需要注意：&#xA;templates/中的大多数文件被视为包含Kubernetes清单 NOTES.txt是个例外 命名以下划线(_)开始的文件则假定 没有 包含清单内容。这些文件不会渲染为Kubernetes对象定义，但在其他chart模板中都可用。 这些文件用来存储局部和辅助对象，实际上当我们第一次创建mychart时，会看到一个名为_helpers.tpl的文件，这个文件是模板局部的默认位置。&#xA;用define和template声明和使用模板 define操作允许我们在模板文件中创建一个命名模板，语法如下：&#xA;{{- define &amp;#34;MY.NAME&amp;#34; }} # body of template here {{- end }} 比如我们可以定义一个模板封装Kubernetes的标签：&#xA;{{- define &amp;#34;mychart.labels&amp;#34; }} labels: generator: helm date: {{ now | htmlDate }} {{- end }} 现在我们将模板嵌入到了已有的配置映射中，然后使用template包含进来：</description>
    </item>
    <item>
      <title>在模板内部访问文件</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/accessing_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/accessing_files/</guid>
      <description>在上一节中，我们研究了几种创建和访问模板的方法。这样可以很容易从一个模板导入到另一个模板中。 但有时想导入的是不是模板的文件并注入其内容，而无需通过模板渲染发送内容。&#xA;Helm 提供了通过.Files对象访问文件的方法。不过，在我们使用模板示例之前，有些事情需要注意：&#xA;可以添加额外的文件到chart中。虽然这些文件会被绑定。但是要小心，由于Kubernetes对象的限制，Chart必须小于1M。 通常处于安全考虑，一些文件无法通过.Files对象访问： 无法访问templates/中的文件 无法访问使用.helmignore排除的文件 helm应用&#xD;subchart之外的文件，包括父级中的，不能被访问的 Chart不能保留UNIX模式信息，因此当文件涉及到.Files对象时，文件级权限不会影响文件的可用性。 基本示例 Path辅助对象 全局模式 ConfigMap和密钥的实用功能 编码 文件行 Basic example 先不管警告，我们来写一个读取三个文件到配置映射ConfigMap的模板。开始之前，我们会在chart中添加三个文件， 直接放到mychart/目录中。&#xA;config1.toml:&#xA;message = Hello from config 1 config2.toml:&#xA;message = This is config 2 config3.toml:&#xA;message = Goodbye from config 3 每个都是简单的TOML文件（类似于windows老式的INI文件）。我们知道这些文件的名称，因此我们使用range功能遍历它们并将它们的内容注入到我们的ConfigMap中。&#xA;apiVersion: v1 kind: ConfigMap metadata: name: {{ .Release.Name }}-configmap data: {{- $files := .Files }} {{- range tuple &amp;#34;config1.toml&amp;#34; &amp;#34;config2.toml&amp;#34; &amp;#34;config3.toml&amp;#34; }} {{ . }}: |- {{ $files.</description>
    </item>
    <item>
      <title>创建一个NOTES.txt文件</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/notes_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/notes_files/</guid>
      <description>该部分会介绍为chart用户提供说明的Helm工具。在helm install 或 helm upgrade命令的最后，Helm会打印出对用户有用的信息。 使用模板可以高度自定义这部分信息。&#xA;要在chart添加安装说明，只需创建templates/NOTES.txt文件即可。该文件是纯文本，但会像模板一样处理， 所有正常的模板函数和对象都是可用的。&#xA;让我们创建一个简单的NOTES.txt文件：&#xA;Thank you for installing {{ .Chart.Name }}. Your release is named {{ .Release.Name }}. To learn more about the release, try: $ helm status {{ .Release.Name }} $ helm get all {{ .Release.Name }} 现在如果我们执行helm install rude-cardinal ./mychart 会在底部看到：&#xA;RESOURCES: ==&amp;gt; v1/Secret NAME TYPE DATA AGE rude-cardinal-secret Opaque 1 0s ==&amp;gt; v1/ConfigMap NAME DATA AGE rude-cardinal-configmap 3 0s NOTES: Thank you for installing mychart.</description>
    </item>
    <item>
      <title>子chart和全局值</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/subcharts_and_globals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/subcharts_and_globals/</guid>
      <description>到目前为止，我们只使用了一个chart。但chart可以使用依赖，称为 子chart，且有自己的值和模板。 该章节我们会创建一个子chart并能看到访问模板中的值的不同方式。&#xA;在深入研究代码之前，需要了解一些应用的子chart的重要细节：&#xA;子chart被认为是“独立的”，意味着子chart从来不会显示依赖它的父chart。 因此，子chart无法访问父chart的值。 父chart可以覆盖子chart的值。 Helm有一个 全局值 的概念，所有的chart都可以访问。 这些限制不一定都适用于提供标准化辅助功能的 library charts。&#xA;浏览本节的示例之后，这些概念会变得更加清晰。&#xA;创建子chart 为了做这些练习，我们可以从本指南开始时创建的mychart/开始，并在其中添加一个新的chart。&#xA;$ cd mychart/charts $ helm create mysubchart Creating mysubchart $ rm -rf mysubchart/templates/* 注意，和以前一样，我们删除了所有的基本模板，然后从头开始，在这个指南中，我们聚焦于模板如何工作，而不是管理依赖。 但&#xD;Chart指南提供了更多子chart运行的信息。&#xA;在子chart中添加值和模板 下一步，为mysubchart创建一个简单的模板和values文件。mychart/charts/mysubchart应该已经有一个values.yaml。 设置如下：&#xA;dessert: cake 下一步，在mychart/charts/mysubchart/templates/configmap.yaml中创建一个新的配置映射模板：&#xA;apiVersion: v1 kind: ConfigMap metadata: name: {{ .Release.Name }}-cfgmap2 data: dessert: {{ .Values.dessert }} 因为每个子chart都是 独立的chart，可以单独测试mysubchart：&#xA;$ helm install --generate-name --dry-run --debug mychart/charts/mysubchart SERVER: &amp;#34;localhost:44134&amp;#34; CHART PATH: /Users/mattbutcher/Code/Go/src/helm.sh/helm/_scratch/mychart/charts/mysubchart NAME: newbie-elk TARGET NAMESPACE: default CHART: mysubchart 0.</description>
    </item>
    <item>
      <title>.helmignore 文件</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/helm_ignore_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/helm_ignore_file/</guid>
      <description>.helmignore 文件用来指定你不想包含在你的helm chart中的文件。&#xA;如果该文件存在，helm package 命令会在打包应用时忽略所有在.helmignore文件中匹配的文件。&#xA;这有助于避免不需要的或敏感文件及目录添加到你的helm chart中。&#xA;.helmignore 文件支持Unix shell的全局匹配，相对路径匹配，以及反向匹配（以！作为前缀）。每行只考虑一种模式。&#xA;这里是一个.helmignore文件示例：&#xA;# comment # Match any file or path named .helmignore .helmignore # Match any file or path named .git .git # Match any text file *.txt # Match only directories named mydir mydir/ # Match only text files in the top-level directory /*.txt # Match only the file foo.txt in the top-level directory /foo.txt # Match any file named ab.</description>
    </item>
    <item>
      <title>调试模板</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/debugging/</guid>
      <description>调试模板可能很棘手，因为渲染后的模板发送给了Kubernetes API server，可能会以格式化以外的原因拒绝YAML文件。&#xA;以下命令有助于调试：&#xA;helm lint 是验证chart是否遵循最佳实践的首选工具。 helm template --debug 在本地测试渲染chart模板。 helm install --dry-run --debug：我们已经看到过这个技巧了，这是让服务器渲染模板的好方法，然后返回生成的清单文件。 helm get manifest: 这是查看安装在服务器上的模板的好方法。 当你的YAML文件解析失败，但你想知道生成了什么，检索YAML一个简单的方式是注释掉模板中有问题的部分， 然后重新运行 helm install --dry-run --debug：&#xA;apiVersion: v2 # some: problem section # {{ .Values.foo | quote }} 以上内容会被渲染同时返回完整的注释：&#xA;apiVersion: v2 # some: problem section # &amp;#34;bar&amp;#34; 这样就提供了一种快速查看没有被YAML错误解析阻塞的生成内容的方式。</description>
    </item>
    <item>
      <title>下一步</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/wrapping_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/wrapping_up/</guid>
      <description>本指南旨在为chart开发者提供对如何使用Helm模板语言的强大理解能力。该模板聚焦于模板开发的技术层面。&#xA;但涉及到chart的实际日常开发时，很多内容本指南并没有覆盖到。这里有一些有用的文档链接帮助你创建新的chart:&#xA;CNCF的 Artifact Hub 是chart不可或缺的资源。 Kubernetes 文档 提供各种能用到的资源种类的详细案例，从配置映射和密钥到 DaemonSet和工作负载。 Helm的&#xD;Chart指南 阐述了使用chart的工作流。 Helm的&#xD;Chart钩子指南 说明了如何创建生命周期的钩子。 Helm的&#xD;Chart提示和技巧 提供了编写chart时的一些有用提示。 Sprig 文档 提供了超过60个模板函数。 Go 模板文档 说明了模板语法的细节。 Schelm 工具 用于调试chart的辅助工具。 有时候从有经验的开发者那里问问题和获取答案更加容易。最佳方式是访问 Kubernetes Slack的Helm频道：&#xA;#helm-users #helm-dev #charts 最后，如果你找到了文档中的错误或疏漏，想推荐一些新内容，或者想做一些贡献，请访问&#xD;Helm 项目。</description>
    </item>
    <item>
      <title>附录： YAML技术</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/yaml_techniques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/yaml_techniques/</guid>
      <description>本指南大部分都聚焦于编写模板语言。这里，我们要看看YAML格式。作为模板作者，YAML有一些有用的特性 使我们的模板不易出错，更易阅读。&#xA;标量和集合 根据 YAML 规范，有两种集合类型和很多标量类型。&#xA;两种集合类型是map和sequence：&#xA;map: one: 1 two: 2 three: 3 sequence: - one - two - three 标量值是单个值，（与集合相反）&#xA;YAML中的标量类型 在Helm内部的YAML语言中，一个标量值的数据类型是由一组复杂的规则决定的，包含了资源定义的Kubernetes模式。 但在推断类型时，以下规则往往是正确的。&#xA;如果整型或浮点型数字没有引号，通常被视为数字类型：&#xA;count: 1 size: 2.34 但是如果被引号引起来，会被当做字符串：&#xA;count: &amp;#34;1&amp;#34; # &amp;lt;-- string, not int size: &amp;#39;2.34&amp;#39; # &amp;lt;-- string, not float 布尔函数也是如此：&#xA;isGood: true # bool answer: &amp;#34;true&amp;#34; # string 空字符串是 null （不是 nil）。&#xA;注意 port: &amp;quot;80&amp;quot;是合法的YAML，可以通过模板引擎和YAML解释器传值，但是如果Kubernetes希望port是整型，就会失败。&#xA;在一些场景中，可以使用YAML节点标签强制推断特定类型：&#xA;coffee: &amp;#34;yes, please&amp;#34; age: !!str 21 port: !!int &amp;#34;80&amp;#34; 如上所示，!</description>
    </item>
    <item>
      <title>附录：Go 数据类型和模板</title>
      <link>https://zou-zongming.github.io/zh/docs/chart_template_guide/data_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.io/zh/docs/chart_template_guide/data_types/</guid>
      <description>Helm 模板语言是用强类型Go编程语言实现的。 因此，模板中的变量是 有类型的。大多数情况下，变量将作为以下类型之一显示：&#xA;string: 文本字符串 bool: true 或 false int: 整型值（包含8位，16位，32位，和64有符号和无符号整数） float64: 64位浮点数(也有8位，16位，32位类型) 字节切片([]byte)，一般用于保存（可能的）二进制数据 struct: 有属性和方法的对象 上述某种类型的切片(索引列表) 字符串键map (map[string]interface{}) 值是上述某种类型 Go里面有很多其他类型，有时你需要在模板里转换。调试对象类型最简便的方式是在模板中传递给printf &amp;quot;%t&amp;quot;，这样会打印类型。 也可以使用 typeOf 和 kindOf 函数。</description>
    </item>
  </channel>
</rss>
