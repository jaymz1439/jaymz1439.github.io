<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>主题 on Helm</title>
    <link>https://jaymz1439.github.io/zh/docs/topics/</link>
    <description>Recent content in 主题 on Helm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <atom:link href="https://jaymz1439.github.io/zh/docs/topics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chart</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/charts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/charts/</guid>
      <description>Helm使用的包格式称为 chart。 chart就是一个描述Kubernetes相关资源的文件集合。单个chart可以用来部署一些简单的， 类似于memcache pod，或者某些复杂的HTTP服务器以及web全栈应用、数据库、缓存等等。&#xA;Chart是作为特定目录布局的文件被创建的。它们可以打包到要部署的版本存档中。&#xA;如果你想下载和查看一个发布的chart，但不安装它，你可以用这个命令： helm pull chartrepo/chartname。&#xA;该文档解释说明了chart格式，并提供了用Helm构建chart的基本指导。&#xA;Chart 文件结构 chart是一个组织在文件目录中的集合。目录名称就是chart名称（没有版本信息）。因而描述WordPress的chart可以存储在wordpress/目录中。&#xA;在这个目录中，Helm 期望可以匹配以下结构：&#xA;wordpress/ Chart.yaml # 包含了chart信息的YAML文件 LICENSE # 可选: 包含chart许可证的纯文本文件 README.md # 可选: 可读的README文件 values.yaml # chart 默认的配置值 values.schema.json # 可选: 一个使用JSON结构的values.yaml文件 charts/ # 包含chart依赖的其他chart crds/ # 自定义资源的定义 templates/ # 模板目录， 当和values 结合时，可生成有效的Kubernetes manifest文件 templates/NOTES.txt # 可选: 包含简要使用说明的纯文本文件 Helm保留使用 charts/，crds/， templates/目录，以及列举出的文件名。其他文件保持原样。&#xA;Chart.yaml 文件 Chart.yaml文件是chart必需的。包含了以下字段：&#xA;apiVersion: chart API 版本 （必需） name: chart名称 （必需） version: 语义化2 版本（必需） kubeVersion: 兼容Kubernetes版本的语义化版本（可选） description: 一句话对这个项目的描述（可选） type: chart类型 （可选） keywords: - 关于项目的一组关键字（可选） home: 项目home页面的URL （可选） sources: - 项目源码的URL列表（可选） dependencies: # chart 必要条件列表 （可选） - name: chart名称 (nginx) version: chart版本 (&amp;#34;1.</description>
    </item>
    <item>
      <title>Chart Hook</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/charts_hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/charts_hooks/</guid>
      <description>Helm 提供了一个 hook 机制允许chart开发者在发布生命周期的某些点进行干预。比如你可以使用hook用于：&#xA;安装时在加载其他chart之前加载配置映射或密钥 安装新chart之前执行备份数据库的任务，然后在升级之后执行第二个任务用于存储数据。 在删除发布之前执行一个任务以便在删除服务之前退出滚动。 钩子的工作方式与常规模板类似，但因为Helm对其不同的使用方式，会有一些特殊的注释。这部分会讲述钩子的基本使用模式。&#xA;可用的钩子 定义了以下钩子：&#xA;注释值 描述 pre-install 在模板渲染之后，Kubernetes资源创建之前执行 post-install 在所有资源加载到Kubernetes之后执行 pre-delete 在Kubernetes删除之前，执行删除请求 post-delete 在所有的版本资源删除之后执行删除请求 pre-upgrade 在模板渲染之后，资源更新之前执行一个升级请求 post-upgrade 所有资源升级之后执行一个升级请求 pre-rollback 在模板渲染之后，资源回滚之前，执行一个回滚请求 post-rollback 在所有资源被修改之后执行一个回滚请求 test 调用Helm test子命令时执行 (&#xD;test文档) 注意crd-install钩子已被移除以支持Helm 3的crds/目录。&#xA;钩子和发布生命周期 钩子允许你在发布生命周期的关键节点上有机会执行操作。比如，考虑helm install的生命周期。默认的，生命周期看起来是这样：&#xA;用户执行helm install foo Helm库调用安装API 在一些验证之后，库会渲染foo模板 库会加载结果资源到Kubernetes 库会返回发布对象（和其他数据）给客户端 客户端退出 Helm 为install周期定义了两个钩子：pre-install和post-install。如果foo chart的开发者两个钩子都执行， 周期会被修改为这样：&#xA;用户返回 helm install foo Helm库调用安装API 在 crds/目录中的CRD会被安装 在一些验证之后，库会渲染foo模板 库准备执行pre-install钩子(将hook资源加载到Kubernetes中) 库按照权重对钩子排序(默认将权重指定为0)，然后在资源种类排序，最后按名称正序排列。 库先加载最小权重的钩子(从负到正) 库会等到钩子是 &amp;quot;Ready&amp;quot;状态(CRD除外) 库将生成的资源加载到Kubernetes中。注意如果设置了--wait参数，库会等所有资源是ready状态， 且所有资源准备就绪后才会执行post-install钩子。 库执行post-install钩子(加载钩子资源)。 库会等到钩子是&amp;quot;Ready&amp;quot;状态 库会返回发布对象(和其他数据)给客户端 客户端退出 等钩子准备好是什么意思？ 这取决于钩子声明的资源。如果资源是 Job 或 Pod类型，Helm会等到直到他成功运行完成。 如果钩子失败，发布就会失败。这是一个 阻塞操作,所以Helm客户端会在这个任务执行时暂停。</description>
    </item>
    <item>
      <title>Chart Test</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/chart_tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/chart_tests/</guid>
      <description>chart包含了很多一起工作的Kubernetes资源和组件。作为一个chart作者，你可能想写一些测试验证chart安装时是否按照预期工作。 这些测试同时可以帮助chart用户理解你的chart在做什么。&#xA;test 在helm chart中放在 templates/目录，并且是一个指定了容器和给定命令的任务。如果测试通过，容器应该成功退出 (exit 0) 任务的定义必须包含helm测试钩子的注释：helm.sh/hook: test。&#xA;注意Helm v3中，任务定义需要包含helm的测试钩子注释之一：helm.sh/hook: test-success 或者 helm.sh/hook: test-failure。 helm.sh/hook: test-success 仍然向后兼容，也可以是 helm.sh/hook: test。&#xA;示例测试以下内容：&#xA;验证你values.yaml文件中的配置可以正确注入。 确保你的用户名和密码是对的 确保不正确的用户名和密码不会工作 判断你的服务只启动的并且正确地负载均衡 等等。 你可以在Helm的一个版本中运行预定义的测试，执行 helm test &amp;lt;RELEASE_NAME&amp;gt;。对于chart用户来说， 这是验证chart发布（或应用）可以正常运行的很好的方式。&#xA;Example Test helm create命令会自动创建一些目录和文件。 要尝试helm的测试功能，需要先创建一个helm chart示例。&#xA;$ helm create demo 然后就可以看到示例demo的目录结构如下：&#xA;demo/ Chart.yaml values.yaml charts/ templates/ templates/tests/test-connection.yaml 在demo/templates/tests/test-connection.yaml中，可以试试看到的测试功能，测试pod定义如下：&#xA;apiVersion: v1 kind: Pod metadata: name: &amp;#34;{{ include &amp;#34;demo.fullname&amp;#34; . }}-test-connection&amp;#34; labels: {{- include &amp;#34;demo.labels&amp;#34; . | nindent 4 }} annotations: &amp;#34;helm.</description>
    </item>
    <item>
      <title>库类型Chart</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/library_charts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/library_charts/</guid>
      <description>库类型chart是一种&#xD;Helm chart，定义了可以由其他chart中Helm 模板共享的chart原语或定义。这允许用户通过chart分享可复用得代码片段来避免重复并保持chart 干燥。&#xA;在Helm 3中引用了库chart，从形式上区别于Helm 2中chart维护的通用或辅助chart。 作为一个chart类型引入，可以提供：&#xA;一种明确区分通用和应用chart的方法 逻辑上阻止安装通用chart 通用chart中的未渲染模板可以包含版本组件 允许依赖的chart使用导入的上下文 chart维护者可以定义一个通用的chart作为库并且现在可以确信Helm将以标准一致的方式处理chart。 也意味着通过改变chart类型来分享应用chart中的定义。&#xA;创建一个简单的库chart 像之前提到的，库chart是一种&#xD;Helm chart类型。意味着你可以从创建脚手架chart开始：&#xA;$ helm create mylibchart Creating mylibchart 本示例中创建自己的模板需要先删除templates目录中的所有文件。&#xA;$ rm -rf mylibchart/templates/* 不再需要values文件。&#xA;$ rm -f mylibchart/values.yaml 在创建通用代码之前，先快速回顾一下相关Helm概念。&#xD;已命名的模板 (有时称为局部模板或子模板)是定义在一个文件中的简单模板，并分配了一个名称。在templates/目录中， 所有以下划线开始的文件(_)不会输出到Kubernetes清单文件中。因此依照惯例，辅助模板和局部模板被放置在_*.tpl或_*.yaml文件中。&#xA;这个示例中，我们要写一个通用的配置映射来创建一个空的配置映射源。在mylibchart/templates/_configmap.yaml文件中定义如下：&#xA;{{- define &amp;#34;mylibchart.configmap.tpl&amp;#34; -}} apiVersion: v1 kind: ConfigMap metadata: name: {{ .Release.Name | printf &amp;#34;%s-%s&amp;#34; .Chart.Name }} data: {} {{- end -}} {{- define &amp;#34;mylibchart.configmap&amp;#34; -}} {{- include &amp;#34;mylibchart.util.merge&amp;#34; (append .</description>
    </item>
    <item>
      <title>Helm来源和完整性</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/provenance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/provenance/</guid>
      <description>Helm有一个来源工具帮助chart用户检测包的完整性和来源。使用基于PKI，GnuPG及流行包管理器的行业标准工具，Helm可以生成和检测签名文件。&#xA;概述 完整性是通过比较chart的出处记录来建立的。出处记录存储在 出处文件，和打包好的chart放在一起。比如， 如果有个名为myapp-1.2.3.tgz的chart，则它的出处文件是myapp-1.2.3.tgz.prov。&#xA;出处文件会在打包时生成(helm package --sign ...)，并可以通过多重命名检查，尤其是helm install --verify。&#xA;工作流 这部分描述有效使用源数据的潜在工作流。&#xA;前置条件：&#xA;合法的二进制格式（非ASCII包裹）的PGP密钥对 helm命令行工具 GnuPG命令行工具（可选） Keybase命令行工具（可选） 注意： 如果你的PGP私钥有密码，系统将提示你为所有支持--sign选项的命令输入密码。&#xA;创建新的chart与之前一样：&#xA;$ helm create mychart Creating mychart 一旦准备好打包了，使用helm package命令时添加--sign参数，并且指定已知的字符串key和包含相应私钥的秘钥环：&#xA;$ helm package --sign --key &amp;#39;John Smith&amp;#39; --keyring path/to/keyring.secret mychart 注意： --key参数的值必须是对应key的uid(在gpg --list-keys输出列表中)的子字符串，比如名字或者email。 指纹码 不能 使用。&#xA;提示： 针对GnuPG用户，你的私钥的keyring在~/.gnupg/secring.gpg。你可以使用gpg --list-secret-keys列出你需要的key。&#xA;警告： GnuPG v2版在默认位置~/.gnupg/pubring.kbx使用了新格式kbx存储私钥的keyring。使用以下命令将你的keyring转换到传统的gpg格式：&#xA;$ gpg --export &amp;gt;~/.gnupg/pubring.gpg $ gpg --export-secret-keys &amp;gt;~/.gnupg/secring.gpg 此时，您应该同时看到了mychart-0.1.0.tgz和mychart-0.1.0.tgz.prov。 这两个文件最终都会被上传到对应的chart仓库。&#xA;您可以使用helm verify验证chart：&#xA;$ helm verify mychart-0.1.0.tgz 失败的验证如下：&#xA;$ helm verify topchart-0.</description>
    </item>
    <item>
      <title>Chart仓库指南</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/chart_repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/chart_repository/</guid>
      <description>本节介绍如何创建和使用chart仓库。在高层级中，chart仓库是打包的chart存储和分享的位置。&#xA;社区的Helm chart仓库位于&#xD;Artifact Hub，欢迎加入。 不过Helm也可以创建并运行你自己的chart仓库。该指南将介绍如何操作。&#xA;先决条件 先阅读&#xD;快速开始 阅读&#xD;Charts文档 创建一个chart仓库 chart仓库 是一个配置了index.yaml文件和一些已经打包chart的HTTP服务器。当你准备好分享chart时，最好的方法是将chart上传到chart仓库。&#xA;注意： 从Helm 2.2.0开始，客户端支持对仓库进行SSL身份认证。其他身份验证协议可以通过插件提供。&#xA;由于chart仓库可以是任何服务于YAML和tar文件并响应GET请求的HTTP服务器，托管你自己的chart仓库时就有很多选择。比如可以使用Google Cloud Storage(GCS)， Amazon S3，GitHub页面，甚至创建自己的web服务器。&#xA;chart仓库结构 chart仓库由chart包和包含了仓库中所有chart索引的特殊文件index.yaml。 通常描述chart的index.yaml也托管在同一个服务器上作为&#xD;来源文件。&#xA;比如，https://example.com/charts仓库布局可能看起来像这样：&#xA;charts/ | |- index.yaml | |- alpine-0.1.2.tgz | |- alpine-0.1.2.tgz.prov 在这个案例中，index文件包含了Alpine这一个chart的信息，并提供了下载地址：https://example.com/charts/alpine-0.1.2.tgz。&#xA;index.yaml文件不是必须和chart包放在同一个服务器上，但是这样是最方便的。&#xA;index文件 index.yaml文件是一个yaml格式的文件。包含了一些包的元信息，包括chart中Chart.yaml文件的内容。 一个合法的chart仓库必须有一个index文件，包含了chart仓库中每一个chart的信息。 helm repo index命令会基于给定的包含chart包的本地目录生成一个index文件。&#xA;index文件类似于这样：&#xA;apiVersion: v1 entries: alpine: - created: 2016-10-06T16:23:20.499814565-06:00 description: Deploy a basic Alpine Linux pod digest: 99c76e403d752c84ead610644d4b1c2f2b453a74b921f422b9dcb8a7c8b559cd home: https://helm.sh/helm name: alpine sources: - https://github.com/helm/helm urls: - https://technosophos.</description>
    </item>
    <item>
      <title>使用基于OCI的注册中心</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/registries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/registries/</guid>
      <description>从Helm 3开始，可以使用具有&#xD;OCI支持的容器注册中心来存储和共享chart包。从Helm v3.8.0开始，默认启用OCI支持。&#xA;v3.8.0版本之前对 OCI 的支持 OCI 支持在Helm v3.8.0版本从试验阶段过渡成为普遍可用。在之前版本中，对OCI支持会有不同的地方。如果你在v3.8.0之前的版本使用OCI，需要着重了解不同Helm版本之间OCI的变化。&#xA;在v3.8.0之前的版本启用OCI支持 Helm v3.8.0版本之前, OCI支持是试验性的且必须显式启用。&#xA;为了在之前版本中启用OCI试验性支持，需要在环境变量中设置HELM_EXPERIMENTAL_OCI，例如：&#xA;export HELM_EXPERIMENTAL_OCI=1 OCI在v3.8.0中的弃用和行为变化 Helm v3.8.0版本中，以下行为和特性与之前版本不同：&#xA;在依赖中将chart设置为OCI时，版本号可以像其他依赖一样设置成范围。 包含构建信息的SemVer tag可以被推送和使用。OCI注册中心的tag字符不支持+。如果有，Helm会将+ 转成 _。 helm registry login 命令现在采用与Docker CLI相同的结构存储凭证。Helm和Docker CLI的注册表配置使用一样的路径。 OCI在v3.7.0中的弃用和行为变化 Helm v3.7.0版本包含了针对支持OCI的&#xD;HIP 6执行策略。因此以下行为和特性与之前版本不同：&#xA;移除了 helm chart 子命令。 移除了chart缓存(没有了 helm chart list 等等)。 OCI注册引用现在需要以 oci:// 开头。 注册引用的基础名称必须和chart名称匹配。 注册引用的tag必须和chart的语义版本匹配（比如没有latest这种tag）。 chart层的媒体类型从application/tar+gzip转换成了application/vnd.cncf.helm.chart.content.v1.tar+gzip。 使用基于OCI的注册中心 基于OCI注册中心的Helm仓库 Helm 仓库是一种制作和分发打包好的Helm chart的方式。基于OCI的的注册中心包含0个或多个Helm仓库，且每个都会有0个或多个Helm chart。&#xA;使用托管的注册中心 以下是几种chart可以使用的托管容器注册中心，都支持OCI，例如：&#xA;Amazon ECR Azure Container Registry Docker Hub Google Artifact Registry IBM Cloud Container Registry JFrog Artifactory 参照托管平台提供的文档来创建和配置支持OCI的注册中心。</description>
    </item>
    <item>
      <title>Helm 架构</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/architecture/</guid>
      <description>Helm 架构 本文从较高的层次描述Helm的体系结构。&#xA;Helm的目标 Helm管理名为chart的Kubernetes包的工具。Helm可以做以下的事情：&#xA;从头开始创建新的chart 将chart打包成归档(tgz)文件 与存储chart的仓库进行交互 在现有的Kubernetes集群中安装和卸载chart 管理与Helm一起安装的chart的发布周期 对于Helm，有三个重要的概念：&#xA;chart 创建Kubernetes应用程序所必需的一组信息。 config 包含了可以合并到打包的chart中的配置信息，用于创建一个可发布的对象。 release 是一个与特定配置相结合的chart的运行实例。 组件 Helm是一个可执行文件，执行时分成两个不同的部分：&#xA;Helm客户端 是终端用户的命令行客户端。负责以下内容：&#xA;本地chart开发 管理仓库 管理发布 与Helm库建立接口 发送安装的chart 发送升级或卸载现有发布的请求 Helm库 提供执行所有Helm操作的逻辑。与Kubernetes API服务交互并提供以下功能：&#xA;结合chart和配置来构建版本 将chart安装到Kubernetes中，并提供后续发布对象 与Kubernetes交互升级和卸载chart 独立的Helm库封装了Helm逻辑以便不同的客户端可以使用它。&#xA;执行 Helm客户端和库是使用Go编程语言编写的&#xA;这个库使用Kubernetes客户端库与Kubernetes通信。现在，这个库使用REST+JSON。它将信息存储在Kubernetes的密钥中。 不需要自己的数据库。&#xA;如果可能，配置文件是用YAML编写的。</description>
    </item>
    <item>
      <title>Helm高级技术</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/advanced/</guid>
      <description>这部分解释说明了使用Helm的各种高级特性和技术。 这部分旨在为Helm的高级用户提供高度自定义和操作chart及发布的信息。每个高级特性都会有它自己的权衡利弊， 因此每个使用它们的都要有Helm的深度知识并小心使用。或者换言之， 谨记 Peter Parker 原则&#xA;后置渲染 后置渲染允许在通过Helm安装chart之前手动使用、配置或者验证渲染的manifest。 这允许有高级配置需求的用户可以使用诸如&#xD;kustomize 来配置更改而不需要fork一个公共 chart或要求chart维护人员为每个软件指定每个最新的配置项。 这里同样有一些示例用来在企业环境中注入常用工具和sidecar或者在部署前对manifest进行分析。&#xA;前提条件 Helm 3.1+ 使用 后置渲染器是在STDIN能够接受渲染后的Kubernetes manifest并能在STDOUT返回有效的Kubernetes manifest， 可以是任意可执行文件。它应该在出现失败事件时返回非0退出码。这是两个组件之间的唯一API。允许在你的后置渲染过程中有很好的灵活性。&#xA;后置渲染器可以和install、upgrade以及template一起使用。使用后置渲染器时，使用--post-renderer 参数并指定要使用的渲染器可执行文件的路径：&#xA;$ helm install mychart stable/wordpress --post-renderer ./path/to/executable 如果路径中不包含任何分隔符，就会在$PATH中搜索，否则就会把相对路径转换成全路径。&#xA;如果需要使用多个后置渲染器，在一个脚本中调用它们，或者在构建任何二进制工具时调用它们。 在bash中，就像 renderer1 | renderer2 | renderer3 一样简单。&#xA;你可以在 这里 查看作为一个后置渲染器使用 kustomize 的示例。&#xA;警告 在使用后置渲染器时，以下这些事需要注意：使用后置渲染器时最重要的是， 所有人在修改版本时必须 使用同样的渲染器来保证可重复的构建。 这个功能是专门为允许任何用户切换他们正在使用或停止使用的渲染器而构建的， 但是这个应该谨慎操作，以避免意外修改或数据丢失。&#xA;另一个重要的注意事项就是安全，如果您正在使用一个后置渲染器，要保证它来自一个可信源（对于其他任意可执行文件也是如此）。 不推荐使用不可靠的或者未核实的可访问所有渲染器模板的渲染器，渲染器模板经常会包含隐私数据。&#xA;自定义后置渲染 使用Go SDK时后置渲染器甚至可以提供更多的灵活性。任意后置渲染器只需要执行下面的Go接口：&#xA;type PostRenderer interface { // Run expects a single buffer filled with Helm rendered manifests.</description>
    </item>
    <item>
      <title>Kubernetes分发指南</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/kubernetes_distros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/kubernetes_distros/</guid>
      <description>Helm 应该适用于任何&#xD;符合标准的Kubernetes版本（无论是否经过&#xD;认证）。&#xA;该文档捕获在特定Kubernetes环境中使用Helm的有关信息。如果需要，请提供更多有关发行版的详细信息（按字母排序）。&#xA;AKS Helm 使用 Azure Kubernetes Service。&#xA;DC/OS Helm 已经测试并工作在 Mesospheres DC/OS 1.11 Kubernetes平台，且不需要额外的配置。&#xA;EKS Helm 使用Amazon Elastic Kubernetes Service (Amazon EKS): Helm 使用 Amazon EKS。&#xA;GKE Google的GKE托管的Kubernetes平台可以使用Helm工作，且不需要额外配置。&#xA;scripts/local-cluster 和 Hyperkube Hyperkube 通过scripts/local-cluster.sh配置的可以正常工作。对于原始Hyperkube你可能需要一些手动配置。&#xA;IKS Helm 使用&#xD;IBM Cloud Kubernetes Service。&#xA;KIND (Docker中Kubernetes) Helm 会在 KIND 上定期测试。&#xA;KubeOne Helm 在用KubeOne配置的集群中可以无警告地工作。&#xA;Kubermatic Helm在用Kubermatic配置的用户集群中可以无警告地工作。由于种子集群可以以不同的方式建立，因此Helm的支持取决于它们的配置。&#xA;MicroK8s Helm 可以在&#xD;MicroK8s 使用命令启用：microk8s.enable helm3&#xA;Minikube Helm经过测试可以与&#xD;Minikube一起使用，不需要额外配置。&#xA;Openshift Helm 在OpenShift Online上工作非常简单， OpenShift Dedicated, OpenShift Container Platform (version &amp;gt;= 3.</description>
    </item>
    <item>
      <title>基于角色的访问控制</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/rbac/</guid>
      <description>在Kubernetes中，向用户或应用程序特定的服务账户授予角色是确保你的应用程序在指定范围运行的最佳实践。 有关服务账户权限的更多信息请查看&#xD;官方Kubernetes文档。&#xA;从Kubernetes 1.6开始，基于角色的访问控制默认是启用的。RBAC允许你根据你组织中的用户和角色指定行为类型。&#xA;有了RBAC，您可以：&#xA;授权特殊操作 (创建集群范围内的资源，比如新角色) 给管理员 限制用户在指定命名空间创建资源的能力 (pod，持久卷，工作负载)，或者是集群范围内(资源配额，角色，自定义资源) 限制用户在特定命名空间或集群范围内查看资源的能力 该指南适用于希望限制用户与Kubernetes API交互范围的管理员。&#xA;管理用户账户 所有的Kubernetes集群有两类用户：Kubernetes管理的服务账户和普通用户。&#xA;普通用户被认为是有外部独立的服务管理。一个管理员分发私钥，用户的Keystone或者Google账户，甚至用户名密码列表的文件。 在这方面，Kubernetes没有表示普通用户账户的对象。普通用户无法通过API调用添加到集群中。&#xA;相反，服务账户是由Kubernetes API管理的账户。被绑定到指定的命名空间，且有API服务或手动调用API自动创建。 服务账户绑定到了一组作为密钥存储的凭据。它们被挂载到pod中，允许集群内进程与Kubernetes API交互。&#xA;API请求被绑定到了普通用户或者服务账户，或者被视作匿名请求。意味着集群内或外部的每个来自人类用户使用kubectl的进程， 到node的kubelet，或到control plane的成员，向API server 发送请求时必须进行身份验证。否则被视为匿名用户。&#xA;角色，集群角色，角色绑定，及集群角色绑定 在Kubernetes中，用户账户和服务账户只能查看和编辑允许他们访问的资源。通过使用角色和角色绑定授予访问权限。 角色和角色绑定是绑定在特定的命名空间，授予用户查看和/或编辑角色提供访问的命名空间的资源。&#xA;在集群范围内，称为集群角色和集群角色绑定。授予用户集群角色则允许他们有查看和编辑整个集群资源的权限。同样也需要查看和编辑 集群范围的资源（命名空间，资源配额，节点）。&#xA;集群角色可以通过角色绑定中引用被绑定到一个特定的命名空间，通常以这种方式使用管理admin，编辑edit和查看view默认的集群角色。&#xA;有一些集群中默认可用的集群角色。旨在成为面向用户的角色。包括超级用户角色(cluster-admin)， 以及具有更细粒度访问权限的角色 (admin, edit,view)。&#xA;默认集群角色 默认集群角色绑定 描述 cluster-admin system:masters group 允许超级用户访问任意资源并执行任意操作。在集群角色绑定中使用时，它提供了对集群和所有命名空间中的每个资源的完全控制。在角色绑定中使用时，提供了对角色绑定的命名空间的每个资源完全控制，包括命名空间本身。 admin None 允许管理员访问，旨在使用角色绑定在命名空间中授权。如果使用一个角色绑定，允许对命名空间中的大部分资源进行读、写，包括在命名空间中创建角色和角色绑定。不允许对资源配额或命名空间本身进行写操作。 edit None 允许对命名空间中大部分的对象进行读写。不允许查看或修改角色或角色绑定。 view None 允许对命名空间中大部分的对象进行读操作。不允许查看角色或角色绑定。由于密钥需要升级查看，所以不允许该角色查看。 使用RBAC限制用户账户的访问 现在我们明白了基本的基于角色的访问控制，让我们讨论一下管理员如何限制用户的访问范围。&#xA;示例：授权用户特定命名空间的读写操作 限制用户访问特定的命名空间，可以使用edit或admin角色。如果你的chart是用角色或角色绑定创建或交互，应该使用admin集群角色。&#xA;另外，也可以用cluster-admin创建个角色绑定。授予用户命名空间范围内的cluster-admin操作，提供了命名空间内每个资源的完全访问，包括命名空间本身。&#xA;对于这个示例，我们可以使用edit角色创建一个用户。首先，创建一个命名空间：&#xA;$ kubectl create namespace foo 现在在命名空间中创建一个角色绑定，授予用户 edit 角色。&#xA;$ kubectl create rolebinding sam-edit --clusterrole edit \​ --user sam \​ --namespace foo 示例：授予用户集群范围内的读写操作 如果用户希望安装一个chart来安装集群范围的资源（命名空间，角色，自定义资源等等），则需要集群范围的写操作。</description>
    </item>
    <item>
      <title>Helm插件指南</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/plugins/</guid>
      <description>Helm插件是一个可以通过helm CLI访问的工具，但不是Helm的内置代码。&#xA;已有插件可以搜索&#xD;GitHub。&#xA;该指南描述如何使用和创建插件。&#xA;概述 Helm插件是与Helm无缝集成的附加工具。插件提供一种扩展Helm核心特性集的方法，但不需要每个新的特性都用Go编写并加入核心工具中。&#xA;Helm插件有以下特性：&#xA;可以在不影响Helm核心工具的情况下添加和移除。 可以用任意编程语言编写。 与Helm集成，并展示在helm help和其他地方。 Helm插件存在与$HELM_PLUGINS。你可以找到该变量的当前值，包括不设置环境变量的默认值，使用helm env命令。&#xA;Helm插件模型部分基于Git的插件模型。为此，你有时可能听到helm已插件为基础被用作_porcelain_ 层。这是一种Helm提供用户体验和顶级处理逻辑的简写方式。 而插件执行所需操作的“细节工作”。&#xA;安装一个插件 插件使用 $ helm plugin install &amp;lt;path|url&amp;gt; 命令安装插件。你可以在本地文件系统上传一个路径或远程仓库url给插件。The helm plugin install 命令会克隆或拷贝给定路径的插件到 $HELM_PLUGINS。&#xA;$ helm plugin install https://github.com/adamreese/helm-env 如果是插件tar包，仅需解压插件到$HELM_PLUGINS目录。也可以用tar包的url直接安装： helm plugin install https://domain/path/to/plugin.tar.gz。&#xA;构建插件 在很多方面，插件类似于chart。每个插件有个顶级目录和一个plugin.yaml文件。&#xA;$HELM_PLUGINS/ |- last/ | |- plugin.yaml |- last.sh 上述示例中，last插件包含在last目录中。有两个文件：plugin.yaml（必需）和一个可执行脚本，last.sh（可选）。&#xA;插件的核心是一个简单的YAML文件plugin.yaml。下面是一个插件YAML，用于获取最新的release名称：&#xA;name: &amp;#34;last&amp;#34; version: &amp;#34;0.1.0&amp;#34; usage: &amp;#34;get the last release name&amp;#34; description: &amp;#34;get the last release name&amp;#34; ignoreFlags: false command: &amp;#34;$HELM_BIN --host $TILLER_HOST list --short --max 1 --date -r&amp;#34; platformCommand: - os: linux arch: i386 command: &amp;#34;$HELM_BIN list --short --max 1 --date -r&amp;#34; - os: linux arch: amd64 command: &amp;#34;$HELM_BIN list --short --max 1 --date -r&amp;#34; - os: windows arch: amd64 command: &amp;#34;$HELM_BIN list --short --max 1 --date -r&amp;#34; name是插件名称。当Helm执行此插件时使用此名称。（比如，helm NAME会调用此插件）。</description>
    </item>
    <item>
      <title>Helm v2 迁移到 v3</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/v2_v3_migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/v2_v3_migration/</guid>
      <description>该指南介绍如何将Helm v2迁移到v3。Helm v2需要被安装且在一个或多个集群中管理版本。&#xA;Helm 3变化概述 Helm 2 to 3完整的变化列表在 FAQ 部分。 以下是用户在迁移之前应该要注意的一些改变的概述：&#xA;移除了Tiller: 用client/library结构（仅仅helm）替换了 client/server 安全性现在是每个用户的基础（委托给了Kubernetes用户集群安全） 发布版本现在作为集群内的密钥存储且改变了发布对象的元数据 发布版本是在版本命名空间的基础上持久化的并且不再是Tiller的命名空间 升级了Chart仓库： helm search 现在支持本地仓库搜索和Artifact Hub查询 对于以下更新的规范，Chart的apiVersion升级到了&amp;quot;v2&amp;quot;： 动态依赖的chart依赖移动到了Chart.yaml (删除了requirements.yaml 且 requirements --&amp;gt; dependencies) 库chart (辅助/公共库) 现在可以添加为动态链接的chart依赖 Chart有个type元数据字段将chart定义为application或library的chart。默认是可渲染和安装的应用 Helm 2 的chart (apiVersion=v1) 依然可用 添加了XDG目录规范： Helm根目录针对存储配置文件删除和替换了XDG目录规范 不再需要初始化Helm 移除了helm init 和 helm home 其他更改： 简化了Helm的安装和设置： 仅针对Helm客户端 (二进制) 按照已有范式运行 不再默认设置local或stable仓库 删除了crd-install钩子并用chart中的crds目录替换了，在渲染chart之前会安装所有的crd 删除了test-failure钩子注释值，且弃用了test-success。使用test代替 删除/替换/添加的命令： delete --&amp;gt; uninstall : 默认删除所有的发布记录（之前需要--purge） fetch --&amp;gt; pull home (已删除) init (已删除) install: 需要发布名称或者--generate-name 参数 inspect --&amp;gt; show reset (已删除) serve (已删除) template: -x/--execute 参数重命名为 -s/--show-only upgrade: 添加了参数 --history-max，限制每个版本保存的最大记录数量（0表示不限制） Helm 3 Go库经历了很多变化，不再兼容Helm 2库 发行版二进制包现在托管在 get.</description>
    </item>
    <item>
      <title>Helm版本支持策略</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/version_skew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/version_skew/</guid>
      <description>该文档描述了在Helm和Kubernetes之间支持的最大版本偏差。&#xA;支持的版本 Helm的版本用 x.y.z 描述，x是主版本，y是次版本，z是补丁版本，遵循 语义化版本 术语。&#xA;Helm项目维护了一个针对最近次要版本的发布分支。适当的修复，包括安全修复、从发布分支中的cherry-pick， 视严重程度而定。更多细节请查看&#xD;Helm版本策略。&#xA;可支持的版本偏差 当一个Helm的新版本发布时，它是针对Kubernetes的一个特定的次版本编译的。比如，Helm 3.0.0 与Kubernetes的1.16.2的客户端版本交互，一次可以兼容Kubernetes 1.16。&#xA;从Helm 3开始，Helm 编译时假定与针对n-3版本的Kubernetes兼容。由于Helm 2对Kubernetes次版本变更的支持稍微严格一点， 则假定与Kubernetes的n-1版本兼容。&#xA;例如，如果您在使用一个针对Kubernetes 1.17客户端API版本编译的Helm 3版本，那么它应该可以安全地使用Kubernetes 1.17， 1.16，1.15，以及1.14。如果您在使用一个针对Kubernetes 1.16客户端API版本编译的Helm 2版本，那么它应该可以安全地使用 Kubernetes 1.16 和 1.15。&#xA;不推荐将Helm用于比编译它所依赖的版本更高的Kubernetes版本，因为Helm并没有做出任何向前兼容的保证。&#xA;如果您选择了一个Kubernetes版本不支持的Helm，需自负风险。&#xA;请参考下表来确定哪个版本的Helm与您的集群兼容。&#xA;Helm 版本 支持的 Kubernetes 版本 3.12.x 1.27.x - 1.24.x 3.11.x 1.26.x - 1.23.x 3.10.x 1.25.x - 1.22.x 3.9.x 1.24.x - 1.21.x 3.8.x 1.23.x - 1.20.x 3.7.x 1.22.x - 1.19.x 3.6.x 1.21.x - 1.18.x 3.5.x 1.20.x - 1.</description>
    </item>
    <item>
      <title>SQL存储后端的权限管理</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/permissions_sql_storage_backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/permissions_sql_storage_backend/</guid>
      <description>该文档旨在提供用户使用SQL存储后端时设置和管理权限的指导。&#xA;介绍 为了处理权限，Helm利用了Kubernetes的RBAC特性。使用SQL存储后端时， Kubernetes的角色不能被用于确认用户是否可以访问给定的资源。该文档会展示如果创建和管理权限。&#xA;初始化 Helm CLI 首先会连接您的数据库。客户端会确认数据库是否已经预先初始化，如果没有， 它会自动处理必要的安装。初始化需要在public架构的admin权限，或者至少可以做以下事情：&#xA;创建一个表 在public架构授予权限 当你的数据库执行过迁移操作之后，其他角色就可以使用客户端了。&#xA;PostgreSQL向非管理员用户授权 管理权限时，SQL后端驱动会利用PostgreSQL的&#xD;RLS( 行安全级别)特性。RLS允许所有用户读/写同一张表，如果没有明确说明，不允许操作相同的行。 默认情况下，运行helm list时任何角色如果没有明确授权正确的权限会返回空列表，并且不能检索或修改集群中的任何资源。&#xA;我们来看看如何为给定角色授予访问特定命名空间的权限：&#xA;CREATE POLICY &amp;lt;name&amp;gt; ON releases_v1 FOR ALL TO &amp;lt;role&amp;gt; USING (namespace = &amp;#39;default&amp;#39;); 这个命令在使用namespace = &#39;default&#39;条件时会授权给角色role所有资源读和写操作权限。 在创建这个策略时，运行helm list时会代表角色role在默认的命名空间中连接数据库， 因而能看到命名空间中所有的版本，并能修改和删除它们。&#xA;权限可以按照RLS粒度进行管理，人们可能会对表的不同列的访问限制感兴趣：&#xA;key type body name namespace version status owner createdAt modifiedAt </description>
    </item>
    <item>
      <title>发布计划策略</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/release_policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/release_policy/</guid>
      <description>为了用户的利益，Helm提前定义和宣布发布日期。本文档描述了控制Helm发布计划的策略。&#xA;发布日历 可以在&#xD;这里找到显示即将发布的Helm公共日历&#xA;语义化版本 Helm的版本描述为x.y.z，其中x是主版本，y是次版本，z是补丁版本，遵循&#xD;语义化版本术语。&#xA;补丁发布 补丁版本为用户提供bug修复和安全修复。不会包含新的特性。&#xA;与最新的次要/主要版本相关的新补丁通常每月的第二个星期三进行发布一次。&#xA;补丁版本会修复需要处理的高优先级回归或安全问题。&#xA;补丁版本会因为以下原因取消：&#xA;如果自上一个版本没有新内容加入 如果补丁版本的发布日期在第一候选版本发布之前一周之内 如果补丁版本在次版本发布后的四周内 次版本发布 次版本包含安全和bug修复以及新特性。它们对API和CLI用法向后兼容。&#xA;为了与Kubernetes版本保持一致，次要版本会每四个月发布一次（一年三版）。&#xA;如果需要的话，可以发布额外的次版本，但不会影响已经宣布的未来版本的时间线，除非宣布的发布时间不到7天。&#xA;版本发布的同时，下一个次版本的发布时间也宣布并发布在Helm的主页上。&#xA;主版本发布 主版本包含了突破性的更改。这种版本很少，但是有时需要允许helm在重要的新方向上持续改善。&#xA;主版本很难计划。考虑到这一点，最终发布时间只能在第一个beta版本可用时选择和宣布。</description>
    </item>
    <item>
      <title>弃用的 Kubernetes API</title>
      <link>https://jaymz1439.github.io/zh/docs/topics/kubernetes_apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/zh/docs/topics/kubernetes_apis/</guid>
      <description>Kubernetes是一个API驱动系统，且API会随着时间的推移而变化，以反映对问题理解的不断推移。这是系统及API的普遍做法。 API推移的一个重要部分时良好的弃用策略和通知用户更改API是如何实现的。换句话说，你的API使用者需要提前知道要发布的API 删除或更改了什么。这消除了重大改变对用户造成的恐惧。&#xA;Kubernetes弃用策略 文档描述了如何处理API版本的变化。弃用策略声明了在弃用声明之后支持的API版本的时间范围。因此关注弃用声明并知道API何时被移除很重要。 有助于将影响降到最低。&#xA;这是一个声明示例， 针对Kubernetes 1.6弃用的API版本， 而且是在版本发布的几个月之前公布。在这之前，这些API版本可能已经宣布不再使用了。这表明一个好的策略可以通知用户API的版本支持。&#xA;Helm模板定义Kubernetes对象时指定了一个 Kubernetes API组，类似于Kubernetes的manifest文件。 在模板的apiVersion字段指定并标识了Kubernetes对象的API版本。这意味着Helm用户和chart维护者需要关注Kubernetes的API版本 何时会被弃用且在哪个Kubernetes版本中被移除。&#xA;Chart Maintainers 你应该审核chart，检查Kubernetes中已弃用或已删除的Kubernetes API版本。如果API版本不再被支持，应该更新为支持版本并发布新的 chart版本。API版本由kind和apiVersion字段定义。比如，Kubernetes 1.16 中有个被移除的Deployment对象API版本：&#xA;apiVersion: apps/v1beta1 kind: Deployment Helm用户 你应该审核你使用的chart(类似于&#xD;chart维护者)，并识别所有的chart中Kubernetes版本弃用或移除的API版本。 针对确定的chart，需要检查（有支持的API版本的）chart最新的版本，或者手动更新。&#xA;另外，你还需要审核已经部署的chart（即Helm版本）还有没有弃用或移除的API版本。可以使用helm get manifest获取详细信息。&#xA;将Helm更新为支持的API取决于你通过以下方式找到的：&#xA;如果你只找到弃用的API版本，则：&#xA;执行helm upgrade升级Kubernetes API版本支持的chart版本 在升级中添加一个描述，在当前版本之前不执行Helm版本回滚 如果你发现了在Kubernetes版本中被移除的API版本，则：&#xA;如果你运行的Kubernetes版本中API版本依然可用（比如，你在Kubernetes 1.15 且你发现使用的API会在1.16中移除）： 遵循第1步的步骤 否则（比如，你运行的Kubernetes 版本中某些API版本通过helm get manifest显示不可用）： 需要编辑存储在集群中的版本清单，更新API版本到支持的API。查看&#xD;更新版本清单的API版本 注意：在所有使用支持的API更新Helm版本的场景中，决不应该将发布版本回滚到API版本支持的之前的版本&#xA;建议：最佳实践是将正在使用的弃用版本升级到支持的API版本，在升级Kubernetes 集群之前删除这些API版本。&#xA;如果你没有按照之前的建议更新版本， 当升级的Kubernetes版本中API的版本已经移除，会出现类似下面的错误：&#xA;Error: UPGRADE FAILED: current release manifest contains removed kubernetes api(s) for this kubernetes version and it is therefore unable to build the kubernetes objects for performing the diff.</description>
    </item>
  </channel>
</rss>
