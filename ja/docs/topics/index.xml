<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>トピック on Helm</title>
    <link>https://sma-rnd.github.io/ja/docs/topics/</link>
    <description>Recent content in トピック on Helm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://sma-rnd.github.io/ja/docs/topics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>チャートのテスト</title>
      <link>https://sma-rnd.github.io/ja/docs/topics/chart_tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sma-rnd.github.io/ja/docs/topics/chart_tests/</guid>
      <description>チャートには、連携して動作するいくつかの Kubernetes リソースとコンポーネントが含まれています。 チャートの作成者は、チャートがインストールされたときにチャートが期待どおりに機能することを検証するテストを作成することができます。 これらのテストは、 チャートの利用者がチャートで何をするかを理解するのにも役立ちます。&#xA;Helm チャートの テスト は、templates/ ディレクトリの下にあり、 実行する特定のコマンドを含むコンテナーを指定するジョブ定義です。 テストが成功したと見なされるには、コンテナが正常に終了 (exit 0) する必要があります。 ジョブ定義には、helm テストフックアノテーション helm.sh/hook: test が含まれている必要があります。&#xA;テストの例:&#xA;values.yaml ファイルの構成が適切に挿入されたことを確認する 正しいユーザー名とパスワードが機能することを確認する 正しくないユーザー名とパスワードが機能しないことを確認する サービスが稼働しており、正しく負荷分散されていることを確認する など コマンド helm test &amp;lt;リリース名&amp;gt; を使用して、リリースの Helm で事前定義されたテストを実行できます。チャートの利用者にとって、これはチャート (またはアプリケーション) のリリースが期待どおりに機能することを正常性チェックする優れた方法です。&#xA;テストの例 以下は、mariadb チャートの例における Helm テストポッド定義の例です。&#xA;mariadb/ Chart.yaml README.md values.yaml charts/ templates/ templates/tests/test-mariadb-connection.yaml wordpress/templates/tests/test-mariadb-connection.yaml の内容&#xA;apiVersion: batch/v1 kind: Job metadata: name: &amp;#34;{{ .Release.Name }}-credentials-test&amp;#34; annotations: &amp;#34;helm.sh/hook&amp;#34;: test spec: template: spec: containers: - name: main image: {{ .</description>
    </item>
    <item>
      <title>Helm アーキテクチャ</title>
      <link>https://sma-rnd.github.io/ja/docs/topics/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sma-rnd.github.io/ja/docs/topics/architecture/</guid>
      <description>Kubernetes Helm アーキテクチャ このドキュメントでは、Helm アーキテクチャの概要について説明します。&#xA;Helm の目的 Helm は、チャート と呼ばれる Kubernetes パッケージを管理するためのツールです。 Helm は次のことができます。&#xA;最初から新しいチャートを作成する チャートをチャートアーカイブ (tgz) ファイルにパッケージ化する チャートが保存されているチャートリポジトリを操作する チャートを既存の Kubernetes クラスターにインストールおよびアンインストールする Helm でインストールされたチャートのリリースサイクルを管理する Helm には、3つの重要な概念があります。&#xA;チャート は、Kubernetes アプリケーションのインスタンスを作成するために必要な 情報のバンドルです コンフィグ には、リリース可能なオブジェクトを作成するためにパッケージ化された チャートにマージできる構成情報が含まれています リリース は、特定の コンフィグ と組み合わせた チャート の 実行中のインスタンスです コンポーネント Helm は、2つの異なる部分に実装される実行可能ファイルです。&#xA;Helm クライアント は、エンドユーザー向けのコマンドラインクライアントです。 クライアントは次のことを担当します。&#xA;ローカルチャート開発 リポジトリの管理 リリースの管理 Helm ライブラリとのインターフェース インストールするチャートを送信する 既存のリリースのアップグレードまたはアンインストールの要求 Helm ライブラリ は、すべての Helm 操作を実行するためのロジックを提供します。 Kubernetes API サーバーとインターフェースし、次の機能を提供します。&#xA;チャートと構成を組み合わせてリリースを構築する チャートを Kubernetes にインストールし、後続のリリースオブジェクトを提供する Kubernetes との対話によるチャートのアップグレードとアンインストール スタンドアロンの Helm ライブラリは Helm ロジックをカプセル化しているため、 さまざまなクライアントが活用できます。</description>
    </item>
    <item>
      <title>高度な Helm のテクニック</title>
      <link>https://sma-rnd.github.io/ja/docs/topics/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sma-rnd.github.io/ja/docs/topics/advanced/</guid>
      <description>このセクションでは、Helm を使用するためのさまざまな高度な機能とテクニックについて説明します。 このセクションの情報は、チャートとリリースの高度なカスタマイズと操作を行いたい Helm の「パワーユーザー」を対象としています。 これらの高度な機能にはそれぞれ独自のトレードオフと警告があり、 Helm の深い知識を駆使して慎重に使用する必要があります。 言い換えれば、&#xD;ピーター・パーカーの原則 を覚えておいてください&#xA;ポストレンダリング ポストレンダリングにより、チャートインストーラーは、Helm によってインストールされる前に、 レンダリングされたマニフェストを手動で操作、構成、または検証することができます。 これにより、高度な構成を持つユーザーは、&#xD;kustomize などのツールを使用して、 パブリックチャートをフォークしたり、 チャートのメンテナーがソフトウェアの最後の構成オプションをすべて指定したりする必要なく、 構成の変更を適用できます。 エンタープライズ環境での一般的なツールやサイドカーの注入、 展開前のマニフェストの分析のユースケースもあります。&#xA;前提条件 Helm 3.1+ 使い方 ポストレンダラーは、STDIN でレンダリングされた Kubernetes マニフェストを受け入れ、 STDOUT で有効な Kubernetes マニフェストを返す任意の実行可能ファイルです。 失敗した場合は、0 以外の終了コードを返します。 これは、2つのコンポーネント間の唯一の &amp;quot;API&amp;quot; です。 これにより、ポストレンダリングプロセスで実行できる操作に大きな柔軟性がもたらされます。&#xA;ポストレンダラーは、install、upgrade、および template で使用できます。 ポストレンダラーを使用するには、 使用するレンダラー実行可能ファイルへのパスで --post-renderer フラグを使用します。&#xA;$ helm install mychart stable/wordpress --post-renderer ./path/to/executable パスにセパレータが含まれていない場合は、$PATH で検索されます。 それ以外の場合は、相対パスが完全修飾パスに解決されます。&#xA;複数のポストレンダラーを使用したい場合は、それらをすべてスクリプトで呼び出すか、 ビルドしたバイナリツールで一緒に呼び出します。 bash では、これは renderer1 | renderer2 | renderer3 のように単純です。&#xA;kustomize をポストレンダラーとして使用する例は hereで見ることができます。</description>
    </item>
  </channel>
</rss>
