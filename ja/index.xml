<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Helm</title>
    <link>https://helm.sh/ja/</link>
    <description>Recent content on Helm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://helm.sh/ja/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>クイックスタートガイド</title>
      <link>https://helm.sh/ja/docs/intro/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/intro/quickstart/</guid>
      <description>このガイドでは、Helm をすぐに使い始める方法について説明します。&#xA;前提条件 Helm を正しく安全に使用するには、 次の前提条件が必要です。&#xA;Kubernetes クラスター インストールに適用するセキュリティ構成がある場合は、それを決定する Helm のインストールと構成 Kubernetes をインストールするか、クラスターにアクセスする Kubernetes がインストールされている必要があります。 Helm の最新リリースには、Kubernetesの最新の安定リリースをお勧めします。 これは、ほとんどの場合、2番目に新しいマイナーリリースです。 ローカルに設定された kubectl のコピーも必要です。 注: 1.6 より前のバージョンの Kubernetes では、ロールベースのアクセス制御 (RBAC) のサポートが制限されているか、 サポートされていません。&#xA;Helm のインストール Helm クライアントのバイナリリリースをダウンロードします。homebrew のようなツールを使うか、 公式リリースページ を見ることができます。&#xA;詳細またはその他のオプションについては、 インストールガイド を参照してください。&#xA;Helm チャートリポジトリを初期化する Helm の準備ができたら、チャートリポジトリを追加できます。 ポピュラーな開始場所の1つは、公式の Helm Stable チャートです。&#xA;$ helm repo add stable https://charts.helm.sh/stable これがインストールされると、インストールできるチャートを一覧表示できるようになります。&#xA;helm search repo stable NAME CHART VERSION APP VERSION DESCRIPTION stable/acs-engine-autoscaler 2.2.2 2.1.1 DEPRECATED Scales worker nodes within agent pools stable/aerospike 0.</description>
    </item>
    <item>
      <title>チャート開発のヒントとコツ</title>
      <link>https://helm.sh/ja/docs/howto/charts_tips_and_tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/howto/charts_tips_and_tricks/</guid>
      <description>このガイドでは、 Helm チャート開発者がプロダクション品質のチャートを構築する際に学んだヒントやコツを紹介しています。&#xA;テンプレートの関数を知る Helm はリソースファイルのテンプレートに Go テンプレートを使用します。 Go にはいくつかの組み込み機能がありますが、 他にも多くの機能が追加されています。&#xA;まず、 Sprig ライブラリの関数をすべて追加しました。&#xA;また、include と required の2つの特別なテンプレート関数を追加しました。 include 関数では、別のテンプレートを持ち込んで、 その結果を他のテンプレート関数に渡すことができます。&#xA;例えば、このテンプレートスニペットは mytpl というテンプレートを含み、 その結果を小文字にして二重引用符で囲んでいます。&#xA;value: {{ include &amp;#34;mytpl&amp;#34; . | lower | quote }} required 関数では、テンプレートレンダリングに必要な特定の値のエントリを宣言することができます。 値が空の場合、テンプレートのレンダリングは ユーザーが送信したエラーメッセージで失敗します。&#xA;以下の required 関数の例は、.Values.who のエントリが必須であることを宣言し、 そのエントリが見つからない場合に エラーメッセージを表示します。&#xA;value: {{ required &amp;#34;A valid .Values.who entry required!&amp;#34; .Values.who }} 文字列を引用する、整数を引用しない 文字列データを扱う際には、文字列をそのままにしておくよりも、 引用符で囲んだ方が安全です。&#xA;name: {{ .Values.MyName | quote }} しかし、整数で作業するときは 値を引用しないでください。 これは多くの場合、Kubernetes 内部で parse エラーを引き起こす可能性があります。</description>
    </item>
    <item>
      <title>一般的な慣習</title>
      <link>https://helm.sh/ja/docs/chart_best_practices/conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/chart_best_practices/conventions/</guid>
      <description>ベストプラクティスガイドのこの部分では一般的な慣習について説明します。&#xA;チャート名 チャート名は英小文字と数字である必要があります。単語はダッシュ（-）で区切ることも できます 。&#xA;例:&#xA;drupal nginx-lego aws-cluster-autoscaler 英大文字とアンダースコアは両方ともチャート名に用いることはできません。ドットもチャート名には使わないべきです。&#xA;バージョン数 可能ならばどこであっても、Helm はバージョン数を表現するために SemVer 2 を使います。（Docker イメージタグは SemVer に従う必要がないことに注意してください。またこれは残念ながら規約の例外とみなされています。）&#xA;SemVer バージョンが Kubernetes ラベルに保存されるとき、私たちは慣習的に文字 + を文字 _ に置き換えます。これはラベルで + が値を表さないようにするためです。&#xA;YAML のフォーマット YAML ファイルは 2 つのスペース でインデントされるべきです（そしてタブは使いません）。&#xA;単語 Helm と Chart の使い方 単語 Helm および helm の使い方についていくつかの慣習があります。&#xA;Helm はプロジェクト全体を表します。 helm はクライアントサイドのコマンドを表します。 用語 chart を大文字化する必要はありません。なぜならそれは固有名詞ではないためです。 しかし、ファイル名はケース・センシティブであるため Chart.yaml は大文字化する必要があります。 迷ったときは、 Helm （大文字の &#39;H&#39; を含む）を使いましょう。</description>
    </item>
    <item>
      <title>開発者ガイド</title>
      <link>https://helm.sh/ja/docs/community/developers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/community/developers/</guid>
      <description>このガイドでは、Helmで開発するための環境をセットアップする方法について説明します。&#xA;必要な環境 Goの最新バージョン kubectlおよびKubernetesクラスター (optional) Git Helmをビルドする Makeを使用してプログラムを構築します。最も簡単な方法は次のとおりです:&#xA;$ make 注意: $GOPATH/src/helm.sh/helm のパスにて実行されていない場合、このコマンドは失敗します。 また、build が関連するパッケージが見つけられないため、helm.shディレクトリをシンボリックリンクにしてはいけません。&#xA;このコマンドは必要に応じて依存関係をインストールし、vendor/ツリーを再ビルドしたのち、configurationを検証します。 その後にhelmをコンパイルしてbin/helmに配置します。&#xA;Helmをローカルで実行するには、bin/helmを実行してください。&#xA;Helmは、macOSおよびAlpineを含んだほとんどのLinuxディストリビューションで動作することが知られています。 テストの実行 すべてのテスト(vendor/のテストを除く)を実行するには、make testを実行してください。 前提条件として、&#xD;golangci-lint をインストールする必要があります 。&#xA;コントリビューションガイドライン 私たちはコントリビューションを歓迎します。 このプロジェクトは、（a) コードの品質を高く保ち（b）プロジェクトの一貫性を保ち（c）コントリビューションがオープンソースの法的要件に従うことを保証するため、いくつかのガイドラインを設定しました。 私たちの目的はコントリビューターに負担をかけることではなく、ユーザーが利益を得ることができるようにエレガントで高品質なオープンソースコードを構築することです。&#xA;CONTRIBUTINGガイドを読み、理解していることを確認してください。&#xA;https://github.com/helm/helm/blob/main/CONTRIBUTING.md&#xA;コードの構造 Helmプロジェクトのコードは、以下のように構成されています。&#xA;個々のプログラムはcmd/にあります。cmd/内のコードはライブラリ再利用を目的として設計されていません。 共有ライブラリはpkg/にあります。 scripts/ディレクトリには多数のユーティリティスクリプトがあります。これらのほとんどはCI/CDパイプラインによって使用されます。 Goの依存関係管理は流動的であり、Helmのライフサイクルの過程で変更される可能性があります。 依存関係を手動で管理 しない ことをお勧めします。 その代わりに、プロジェクトのMakefileに依存して管理を行うことをお勧めします。 Helm 3では、Goバージョン1.13以降を使用することをお勧めします。&#xA;ドキュメントの作成 Helm 3以降、ドキュメントは独自のリポジトリに移動されました。 新しい機能を作成する場合は付属のドキュメントを作成して、&#xD;helm-wwwにsubmitしてください。&#xA;例外: Helm CLI output (英語) は helm のバイナリ自体から生成されます。 このoutputを生成する方法については&#xD;Updating the Helm CLI Reference Docs をご覧ください。 翻訳された場合、CLI出力は生成されず/content/&amp;lt;lang&amp;gt;/docs/helmに生成されます。&#xA;Git 規約 バージョン管理システムにはGitを使用しています。 mainブランチは現在の開発候補の中心です。 リリースにはタグが付けられます。</description>
    </item>
    <item>
      <title>Helm のインストール</title>
      <link>https://helm.sh/ja/docs/intro/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/intro/install/</guid>
      <description>このガイドでは、Helm CLI のインストール方法を示します。Helm はソースから、またはビルド済みのバイナリリリースから インストールできます。&#xA;Helm プロジェクトから Helm プロジェクトは、Helm をフェッチしてインストールする2つの方法を提供します。 これらは Helm リリースを取得するための公式の方法です。さらに、Helm コミュニティは、 さまざまなパッケージマネージャーを通じて Helm をインストールする方法を提供しています。 これらの方法によるインストールは、公式の方法の下にあります。&#xA;バイナリリリースから Helm のすべての リリース は、さまざまな OS のバイナリリリースを提供します。 これらのバイナリバージョンは、手動でダウンロードして インストールできます。&#xA;任意のバージョンをダウンロードします ダウンロードしたパッケージを展開します (tar -zxvf helm-v3.0.0-linux-amd64.tar.gz) 展開したディレクトリで helm バイナリを見つけ、 目的の場所に移動します (mv linux-amd64/helm /usr/local/bin/helm) そこから、クライアントを実行し、&#xD;Stable リポジトリを追加できるはずです: helm help を参考&#xA;注: Helm 自動テストは、CircleCi のビルドとリリース中にのみLinux AMD64 に対して実行されます。 他の OS のテストは、 対象の OS の Helm を要求するコミュニティの責任の元で行われています。&#xA;スクリプトから Helm に、最新バージョンの Helm を自動的に取得して ローカルにインストールする インストーラースクリプトが追加されました。&#xA;そのスクリプトをフェッチして、ローカルで実行できます。 十分に文書化されているため、実行する前にそれを読んで何が行われているかを理解できます。&#xA;$ curl -fsSL -o get_helm.</description>
    </item>
    <item>
      <title>値</title>
      <link>https://helm.sh/ja/docs/chart_best_practices/values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/chart_best_practices/values/</guid>
      <description>ベストプラクティスガイドのこの部分では、値の設定方法を解説します。 チャートのvalues.yamlの書き方に重点を置いて、値を構造化して利用するおすすめの方法を解説します。&#xA;命名規則 変数名は小文字で始める必要があります。また、単語はキャメルケースで区切ってください。&#xA;正しい書き方:&#xA;chicken: true chickenNoodleSoup: true 正しくない書き方:&#xA;Chicken: true # 最初を大文字にすると予約語と衝突することがあります chicken-noodle-soup: true # ハイフンは使わないでください ユーザー定義のパラメータと区別しやすくするため、Helmの全ての予約語は大文字で始まります。 例) .Release.Name, .Capabilities.KubeVersion&#xA;フラット・ネスト構造の値 YAMLは柔軟な形式なので、値を深くネストすることも、フラットにすることもできます。&#xA;ネスト:&#xA;server: name: nginx port: 80 フラット:&#xA;serverName: nginx serverPort: 80 ほとんどの場合、ネストよりフラットな方が好まれます。フラットな方がテンプレートの開発者・ユーザーがよりシンプルに理解できるからです。&#xA;ネストされた値を安全に扱うためには、全ての階層で値をチェックする必要があります。&#xA;{{ if .Values.server }} {{ default &amp;#34;none&amp;#34; .Values.server.name }} {{ end }} ネストされた全ての階層では値が存在するかをチェックする必要があります。 その一方でフラット構成の場合、このようなチェックをせずにテンプレートを読みやすく、使いやすくすることができます。&#xA;{{ default &amp;#34;none&amp;#34; .Values.serverName }} 関連する変数が多数あり、そのうちの少なくとも1つが必須の変数である場合は、 読みやすさを向上させるためにネストされた値を使うことがあります。&#xA;型の明確化 YAMLの型強制ルールは直感に反することがあります。例えば foo: falseと foo: &amp;quot;false&amp;quot;は同じではありません。foo: 12345678 のように大きな整数は、 科学的表記に変換される場合があります。&#xA;型変換エラーを回避する最も簡単な方法は、文字列は明示的に扱い、その他全ては暗黙的に扱うことです。 簡潔に言えば、すべての文字列を引用する ということです。</description>
    </item>
    <item>
      <title>Helm の使い方</title>
      <link>https://helm.sh/ja/docs/intro/using_helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/intro/using_helm/</guid>
      <description>このガイドでは、Helm を使用して Kubernetes クラスタ上のパッケージを管理する基本について説明します。 Helm クライアントが既に インストール済み であると 想定しています。&#xA;いくつかのクイックコマンドを実行したいだけの場合は、 クイックスタートガイド から始めてください。 この章では、Helm コマンドの詳細について説明し、Helm の使用方法を説明します。&#xA;3つの大きな概念 チャート は Helm パッケージです。 これには、Kubernetes クラスタ内でアプリケーション、ツール、またはサービスを実行するために必要なすべてのリソース定義が含まれています。 Kubernetes に置ける Homebrew の式、Apt dpkg、 または Yum RPM ファイルに相当するようなものと考えてください。&#xA;リポジトリ は、チャートを収集して共有できる場所です。 Perl の CPAN アーカイブ や Fedora パッケージデータベースに似ていますが、 Kubernetes パッケージが対象です。&#xA;リリース は、Kubernetes クラスタで実行されているチャートのインスタンスです。 多くの場合、1つのチャートを同じクラスターに何度もインストールできます。 そして、それがインストールされるたびに、新しい リリース が作成されます。 MySQL チャートを考えてみましょう。クラスターで2つのデータベースを実行する場合は、そのチャートを2回インストールできます。 それぞれに独自の リリース があり、次に独自の リリース名 が付けられます。&#xA;これらの概念を念頭に置いて、Helm を次のように説明できます。&#xA;Helm は チャート を Kubernetes にインストールし、インストールごとに新しい リリース を作成します。 また、新しいチャートを見つけるには、Helm チャート リポジトリ を検索できます。</description>
    </item>
    <item>
      <title>チャートのテスト</title>
      <link>https://helm.sh/ja/docs/topics/chart_tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/topics/chart_tests/</guid>
      <description>チャートには、連携して動作するいくつかの Kubernetes リソースとコンポーネントが含まれています。 チャートの作成者は、チャートがインストールされたときにチャートが期待どおりに機能することを検証するテストを作成することができます。 これらのテストは、 チャートの利用者がチャートで何をするかを理解するのにも役立ちます。&#xA;Helm チャートの テスト は、templates/ ディレクトリの下にあり、 実行する特定のコマンドを含むコンテナーを指定するジョブ定義です。 テストが成功したと見なされるには、コンテナが正常に終了 (exit 0) する必要があります。 ジョブ定義には、helm テストフックアノテーション helm.sh/hook: test が含まれている必要があります。&#xA;テストの例:&#xA;values.yaml ファイルの構成が適切に挿入されたことを確認する 正しいユーザー名とパスワードが機能することを確認する 正しくないユーザー名とパスワードが機能しないことを確認する サービスが稼働しており、正しく負荷分散されていることを確認する など コマンド helm test &amp;lt;リリース名&amp;gt; を使用して、リリースの Helm で事前定義されたテストを実行できます。チャートの利用者にとって、これはチャート (またはアプリケーション) のリリースが期待どおりに機能することを正常性チェックする優れた方法です。&#xA;テストの例 以下は、mariadb チャートの例における Helm テストポッド定義の例です。&#xA;mariadb/ Chart.yaml README.md values.yaml charts/ templates/ templates/tests/test-mariadb-connection.yaml wordpress/templates/tests/test-mariadb-connection.yaml の内容&#xA;apiVersion: batch/v1 kind: Job metadata: name: &amp;#34;{{ .Release.Name }}-credentials-test&amp;#34; annotations: &amp;#34;helm.sh/hook&amp;#34;: test spec: template: spec: containers: - name: main image: {{ .</description>
    </item>
    <item>
      <title>テンプレート</title>
      <link>https://helm.sh/ja/docs/chart_best_practices/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/chart_best_practices/templates/</guid>
      <description>ベストプラクティスガイドのこの部分では、テンプレートについて焦点を合わせます。&#xA;templates/の構造 templates/ディレクトリは次のように構造化されるべきです:&#xA;テンプレートファイルは、YAMLを出力するのであれば、.yamlの拡張子をつけるべきです。 .tpl拡張子はフォーマットされない内容を出力するテンプレートファイルに使用することができます。 テンプレートファイルの名前はキャメルケースではなく、ハイフン区切り（my-example-configmap.yaml） で命名すべきです。 それぞれのリソース定義は、テンプレートファイル毎に独立したものにすべきです。 テンプレートファイルの名前は、そのリソースの種類を名前に含めるべきです。e.g. foo-pod.yaml, bar-svc.yaml 定義されたテンプレートの名前 定義されたテンプレート（{{ define }} ディレクティブの中に作られたテンプレート）は グローバルにアクセス可能です。つまり、チャートとそのサブチャート全てが、{{ define }} で作成されたテンプレートにアクセスすることができます。&#xA;そのため、定義されたテンプレート名は全て、名前空間を含んでいるべきです。&#xA;正しい書き方:&#xA;{{- define &amp;#34;nginx.fullname&amp;#34; }} {{/* ... */}} {{ end -}} 正しくない書き方:&#xA;{{- define &amp;#34;fullname&amp;#34; -}} {{/* ... */}} {{ end -}} 新しいチャートは常に、自動的にテンプレート名をベストプラクティスに応じて定義するため、 helm createコマンド経由で作成することを強く推奨します。&#xA;テンプレートのフォーマット テンプレートは 二つのスペース でインデントするべきです。（タブではなく）&#xA;テンプレートディレクティブは、中括弧の開始の後と終わりの前にスペースを入れるべきです。&#xA;正しい書き方:&#xA;{{ .foo }} {{ print &amp;#34;foo&amp;#34; }} {{- print &amp;#34;bar&amp;#34; -}} 正しくない書き方:&#xA;{{.foo}} {{print &amp;#34;foo&amp;#34;}} {{-print &amp;#34;bar&amp;#34;-}} 可能な場合、テンプレートはスペースを詰めるべきです:</description>
    </item>
    <item>
      <title>プロジェクトの歴史</title>
      <link>https://helm.sh/ja/docs/community/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/community/history/</guid>
      <description>Helm は CNCF の Graduated プロジェクトです。&#xA;Helm は、現在 Helm Classic として知られているものとして始まりました。 これは、2015年に開始され、 最初の KubeCon で導入された Deis プロジェクトです。&#xA;2016 年 1 月、プロジェクトは Kubernetes Deployment Manager と呼ばれる GCS ツールと統合され、 プロジェクトは Kubernetes の下に移動されました。 コードベースの統合の結果、 Helm 2.0 がその年の後半にリリースされました。 Helm 2 で生き残った Deployment Manager の主要な機能はサーバー側のコンポーネントで、 最終的な Helm 2.0 リリースでは DM から Tiller に名前が変更されました。&#xA;Helm は、2018 年 6 月に Kubernetes サブプロジェクトから本格的な CNCF プロジェクトに昇格しました。 Helm はトップレベルの管理組織を形成し、 Monocular、Helm Chart Repo、Chart Museum、そして後に Helm Hub など、 いくつかのプロジェクトが Helm プロジェクトに組み込まれました。&#xA;Helm 3 の開発サイクルが始まると、Tiller が削除され、 Helm はクライアントツールであるという当初のビジョンに近づきました。 ただし、Helm 3 は引き続き Kubernetes クラスター内のリリースを追跡しているため、 チームが共同で Helm リリースのセットで作業することができます。Helm 3 は 2019 年 11 月にリリースされました。</description>
    </item>
    <item>
      <title>依存関係</title>
      <link>https://helm.sh/ja/docs/chart_best_practices/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/chart_best_practices/dependencies/</guid>
      <description>このセクションでは、Chart.yamlに宣言された依存関係のベストプラクティスについて 解説します。&#xA;バージョン 可能であれば、正確なバージョンを固定するよりバージョンの範囲を使用してください。デフォルト では、パッチレベルのバージョンマッチを使用することが推奨されています:&#xA;version: ~1.2.3 これはバージョン1.2.3とそのバッチバージョンにマッチします。つまり、 ~1.2.3は&amp;gt;= 1.2.3, &amp;lt; 1.3.0と同等になります。&#xA;完全なバージョンマッチのシンタックスについては、&#xD;semver documentation を参照してください。&#xA;プレリリースバージョン 上記のバージョンの制約は、プレリリースバージョンにはマッチしません。 例えば、version: ~1.2.3はversion: ~1.2.4にマッチしますが、version: ~1.2.3-1 にはマッチしません。 以下はパッチレベルのマッチングだけでなく、プレリリースにも対応します:&#xA;version: ~1.2.3-0 リポジトリURL 可能であれば、https://のリポジトリURLを使用し、その後、http://のURLを使用してください。&#xA;リポジトリが、そのインデックスファイルに追加されている場合、リポジトリの名前がURLの別名 として使われます。alias:もしくは@の後に、リポジトリ名を付けて利用してください。&#xA;ファイルのURL（file://...）は固定されたデプロイパイプラインによって組み立てられた チャートのための&amp;quot;特殊なケース&amp;quot;と考えられます。&#xA;downloader pluginsを使用する場合、 URLのスキームはプラグインに固有になります。注意としては、チャートの利用者はその依存関係を ビルドもしくは更新するために、スキームをサポートするプラグインをインストールする必要があります。&#xA;repositoryフィールドが空白の場合、Helmは依存関係の管理操作を行うことができません。 その場合、Helmはその依存関係がnameで指定した名前と同じ名前の、 chartsフォルダーのサブディレクトリにあると推測します。&#xA;コンディションとタグ 任意の 依存関係には、コンディションもしくはタグを追加するべきです。&#xA;コンディションの好ましい書き方:&#xA;condition: somechart.enabled ここではsomechartが依存関係のあるチャートの名前です。&#xA;複数のサブチャート（依存関係）が共に任意もしくは取り替え可能な機能 を提供する場合、これらのチャートは同じタグを共有するべきです。&#xA;例えば、nginxとmemcachedの両方がチャート内で、メインアプリケーション用に パフォーマンスの最適化を提供している場合、そして、その機能を使用する際、その両方が 必要になる場合、このようなタグのセクションを含めるべきでしょう:&#xA;tags: - webaccelerator これにより、利用者はその機能のオンとオフを一つのタグで切り替えることができます。</description>
    </item>
    <item>
      <title>Helm ドキュメントの国際化</title>
      <link>https://helm.sh/ja/docs/community/localization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/community/localization/</guid>
      <description>このガイドでは Helm ドキュメントをどのように国際化するかを説明します。&#xA;はじめに 翻訳への貢献にはドキュメントへの貢献と同様のプロセスを用います。翻訳は helm-www git リポジトリへの&#xD;プルリクエストによって供給され、プルリクエストはウェブサイトの管理チームによってレビューされます。&#xA;2文字言語コード ドキュメントは ISO 639-1 標準 言語コードによって管理されます。例えば、韓国語の2文字コードは ko です。&#xA;コンテンツや設定でこの言語コードが使われます。3つ例を示します。&#xA;content ディレクトリ内で言語コードがサブディレクトリとして存在し、国際化されたコンテンツがそれぞれのディレクトリに入っています。 i18n ディレクトリはそれぞれの言語について、ウェブサイトで使用されるフレーズについての設定ファイルを保有しています。それらのファイルは [LANG] がその言語の2文字コードとなるような [LANG].toml というパターンで命名されています。 トップレベルの config.toml ファイルではナビゲーションやその他の詳細が言語コードごとに管理されています。 言語コード en を持つ英語が、デフォルトの言語および翻訳元として用いられます。&#xA;フォーク、ブランチ、変更、プルリクエスト 翻訳に貢献するために、まずは Github の helm-www リポジトリの&#xD;フォークを作ることから始めましょう。あなたはまずあなたのフォークに変更をコミットすることから始めるでしょう。&#xA;初期状態であなたのフォークは main として知られるデフォルトブランチに設定されているでしょう。あなたの変更を開発するあるいはプルリクエストを作成するためにブランチを使用してください。もしブランチについて不慣れなら&#xD;それらについて Github ドキュメントで読むことができます。&#xA;ブランチを作成出来たら、翻訳を追加したり、コンテンツを国際化したりしましょう。&#xA;注：helm は Developers Certificate of Origin を利用しています。すべてのコミットは署名されている必要があります。コミットを作成する際に -s か --signoff フラグを用いることで、あなたの Git に設定されている名前とメールアドレスを用いてコミットに署名することができます。詳細については CONTRIBUTING.md をご覧ください。&#xA;準備ができたら、&#xD;プルリクエスト を作成し、helm-www リポジトリに反映しましょう。&#xA;作成されたプルリクエストは管理者によってレビューされます。その過程についての詳細は CONTRIBUTING.md を参照してください。&#xA;コンテンツの翻訳 全ての Helm コンテンツを国際化するのは大きな仕事です。小さなことから初めて大丈夫です。時間をかけて翻訳を拡大することができます。</description>
    </item>
    <item>
      <title>ラベルとアノテーション</title>
      <link>https://helm.sh/ja/docs/chart_best_practices/labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/chart_best_practices/labels/</guid>
      <description>ベストプラクティスのこの部分では、チャートの中でラベルとアノテーションを使用する際の ベストプラクティスについて議論します。&#xA;ラベルかアノテーションか？ メタデータの項目は以下の条件でラベルにすべきです:&#xA;リソースを特定するためにKubernetesによって使用される場合 システムに問い合わせをする目的でオペレータに公開すると便利な場合 例えば、オペレータが特定のチャートの全てのインスタンスを便利に見つけられるように、 ラベルとしてhelm.sh/chart: NAME-VERSIONを使うことを推奨します。&#xA;メタデータの項目が問い合わせの目的で使用されない場合、代わりにアノテーションを 使うべきでしょう。&#xA;Helmフックは常にアノテーションです。&#xA;標準的なラベル 次のテーブルはHelmチャートが使う、共通のラベルを定義しています。Helmそれ自体は 特定のラベルが存在することを必要としません。RECとマークされたラベルは使用を推奨され、 グローバルな一貫性のためにチャートに記述される べき です。 OPTとマークされた項目は任意です。これらは慣用句として、あるいは一般的に使用されているもの ではありますが、業務上頻繁に使用されるものではありません。&#xA;名前 ステータス 説明 app.kubernetes.io/name REC これはアプリ全体を反映した名前であるべきです。一般的には{{ template &amp;quot;name&amp;quot; . }}がこのために使われるでしょう。これは多くのKubernetesマニフェストで使用されるものであり、Helm特有のものではありません。 helm.sh/chart REC これはチャート名とバージョンにすべきです: {{ .Chart.Name }}-{{ .Chart.Version | replace &amp;quot;+&amp;quot; &amp;quot;_&amp;quot; }}. app.kubernetes.io/managed-by REC これは常に{{ .Release.Service }}に設定するべきです。Helmで管理されているものを全て見つけるために使用されます。 app.kubernetes.io/instance REC これは{{ .Release.Name }}にすべきです。 これは、同じアプリケーションの異なるインスタンスを区別するのに役立ちます。 app.kubernetes.io/version OPT アプリのバージョンで、{{ .Chart.AppVersion }}に設定できます。 app.kubernetes.io/component OPT これはアプリケーション内の違った役割示す共通のラベルです。例、 app.kubernetes.io/component: frontend app.kubernetes.io/part-of OPT 複数のチャートとソフトウェアが一体となって一つのアプリケーションを構成している場合のラベル。例えば、ウェブサイトを生成するデータベースとアプリケーションソフトウェアなど。これは、対応するトップレベルのアプリケーションにも設定することができます。 Kubernetesのapp.kubernetes.ioプレフィックスが付いたラベルについて、 Kubernetes documentationでより詳細な情報を見つけることができます。</description>
    </item>
    <item>
      <title>PodとPodテンプレート</title>
      <link>https://helm.sh/ja/docs/chart_best_practices/pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/chart_best_practices/pods/</guid>
      <description>ベストプラクティスのこの部分では、チャートマニフェストの、PodとPodテンプレート部分の フォーマットについて説明します。&#xA;以下のリソースのリスト（非網羅的）がPodテンプレートを使用します:&#xA;Deployment ReplicationController ReplicaSet DaemonSet StatefulSet イメージ コンテナイメージは固定されたタグ、もしくはイメージのSHAを使用するべきです。イメージはlatest, head,canaryタグや、その他&amp;quot;浮いている&amp;quot;タグは使用するべきではありません。&#xA;イメージは、簡単に入れ替えられるように、values.yamlに定義しても 良い でしょう。&#xA;image: {{ .Values.redisImage | quote }} イメージとタグは、それぞれ別のフィールドとしてvalues.yamlに定義しても 良い でしょう:&#xA;image: &amp;#34;{{ .Values.redisImage }}:{{ .Values.redisTag }}&amp;#34; ImagePullPolicy helm createはデフォルトで以下のようにして、deployment.yamlの imagePullPolicyをIfNotPresentに設定します:&#xA;imagePullPolicy: {{ .Values.image.pullPolicy }} そして、values.yaml:&#xA;image: pullPolicy: IfNotPresent 同様に、KubernetesはimagePullPolicyが定義されていない場合、デフォルトでIfNotPresentに 設定します。IfNotPresent以外の値が必要な場合、単純にvalues.yamlの値を必要な値に更新 してください。&#xA;Podテンプレートはselectorを宣言するべき 全てのPodテンプレートセクションはselectorを指定するべきです。例えば:&#xA;selector: matchLabels: app.kubernetes.io/name: MyName template: metadata: labels: app.kubernetes.io/name: MyName これはセットとPodの関係を作るため、良い慣習です。&#xA;しかし、Deploymentのようなセットでは、これはさらに重要になります。これがないと、 全ての ラベルのセットが一致するPodを選択するために使用され、もし、バージョンやリリース日のように、 変化するラベルを使用していた場合、これが壊れることになります。</description>
    </item>
    <item>
      <title>Helm アーキテクチャ</title>
      <link>https://helm.sh/ja/docs/topics/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/topics/architecture/</guid>
      <description>Kubernetes Helm アーキテクチャ このドキュメントでは、Helm アーキテクチャの概要について説明します。&#xA;Helm の目的 Helm は、チャート と呼ばれる Kubernetes パッケージを管理するためのツールです。 Helm は次のことができます。&#xA;最初から新しいチャートを作成する チャートをチャートアーカイブ (tgz) ファイルにパッケージ化する チャートが保存されているチャートリポジトリを操作する チャートを既存の Kubernetes クラスターにインストールおよびアンインストールする Helm でインストールされたチャートのリリースサイクルを管理する Helm には、3つの重要な概念があります。&#xA;チャート は、Kubernetes アプリケーションのインスタンスを作成するために必要な 情報のバンドルです コンフィグ には、リリース可能なオブジェクトを作成するためにパッケージ化された チャートにマージできる構成情報が含まれています リリース は、特定の コンフィグ と組み合わせた チャート の 実行中のインスタンスです コンポーネント Helm は、2つの異なる部分に実装される実行可能ファイルです。&#xA;Helm クライアント は、エンドユーザー向けのコマンドラインクライアントです。 クライアントは次のことを担当します。&#xA;ローカルチャート開発 リポジトリの管理 リリースの管理 Helm ライブラリとのインターフェース インストールするチャートを送信する 既存のリリースのアップグレードまたはアンインストールの要求 Helm ライブラリ は、すべての Helm 操作を実行するためのロジックを提供します。 Kubernetes API サーバーとインターフェースし、次の機能を提供します。&#xA;チャートと構成を組み合わせてリリースを構築する チャートを Kubernetes にインストールし、後続のリリースオブジェクトを提供する Kubernetes との対話によるチャートのアップグレードとアンインストール スタンドアロンの Helm ライブラリは Helm ロジックをカプセル化しているため、 さまざまなクライアントが活用できます。</description>
    </item>
    <item>
      <title>高度な Helm のテクニック</title>
      <link>https://helm.sh/ja/docs/topics/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/topics/advanced/</guid>
      <description>このセクションでは、Helm を使用するためのさまざまな高度な機能とテクニックについて説明します。 このセクションの情報は、チャートとリリースの高度なカスタマイズと操作を行いたい Helm の「パワーユーザー」を対象としています。 これらの高度な機能にはそれぞれ独自のトレードオフと警告があり、 Helm の深い知識を駆使して慎重に使用する必要があります。 言い換えれば、&#xD;ピーター・パーカーの原則 を覚えておいてください&#xA;ポストレンダリング ポストレンダリングにより、チャートインストーラーは、Helm によってインストールされる前に、 レンダリングされたマニフェストを手動で操作、構成、または検証することができます。 これにより、高度な構成を持つユーザーは、&#xD;kustomize などのツールを使用して、 パブリックチャートをフォークしたり、 チャートのメンテナーがソフトウェアの最後の構成オプションをすべて指定したりする必要なく、 構成の変更を適用できます。 エンタープライズ環境での一般的なツールやサイドカーの注入、 展開前のマニフェストの分析のユースケースもあります。&#xA;前提条件 Helm 3.1+ 使い方 ポストレンダラーは、STDIN でレンダリングされた Kubernetes マニフェストを受け入れ、 STDOUT で有効な Kubernetes マニフェストを返す任意の実行可能ファイルです。 失敗した場合は、0 以外の終了コードを返します。 これは、2つのコンポーネント間の唯一の &amp;quot;API&amp;quot; です。 これにより、ポストレンダリングプロセスで実行できる操作に大きな柔軟性がもたらされます。&#xA;ポストレンダラーは、install、upgrade、および template で使用できます。 ポストレンダラーを使用するには、 使用するレンダラー実行可能ファイルへのパスで --post-renderer フラグを使用します。&#xA;$ helm install mychart stable/wordpress --post-renderer ./path/to/executable パスにセパレータが含まれていない場合は、$PATH で検索されます。 それ以外の場合は、相対パスが完全修飾パスに解決されます。&#xA;複数のポストレンダラーを使用したい場合は、それらをすべてスクリプトで呼び出すか、 ビルドしたバイナリツールで一緒に呼び出します。 bash では、これは renderer1 | renderer2 | renderer3 のように単純です。&#xA;kustomize をポストレンダラーとして使用する例は hereで見ることができます。</description>
    </item>
    <item>
      <title>Appendix: Go データ型とテンプレート</title>
      <link>https://helm.sh/ja/docs/chart_template_guide/data_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ja/docs/chart_template_guide/data_types/</guid>
      <description>Helm テンプレート言語は、厳密に型指定された Go プログラミング言語で実装されています。 そのため、テンプレートの変数は typed です。 ほとんどの場合、変数は次のタイプのいずれかとして公開されます。&#xA;string: テキストの文字列 bool: true または false int: 整数値 (これの8、16、32、および 64 ビットの符号付きおよび符号なし変数もあります) float64: 64 ビットの浮動小数点値 (これには 8、16、32 ビットの種類もあります) バイトスライス ([]byte)。バイナリデータを (潜在的に) 保持するためによく使用されます struct: プロパティとメソッドを持つオブジェクト 前のタイプのいずれかのスライス (インデックス付きリスト) 文字列キー付きマップ (map[string]interface{}) 値は 前のタイプの1つです Go には他にも多くのタイプがあり、テンプレートでそれらの間で変換する必要がある場合があります。 オブジェクトのタイプをデバッグする最も簡単な方法は、 テンプレートで printf &amp;quot;%t&amp;quot; を介してオブジェクトを渡すことです。 これにより、タイプが出力されます。typeOf および kindOf 関数も参照してください。</description>
    </item>
  </channel>
</rss>
