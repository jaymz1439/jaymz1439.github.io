<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>헬름</title>
    <link>https://helm.sh/ko/</link>
    <description>Recent content on 헬름</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 30 Oct 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://helm.sh/ko/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>개발자 가이드</title>
      <link>https://helm.sh/ko/docs/community/developers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/community/developers/</guid>
      <description>이 가이드에서는 헬름을 개발하기 위해 환경을 설정하는 방법을 설명한다.&#xA;전제 조건 Go 최신버전 kubectl 을 쓸 수 있는 쿠버네티스 클러스터 (선택사항) Git 헬름 빌드하기 프로그램을 빌드하기 위해 Make를 사용한다. 시작하는 가장 간단한 방법은 다음과 같다.&#xA;$ make 유의사항: $ GOPATH / src / helm.sh / helm 경로에서 실행하지 않으면 실패하게 된다. helm.sh 디렉토리는 심볼릭 링크가 아니어야 한다. 심볼릭 링크이면 build가 관련 패키지를 찾지 못한다.&#xA;필요한 경우 먼저 의존성을 설치하고 vendor/ 트리를 다시 빌드하고 구성을 확인한다.</description>
    </item>
    <item>
      <title>일반적인 관례</title>
      <link>https://helm.sh/ko/docs/chart_best_practices/conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_best_practices/conventions/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 일반적인 관례를 설명한다.&#xA;차트 이름 차트 이름은 소문자와 숫자여야 한다. 단어는 대시(-)로 구분할 수 있다.&#xA;예시:&#xA;drupal nginx-lego aws-cluster-autoscaler 대문자나 밑줄문자는 차트 이름에 사용할 수 없다. 점도 사용할 수 없다.&#xA;버전 번호 가능하다면 어디서든, 헬름은 버전 번호를 표현할 때 SemVer 2를 사용한다. (도커 이미지 태그는 SemVer를 따를 필요가 없고 아쉽지만 규칙에서 예외로 취급된다는 점을 알아두자.)&#xA;SemVer 버전을 쿠버네티스 레이블로 저장할 때, 관례적으로 + 문자를 _ 문자로 변경하는데, + 기호는 레이블 값으로 허용되지 않기 때문이다.</description>
    </item>
    <item>
      <title>차트</title>
      <link>https://helm.sh/ko/docs/topics/charts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/charts/</guid>
      <description>헬름은 charts 라는 패키지 포맷을 사용한다. 차트는 쿠버네티스 리소스와 관련된 셋을 설명하는 파일의 모음이다. 하나의 차트는 memcached 파드를 배포하는 것처럼 단순한 형태나 HTTP 서버, 데이터베이스, 캐시 등으로 구성된 완전한 웹앱 같이 복잡한 형태로 사용될수 있다.&#xA;차트는 특정한 디렉터리 구조를 가진 파일들로 생성된다. 이 파일들은 배포할 버전이 지정된 아카이브로 패키지화 될 수 있다.&#xA;설치하지 않고 공개된 차트를 다운로드 받거나 보기 위해, helm pull chartrepo/chartname 명령을 사용할 수 있다.&#xA;이 문서는 차트 형식을 설명하고, 차트를 헬름으로 구성하는 기본 가이드를 제공한다.</description>
    </item>
    <item>
      <title>차트 개발 팁과 비법</title>
      <link>https://helm.sh/ko/docs/howto/charts_tips_and_tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/howto/charts_tips_and_tricks/</guid>
      <description>이 가이드는 핼름 차트 개발자들이 production-quality 차트들을 만들면서 배운 팁과 비법을 담고 있습니다.&#xA;템플릿 함수 이해하기 Helm uses Go templates for templating your resource files. While Go ships several built-in functions, we have added many others.&#xA;First, we added all of the functions in the Sprig library.&#xA;We also added two special template functions: include and required. The include function allows you to bring in another template, and then pass the results to other template functions.</description>
    </item>
    <item>
      <title>퀵스타트 가이드</title>
      <link>https://helm.sh/ko/docs/intro/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/intro/quickstart/</guid>
      <description>이 가이드는 헬름을 빠르게 시작하는 방법에 대해 다룬다.&#xA;전제 조건 헬름을 성공적이고 안전하게 사용하려면 다음과 같은 전제 조건들이 필요하다.&#xA;쿠버네티스 클러스터 설치를 위해 어떤 보안 구성을 사용할 것인지 결정하기(필요시) 헬름 설치 및 구성 쿠버네티스 설치 혹은 클러스터에 접근 쿠버네티스가 설치되어 있어야 한다. 최신 릴리스의 헬름을 사용하기 위해서, 대부분의 경우 두번째 최신 마이너 릴리스 버전인 쿠버네티스 최신 안정(latest stable) 릴리스 버전 설치를 권장한다. 또한 로컬로 구성된 kubectl 복사본이 있어야 한다. 헬름과 쿠버네티스 사이의 버전차이정책(skew) 최대 버전은 헬름 버전 지원 정책을 참고한다.</description>
    </item>
    <item>
      <title>값</title>
      <link>https://helm.sh/ko/docs/chart_best_practices/values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_best_practices/values/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 값(values)을 사용하는 방법을 다룬다. 여기서는 차트의 values.yaml 파일을 설계하는 데 초점을 맞추고, 값을 어떻게 구성하고 사용할지에 대한 권고사항을 제시한다.&#xA;네이밍 컨벤션 변수 이름은 소문자로 시작해야하며 단어는 카멜케이스로 구분해야 한다.&#xA;올바른 경우:&#xA;chicken: true chickenNoodleSoup: true 잘못된 경우:&#xA;Chicken: true # 첫 글자가 대문자이면 빌트인 변수와 충돌이 발생할 수 있다 chicken-noodle-soup: true # 변수명에 하이픈(-)을 사용하지 말자 헬름의 모든 빌트인 변수는 사용자 정의 값과 쉽게 구분할 수 있도록 대문자로 시작한다: .</description>
    </item>
    <item>
      <title>릴리스 체크리스트</title>
      <link>https://helm.sh/ko/docs/community/release_checklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/community/release_checklist/</guid>
      <description>헬름 릴리스에 대한 유지관리자 가이드 새로운 헬름을 출시할 시간이다! 릴리스를 끊는 헬름 유지관리자로서, 자신의 경험이 여기에 문서화된 내용과 다른 점이 있다면 이 릴리스 체크리스트를 업데이트하기에 딱 맞는 사람이다.&#xA;모든 릴리스는 vX.Y.Z 형식이다. 여기서 X는 주 버전 번호, Y는 부 버전 번호, Z는 패치 릴리스 번호이다. 이 프로젝트는 [유의적 버전 관리] (&#xD;https://semver.org/)를 엄격히 따르므로 이 단계를 따르는 것이 매우 중요하다.&#xA;헬름은 다음 마이너 릴리스 날짜를 미리 발표한다. 발표된 날짜를 지키기 위해 최선을 다해야 한다.</description>
    </item>
    <item>
      <title>시작하기</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/getting_started/</guid>
      <description>이 섹션에서는 차트를 만든 다음 첫 번째 템플릿을 추가할 것이다. 우리가 여기서 만든 차트는 가이드의 나머지 부분에서 쭉 사용될 것이다.&#xA;시작하기 위해 헬름 차트를 간단히 살펴보자.&#xA;차트 차트 가이드에 설명된 대로, 헬름 차트는 다음과 같이 구성된다:&#xA;mychart/ Chart.yaml values.yaml charts/ templates/ ... templates/ 디렉토리는 템플릿 파일을 위한 것이다. 헬름이 차트를 평가할 때, templates/ 디렉토리의 모든 파일을 템플릿 렌더링 엔진으로 전달한다. 그리고 나서 처리 결과를 모아 쿠버네티스로 보낸다.&#xA;values.yaml 파일도 템플릿에 중요하다.</description>
    </item>
    <item>
      <title>차트 리포지토리 동기화</title>
      <link>https://helm.sh/ko/docs/howto/chart_repository_sync_example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/howto/chart_repository_sync_example/</guid>
      <description>참고: 이곳의 예제들은 차트 리포지토리를 제공하는 Google Cloud Storage (GCS) 버킷에 맞게 작성되었다.&#xA;전제 조건 gsutil 툴을 설치해야 한다. gsutill rsync 기능이 필요하다. 헬름 바이너리에 대한 접근 권한이 있어야 한다. 선택 사항: 실수로 파일을 삭제할 경우를 대비하여 GCS 버킷에 오브젝트 버전 관리를 설정하는 것을 추천한다. 로컬 차트 리포지토리 디렉터리 설정 차트 리포지토리 가이드에서 한 것처럼 로컬 디렉터리를 만들고, 패키지된 차트를 그 디렉터리로 옮긴다.&#xA;예제:&#xA;$ mkdir fantastic-charts $ mv alpine-0.1.0.tgz fantastic-charts/ 업데이트 된 index.</description>
    </item>
    <item>
      <title>차트 훅(hooks)</title>
      <link>https://helm.sh/ko/docs/topics/charts_hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/charts_hooks/</guid>
      <description>헬름은 차트 개발자가 릴리스 수명주기의 특정 지점에 개입할 수 있도록 hook 매커니즘을 제공한다. 예를 들어 다음과 같은 것들을 하기 위해 훅을 사용할 수 있다.&#xA;설치 시 다른 차트가 로드되기 전에 컨피그맵이나 시크릿을 로드한다. 새 차트를 설치하기 전에 데이터베이스를 백업하는 작업을 실행하고, 데이터 복원을 위해 업그레이드 후 2번째 작업을 수행한다. 릴리스를 제거하기 전에 서비스를 순환에서 안전하게 제거하기 위하여, 릴리스 삭제 전에 작업을 수행한다. 훅은 일반적인 템플릿처럼 작동하지만 헬름이 다른 방식으로 처리하도록 하는 특수한 어노테이션이 있다.</description>
    </item>
    <item>
      <title>헬름 설치하기</title>
      <link>https://helm.sh/ko/docs/intro/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/intro/install/</guid>
      <description>이 가이드는 헬름 CLI를 설치하는 방법을 설명한다. 헬름은 소스 또는 미리-빌드된(pre-built) 바이너리 릴리스로 설치할 수 있다.&#xA;헬름 프로젝트로 헬름 프로젝트는 헬름을 가져와서 설치하는데 2가지 방법을 제공한다. 이것들은 헬름을 릴리스하기 위한 공식적인 방법들이다. 이외에도, 헬름 커뮤니티에서는 다양한 패키지 관리자를 통해 헬름을 설치할 수 있는 방법을 제공하고 있다. 이러한 방법을 통한 설치는 아래에 있는 공식적인 방법들에서 확인할 수 있다.&#xA;바이너리 릴리스로 헬름의 모든 릴리스는 다양한 OS들의 바이너리 릴리스를 제공한다. 이 바이너리 버전들은 수동으로 다운로드하여 설치할 수 있다.</description>
    </item>
    <item>
      <title>관련 프로젝트와 문서</title>
      <link>https://helm.sh/ko/docs/community/related/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/community/related/</guid>
      <description>헬름 커뮤니티는 헬름에 대한 많은 추가 도구, 플러그인 및 문서를 만들었습니다. 우리는 이러한 프로젝트에 대해 듣고 싶습니다.&#xA;이 목록에 추가하고 싶은 것이 있으면 이슈나 풀 리퀘스트(PR) 할 수 있습니다.&#xA;헬름 플러그인 Helm Diff - 컬러 diff로 helm upgrade 미리보기 helm-gcs - Google Cloud Storage에서 저장소를 관리하는 플러그인 helm-monitor - 프로메테우스/엘라스틱서치 쿼리를 기반으로 릴리스 및 롤백을 모니터링하는 플러그인 helm-k8comp - k8comp 를 사용하여 hiera 에서 헬름 차트를 생성하는 플러그인 helm-unittest - YAML로 로컬에서 차트를 단위 테스트하기 위한 플러그인 hc-unit - OPA (Open Policy Agent) 및 Rego로 로컬에서 차트를 단위 테스트하기 위한 플러그인 helm-s3 - [프라이빗] 차트 저장소로 AWS S3를 사용할 수 있게 해주는 헬름 플러그인 helm-schema-gen - 헬름 3 차트에 대한 값(values) yaml 스키마를 생성하는 헬름 플러그인 helm-secrets - 비밀정보를 안전하게 관리하고 보관하기 위한 플러그인 (&#xD;sops 기반) GitHub 작성자가 플러그인 저장소에 helm-plugin 태그를 사용할 것을 권장한다.</description>
    </item>
    <item>
      <title>빌트인 객체</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/builtin_objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/builtin_objects/</guid>
      <description>객체는 템플릿 엔진에서 템플릿으로 전달된다. 그리고 사용자의 코드는 객체를 전달할 수 있다. (with 와 range 문을 볼 때 예제로 확인할 수 있다.) 이후에 보게 될 tuple 함수와 같이 템플릿 내에서 새로운 객체를 만드는 몇 가지 방법이 있다.&#xA;객체는 간단히 하나의 값만 가질 수도 있다. 또는 다른 객체나 기능을 포함할 수 있다. 예를 들어, Release 객체는 (Release.Name 과 같은) 여러 객체를 포함하며 Files 객체는 몇 가지 함수를 가지고 있다.&#xA;이전 섹션에서는 템플릿에 릴리즈 이름을 삽입하기 위해 {{.</description>
    </item>
    <item>
      <title>차트 테스트</title>
      <link>https://helm.sh/ko/docs/topics/chart_tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/chart_tests/</guid>
      <description>차트에는 함께 작동하는 여러 쿠버네티스 리소스 및 구성요소가 포함되어 있다. 차트 작성자는 차트가 설치될 때 예상대로 작동하는지 확인하는 몇 가지 테스트를 작성할 수 있다. 이러한 테스트는 차트 사용자가 차트에 따라 수행될 작업을 이해하는 데에도 도움이 된다.&#xA;헬름 차트의 테스트 는 template/ 디렉토리에 있으며 실행하기 위해 주어진 명령어로 컨테이너를 지정하는 작업 정의이다. 테스트가 성공한 것으로 판정되려면 컨테이너가 성공적으로 종료되어야 한다(exit 0). 작업 정의에는 헬름 테스트 훅 어노테이션(helm.sh/hook: test)이 반드시 포함되어야 한다.</description>
    </item>
    <item>
      <title>템플릿</title>
      <link>https://helm.sh/ko/docs/chart_best_practices/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_best_practices/templates/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 템플릿을 자세히 알아본다.&#xA;templates/의 구조 templates/ 디렉토리는 다음과 같이 구조화되어야 한다.&#xA;YAML을 만드는 템플릿 파일들은 확장자가 .yaml이어야 한다. 형식이 정해지지 않은 컨텐츠를 만드는 템플릿 파일에는 .tpl 확장자를 쓸 수 있다. 템플릿 파일 이름은 대시 표기법(my-example-configmap.yaml)을 따라야 하며, 카멜 표기법이 아니다. 각 리소스 정의는 자체 템플릿 파일 내에 있어야 한다. 템플릿 파일 이름은 이름 내에 리소스 종류를 반영해야 한다. 예 : foo-pod.yaml,bar-svc.yaml 정의된 템플릿의 이름 정의된 템플릿 ({{ define }} 지시문 내에 생성된 템플릿)은 전역에서 접근가능하다.</description>
    </item>
    <item>
      <title>헬름 사용하기</title>
      <link>https://helm.sh/ko/docs/intro/using_helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/intro/using_helm/</guid>
      <description>이 가이드는, 쿠버네티스 클러스터에서 패키지를 관리하는, 헬름 사용시의 기본사항을 설명한다. 헬름 클라이언트는 이미 설치되어 있다고 가정한다.&#xA;명령어 몇 개를 빨리 실행해보는 데에 관심이 있다면 퀵스타트 가이드를 참고하는 것도 좋다. 이 장은 헬름 명령어들의 세부사항을 다루며, 헬름을 사용하는 방법을 설명한다.&#xA;주요 개념 3가지 차트는 헬름 패키지이다. 이 패키지에는 쿠버네티스 클러스터 내에서 애플리케이션, 도구, 서비스를 구동하는데 필요한 모든 리소스 정의가 포함되어 있다. 쿠버네티스에서의 Homebrew 포뮬러, Apt dpkg, YUM RPM 파일과 같은 것으로 생각할 수 있다.</description>
    </item>
    <item>
      <title>Values 파일</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/values_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/values_files/</guid>
      <description>이전 섹션에서 우리는 헬름 템플릿에서 제공하는 빌트인 객체를 살펴봤다. 기본 객체 중 하나는 Values이다. 이 객체는 차트로 전달된 값에 접근할 수 있게 해준다. 이 객체의 내용들은 여러 출처에서 나온다:&#xA;본 차트에 포함된 values.yaml 파일 서브 차트의 경우, 부모 차트의 values.yaml 파일 -f 플래그 (helm install -f myvals.yaml ./mychart)가 있는 helm install 또는 helm upgrade로 전달된 values.yaml 파일 --set (such as helm install --set foo=bar ./mychart)과 함께 전달된 개별 매개변수 위 목록은 적용될 값의 순서이다: 기본 값인 values.</description>
    </item>
    <item>
      <title>라이브러리 차트</title>
      <link>https://helm.sh/ko/docs/topics/library_charts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/library_charts/</guid>
      <description>A library chart is a type of Helm chart that defines chart primitives or definitions which can be shared by Helm templates in other charts. This allows users to share snippets of code that can be re-used across charts, avoiding repetition and keeping charts DRY.&#xA;The library chart was introduced in Helm 3 to formally recognize common or helper charts that have been used by chart maintainers since Helm 2. By including it as a chart type, it provides:</description>
    </item>
    <item>
      <title>의존성</title>
      <link>https://helm.sh/ko/docs/chart_best_practices/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_best_practices/dependencies/</guid>
      <description>이 부분은 가이드의 일부로서 Chart.yaml에서 선언되는 dependencies에 관한 모범사례를 다룬다.&#xA;버전 가능하면 특정 버전을 콕 집어서 사용하기 보다는 버전 범위를 사용하자. 권장되는 기본값은 다음과 같이 패치-수준의 버전 매치(match)를 사용하는 것이다.&#xA;version: ~1.2.3 이렇게 하면 1.2.3과 그 릴리스의 다른 패치들도 매치된다. 다시 말하면 ~1.2.3은 &amp;gt;= 1.2.3, &amp;lt; 1.3.0과 동등하다.&#xA;버전 매칭 구문에 대한 자세한 설명은 semver 문서에서 볼 수 있다.&#xA;리포지터리 URL 가능하면 https:// 리포지터리 URL 뒤에 http:// URL을 사용하자.&#xA;리포지터리가 리포지터리 인덱스 파일에 추가되면, 리포지터리 이름은 URL의 별칭으로 사용될 수 있다.</description>
    </item>
    <item>
      <title>프로젝트 연혁</title>
      <link>https://helm.sh/ko/docs/community/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/community/history/</guid>
      <description>헬름 3는 인큐베이션(incubation) 최종단계에 있는 CNCF 프로젝트이다.&#xA;헬름은, 2015년에 시작되어 KubeCon에서 소개된 바 있는 헬름 클래식이라 하는 멋진 프로젝트에서 시작되었다.&#xA;2016년 1월, 프로젝트는 쿠버네티스 디플로이먼트 매니저라고 불리는 GCS 도구로 병합되며, 쿠버네티스 산하로 옮겨갔다. 코드베이스 병합의 결과로, 그 이듬해 헬름 2.0이 릴리스되었다. 디플로이먼트 매니저(Deployment Manager)의 핵심기능은 헬름 2로 이어져, 최종 헬름 2.0 릴리스에서 틸러(Tiller)라고 명명된 서버측 컴포넌트가 되었다.&#xA;2018년 6월에 헬름은 쿠버네티스의 서브프로젝트에서 본격적인 CNCF 프로젝트로 승격되었다. 헬름은 최상위 관리조직을 구성하고 헬름 프로젝트 산하로 여러 프로젝트들을 포괄하였는데, 모노큘러(Monocular), 헬름 차트 저장소(Helm Chart Repo), 차트 뮤지엄(Chart Museum), 나중에 헬름 허브(Helm Hub)를 포함하였다.</description>
    </item>
    <item>
      <title>레이블과 어노테이션</title>
      <link>https://helm.sh/ko/docs/chart_best_practices/labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_best_practices/labels/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 차트 내에서 레이블과 어노테이션을 사용하는 모범사례에 대해 논한다.&#xA;레이블인가, 어노테이션인가? 다음 조건에 해당하는 메타데이터 항목은 레이블이어야 한다.&#xA;쿠버네티스에서 해당 리소스를 식별하기 위해 사용된다. 시스템 쿼리를 목적으로 운영자에게 유용하게 노출되어야 한다. 예를 들어, helm.sh/chart: NAME-VERSION을 레이블로서 사용하는 것을 권장하는데, 이렇게 하면 운영자는 레이블을 통해 특정 차트의 모든 인스턴스들을 편리하게 찾을 수 있다.&#xA;메타데이터 항목이 쿼리에 사용되지 않는다면, 어노테이션으로 설정해야 한다.&#xA;헬름 훅은 항상 어노테이션이다.&#xA;표준 레이블 아래 표에 헬름 차트에서 널리 사용되는 레이블이 있다.</description>
    </item>
    <item>
      <title>템플릿 함수와 파이프라인</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/functions_and_pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/functions_and_pipelines/</guid>
      <description>So far, we&#39;ve seen how to place information into a template. But that information is placed into the template unmodified. Sometimes we want to transform the supplied data in a way that makes it more useable to us.&#xA;Let&#39;s start with a best practice: When injecting strings from the .Values object into the template, we ought to quote these strings. We can do that by calling the quote function in the template directive:</description>
    </item>
    <item>
      <title>헬름 문서 현지화</title>
      <link>https://helm.sh/ko/docs/community/localization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/community/localization/</guid>
      <description>이 가이드에서는 헬름 문서를 현지화하는 방법에 대해 설명한다.&#xA;시작하기 번역 기여는 문서 기여와 동일한 과정을 거친다. 번역본은 풀 리퀘스트 를 통해 helm-www 깃 저장소에 제공되며 풀 리퀘스트는 웹사이트를 관리하는 팀이 검토한다.&#xA;두 글자 언어 코드 문서는 언어 코드를 ISO 639-1 표준으로 구성한다. 예를 들어, 한국어의 두 글자 코드는 ko 이다.&#xA;내용 및 설정에서 사용 중인 언어 코드를 찾을 수 있다. 세 가지 예:&#xA;content 디렉토리에 언어 코드가 하위 디렉토리로 있고 각 디렉토리마다 번역된 콘텐츠가 있는데, 주로 docs 하위 디렉토리에 있다.</description>
    </item>
    <item>
      <title>헬름 출처 및 무결성</title>
      <link>https://helm.sh/ko/docs/topics/provenance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/provenance/</guid>
      <description>헬름에는 차트 사용자가 패키지의 무결성과 출처를 검증하는 데 도움이 되는 출처 도구가 있다. 헬름은 PKI, GnuPG 및 평판이 좋은 패키지 관리자에 기반한 업계 표준 도구를 사용하여 서명 파일을 생성하고 검증할 수 있다.&#xA;개요 무결성은 차트를 출처기록과 비교하여 설정된다. 출처 레코드는 패키지 차트와 함께 저장되는 _출처 파일_에 저장되며 패키지 차트와 함께 저장된다. 예를 들어 차트 이름이 myapp-1.2.3.tgz 인 경우 출처 파일은 myapp-1.2.3.tgz.prov 이 된다.&#xA;출처 파일은 패키징 시 (helm package --sign .</description>
    </item>
    <item>
      <title>차트 저장소 가이드</title>
      <link>https://helm.sh/ko/docs/topics/chart_repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/chart_repository/</guid>
      <description>이 섹션에서는 Helm 차트 저장소를 만들고 작업하는 방법을 설명한다. 고수준에서 차트 저장소는 패키지형 차트를 저장하고 공유할 수 있는 장소다.&#xA;공식 차트 저장소는 쿠버네티스 차트가 관리하고 있으며 참여를 환영한다. 하지만 헬름도 자신만의 차트 저장소를 쉽게 만들고 운영할 수 있게 해준다. 이 가이드에서는 그렇게 하는 방법을 설명한다.&#xA;전제 조건 빠른 시작 가이드 살펴보기 차트 문서 읽기 차트 저장소 생성 차트 저장소 는 index.yaml 파일과 패키지화된 차트를 저장하는 HTTP 서버다. 차트를 공유할 준비가 되면 차트 저장소에 업로드하는 것이 가장 선호되는 방법이다.</description>
    </item>
    <item>
      <title>템플릿 함수 목록</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/function_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/function_list/</guid>
      <description>헬름에는 템플릿에서 활용할 수 있는 많은 템플릿 함수들이 포함되어 있다. 여기에 나열되며 다음 범주로 분류된다.&#xA;암호화 및 보안 날짜 사전 인코딩 파일 경로 쿠버네티스 및 차트 논리 및 흐름 제어 목록 수학 네트워크 리플렉션 정규 표현식 유의적 버전 문자열 형 변환 URL UUID 논리 및 흐름 제어 함수 헬름은 and, coalesce, default, empty, eq, fail, ge, gt, le, lt, ne, not, or 를 포함한 수많은 논리 및 흐름 제어 기능이 포함되어 있다.</description>
    </item>
    <item>
      <title>파드와 파드템플릿</title>
      <link>https://helm.sh/ko/docs/chart_best_practices/pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_best_practices/pods/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 차트 매니페스트에 있는 파드와 파드템플릿 부분의 형식을 논한다.&#xA;파드템플릿을 사용하는 리소스들(일부)은 다음과 같다.&#xA;디플로이먼트(Deployment) 레플리케이션컨트롤러(ReplicationController) 레플리카셋(ReplicaSet) 데몬셋(DaemonSet) 스테이트풀셋(StatefulSet) 이미지 컨테이너 이미지는 고정된 태그나 이미지의 SHA를 사용해야 한다. latest, head, canary 등 &amp;quot;유동적인&amp;quot; 목적으로 고안된 태그를 사용해서는 안된다.&#xA;이미지를 쉽게 교체하기 위해 values.yaml 파일 내에 이미지를 정의할 수 있다.&#xA;image: {{ .Values.redisImage | quote }} values.yaml 내에서 이미지와 태그를 각각의 필드로 정의할 수도 있다.&#xA;image: &amp;#34;{{ .</description>
    </item>
    <item>
      <title>흐름(flow) 제어</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/control_structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/control_structures/</guid>
      <description>Control structures (called &amp;quot;actions&amp;quot; in template parlance) provide you, the template author, with the ability to control the flow of a template&#39;s generation. Helm&#39;s template language provides the following control structures:&#xA;if/else - 조건부 블록 생성 with - 스코프 지정 range - &amp;quot;for each&amp;quot; 스타일 반복문 제공 In addition to these, it provides a few actions for declaring and using named template segments:&#xA;define declares a new named template inside of your template template imports a named template block declares a special kind of fillable template area In this section, we&#39;ll talk about if, with, and range.</description>
    </item>
    <item>
      <title>레지스트리</title>
      <link>https://helm.sh/ko/docs/topics/registries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/registries/</guid>
      <description>헬름 3는 패키지 배포를 위해 OCI를 지원한다. 차트 패키지는 OCI 기반 레지스트리 간에 저장 및 공유할 수 있다.&#xA;OCI 지원 활성화 현재 OCI 지원은 실험적(experimental) 으로 간주되고 있다.&#xA;아래에서 기술된 명령들을 사용하려면 환경에서 HELM_EXPERIMENTAL_OCI 변수를 설정하자:&#xA;export HELM_EXPERIMENTAL_OCI=1 레지스트리 실행 테스트 목적으로 레지스트리를 시작하는 것은 간단하다. 도커를 설치한 경우, 다음 명령어를 실행하자.&#xA;docker run -dp 5000:5000 --restart=always --name registry registry 이렇게 하면 localhost:5000에서 레지스트리 서버가 시작될 것이다.&#xA;docker logs -f registry를 사용하여 로그를 확인하고 docker rm -f registry를 사용하여 중지하자.</description>
    </item>
    <item>
      <title>변수</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/variables/</guid>
      <description>With functions, pipelines, objects, and control structures under our belts, we can turn to one of the more basic ideas in many programming languages: variables. In templates, they are less frequently used. But we will see how to use them to simplify code, and to make better use of with and range.&#xA;In an earlier example, we saw that this code will fail:&#xA;{{- with .Values.favorite }} drink: {{ .drink | default &amp;#34;tea&amp;#34; | quote }} food: {{ .</description>
    </item>
    <item>
      <title>커스텀 리소스 데피니션(CRD)</title>
      <link>https://helm.sh/ko/docs/chart_best_practices/custom_resource_definitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_best_practices/custom_resource_definitions/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 커스텀 리소스 데피니션 객체를 생성하고 사용하는 것을 다룬다.&#xA;커스텀 리소스 데피니션(CRD)를 다룰 때에는, 다음 2가지를 구분하는 것이 중요하다.&#xA;CRD의 선언이 있다. 이것은 종류(kind)가 CustomResourceDefinition인 YAML 파일이다. 그리고 그 CRD를 사용하는 리소스들이 있다. 어떤 CRD가 foo.example.com/v1를 정의한다고 해보자. apiVersion: example.com/v1가 있고 종류(kind)가 Foo인 모든 리소스들은 그 CRD를 사용하는 리소스이다. 리소스를 사용하기 전에 CRD 선언을 설치하기 헬름은 되도록 많은 리소스들을 빨리 쿠버네티스 내에 로드(load)하도록 최적화되어 있다. 설계상, 쿠버네티스는 전체 매니페스트 세트를 받고 온라인으로 반영한다(이것을 조정(reconciliation) 루프라고 한다).</description>
    </item>
    <item>
      <title>역할 기반 접근 제어</title>
      <link>https://helm.sh/ko/docs/chart_best_practices/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_best_practices/rbac/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 차트 매니페스트에 있는 RBAC 리소스의 생성과 형식을 논한다.&#xA;RBAC 리소스는 다음과 같다.&#xA;ServiceAccount (네임스페이스 구분) Role (네임스페이스 구분) ClusterRole RoleBinding (네임스페이스 구분) ClusterRoleBinding YAML 설정 RBAC과 서비스어카운트(ServiceAccount) 설정은 개별 키로 되어야 한다. 둘은 별개의 것이다. 이 두가지 개념을 YAML 내에서 구분함으로써 둘 사이의 애매함을 없애고 명확히 할 수 있다.&#xA;rbac: # RBAC 리소스를 생성할지 지정 create: true serviceAccount: # 서비스어카운트를 생성할지 지정 create: true # 사용할 서비스어카운트 이름 # create가 true인데 이름이 지정되지 않으면, 풀네임 템플릿에 따라 이름이 생성됨 name: 이 구조는 여러 개의 서비스어카운트를 필요로 하는 더 복잡한 차트로 확장할 수 있다.</description>
    </item>
    <item>
      <title>지명 템플릿</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/named_templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/named_templates/</guid>
      <description>It is time to move beyond one template, and begin to create others. In this section, we will see how to define named templates in one file, and then use them elsewhere. A named template (sometimes called a partial or a subtemplate) is simply a template defined inside of a file, and given a name. We&#39;ll see two ways to create them, and a few different ways to use them.</description>
    </item>
    <item>
      <title>헬름 아키텍처</title>
      <link>https://helm.sh/ko/docs/topics/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/architecture/</guid>
      <description>쿠버네티스 헬름 아키텍처 이 문서에서는 헬름 아키텍처를 개괄적으로 설명한다.&#xA;헬름의 목적 헬름은 _차트_라고 하는 쿠버네티스 패키지를 관리하는 도구이다. 헬름으로 다음과 같은 것들을 할 수 있다.&#xA;스크래치(scratch)부터 새로운 차트 생성 차트 아카이브(tgz) 파일로 차트 패키징 차트가 저장되는 곳인 차트 리포지터리와 상호작용 쿠버네티스 클러스터에 차트 인스톨 및 언인스톨 헬름으로 설치된 차트들의 릴리스 주기 관리 헬름에는 다음과 같은 중요한 3가지 개념이 있다.&#xA;_차트_는 쿠버네티스 애플리케이션의 인스턴스를 생성하는 데에 필요한 정보의 꾸러미이다. _설정_은 릴리스 가능한 객체를 생성하기 위해 패키징된 차트로 병합될 수 있는 설정 정보를 가진다.</description>
    </item>
    <item>
      <title>고급 헬름 기법</title>
      <link>https://helm.sh/ko/docs/topics/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/advanced/</guid>
      <description>이 섹션에서는 헬름 사용에 관한 다양한 고급 기능과 기법을 설명한다. 이 섹션의 정보는 차트 및 릴리스의 고급 사용자 정의 및 조작을 수행하려는 헬름의 &amp;quot;숙련 사용자&amp;quot;를 위한 것이다. 이러한 각 고급 기능에는 고유한 장단점 및 주의사항이 있으므로, 각 기능은 헬름에 대해 충분한 지식을 가지고 신중하게 사용해야한다. 바꿔 말해서, Peter Parker 원칙을 유념하자.&#xA;포스트 렌더링 포스트 렌더링은 차트 설치 프로그램이 헬름으로 설치하기 전에 렌더링된 매니페스트를 수동으로 조작, 구성 및 유효성 검사를 할 수 있는 기능을 제공한다.</description>
    </item>
    <item>
      <title>NOTES.txt 파일 작성하기</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/notes_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/notes_files/</guid>
      <description>이 섹션에서는 차트 사용자에게 지침을 제공하는 헬름의 도구들을 살펴본다. helm install 이나 helm upgrade 가 끝나면, 헬름은 사용자에게 유용한 정보들을 출력할 수 있다. 이 정보는 템플릿을 사용하여 많은 부분을 커스터마이징할 수 있다.&#xA;차트에 설치 메모를 추가하기 위해, 간단하게 templates/NOTES.txt 파일을 생성한다. 이 파일은 평범한 텍스트이지만, 템플릿처럼 처리되며 모든 일반 템플릿 기능과 객체를 사용할 수 있다.&#xA;간단히 NOTES.txt 파일을 생성한다.&#xA;Thank you for installing {{ .Chart.Name }}. Your release is named {{ .</description>
    </item>
    <item>
      <title>쿠버네티스 배포판 가이드</title>
      <link>https://helm.sh/ko/docs/topics/kubernetes_distros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/kubernetes_distros/</guid>
      <description>헬름은 (&#xD;인증 여부와 관계 없이) 모든 쿠버네티스 적합 버전에서 작동해야 한다.&#xA;이 문서는 특정 쿠버네티스 환경에서 헬름을 사용하는 방법에 대한 정보를 정리한다. 원한다면, 특정 배포판(알파벳순 정렬)에 대한 추가 내용을 기여하자.&#xA;AKS 헬름은 Azure 쿠버네티스 서비스에서 동작한다.&#xA;DC/OS 헬름은 Mesospheres DC/OS 1.11 쿠버네티스 플랫폼에서 테스트를 거쳤고 동작하며, 추가 구성이 필요치 않다.&#xA;EKS 헬름은 Amazon Elastic 쿠버네티스 서비스 (Amazon EKS)에서 동작한다. Amazon EKS에서 헬름 사용.&#xA;GKE 구글의 GKE 호스팅 쿠버네티스 플랫폼은 헬름이 동작하는 것으로 알려져 있으며, 추가 구성이 필요치 않다.</description>
    </item>
    <item>
      <title>템플릿 내부 파일 접근하기</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/accessing_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/accessing_files/</guid>
      <description>이전 항목에서 지명 템플릿을 만들고 액세스하는 몇 가지 방법을 살펴보았다. 이런 방법으로 다른 템플릿에서 필요한 템플릿을 쉽게 가져올 수 있다. 하지만 때로는 템플릿이 아닌 파일 을 가져와서 그 내용을 템플릿 렌더러(renderer)로 보내지 않고 직접 주입(inject)하려고 하는 경우가 있을 수 있다.&#xA;헬름은 .Files 객체를 통해 파일에 액세스할 수 있게 해준다. 템플릿 예제를 확인하기 전에 어떻게 작동하는지 살펴보자.&#xA;헬름 차트에 파일을 추가해도 된다. 추가된 파일들은 하나로 묶인다. 다만, 쿠버네티스 객체 저장소에는 제한이 있어 차트는 1M 보다 작아야 한다.</description>
    </item>
    <item>
      <title>서브차트와 글로벌 값</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/subcharts_and_globals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/subcharts_and_globals/</guid>
      <description>To this point we have been working only with one chart. But charts can have dependencies, called subcharts, that also have their own values and templates. In this section we will create a subchart and see the different ways we can access values from within templates.&#xA;Before we dive into the code, there are a few important details to learn about subcharts.&#xA;A subchart is considered &amp;quot;stand-alone&amp;quot;, which means a subchart can never explicitly depend on its parent chart.</description>
    </item>
    <item>
      <title>역할 기반 접근 제어</title>
      <link>https://helm.sh/ko/docs/topics/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/rbac/</guid>
      <description>쿠버네티스에서 사용자 또는 애플리케이션별 서비스 계정에 역할을 부여하는 것은 애플리케이션이 지정한 권한범위 내에서 작동하도록 하는 모범 사례이다. 공식 쿠버네티스 문서에서 서비스 계정 권한에 대해 자세히 알아보도록 하자.&#xA;쿠버네티스 1.6 부터는 역할 기반 접근 제어(RBAC)가 기본적으로 활성화된다. RBAC을 사용하면 조직에서 사용자와 역할에 따라 허용되는 작업유형을 지정할 수 있다.&#xA;RBAC을 사용하여, 사용자는 다음을 수행할 수 있다.&#xA;관리자에게 특별 작업권한(새 역할과 같은 클러스터 전체 리소스 생성)을 부여한다. 리소스(파드, 퍼시스턴트 볼륨, 디플로이먼트)를 생성하는 사용자의 권한을 특정 네임스페이스 또는 클러스터 전체 범위(리소스 할당량, 역할, 사용자 지정 리소스 정의)로 제한한다.</description>
    </item>
    <item>
      <title>.helmignore 파일</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/helm_ignore_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/helm_ignore_file/</guid>
      <description>.helmignore 파일은 헬름 차트에 포함시키고 싶지 않은 파일들을 지정하는 데 사용한다.&#xA;이 파일이 있으면, helm package 명령어는 애플리케이션을 패키징할 때 .helmignore에서 지정한 패턴에 매칭되는 모든 파일들을 무시할 것이다.&#xA;이를 통해 불필요하거나 민감한 파일 또는 디렉토리들이 헬름 차트에 추가되는 것을 막을 수 있다.&#xA;.helmignore 파일&#xA;.helmignore 파일은 유닉스 쉘 글롭(glob) 매칭, 상대 경로 매칭, 부정(negation, 접두어 ! 사용)을 지원한다. 한 줄에는 하나의 패턴만 있다는 것으로 취급된다.&#xA;.helmignore 파일 예시는 다음과 같다.</description>
    </item>
    <item>
      <title>헬름 플러그인 가이드</title>
      <link>https://helm.sh/ko/docs/topics/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/plugins/</guid>
      <description>헬름 플러그인은 helm CLI를 통해 액세스할 수 있는 도구이지만 기본 제공 헬름 코드 베이스에 포함되지는 않는다.&#xA;기존 플러그인은 관련 섹션 또는 GitHub을 검색하여 찾을 수 있다.&#xA;이 가이드에서는 플러그인을 사용하고 만드는 방법을 설명한다.&#xA;개요 헬름 플러그인은 헬름과 원활하게 연계되는 애드온 도구이다. 새로운 모든 기능을 Go로 작성하거나 코어 도구에 추가하지 않더라도, 헬름 플러그인을 사용하여 코어 기능 세트를 확장하는 방법을 제공한다.&#xA;헬름 플러그인에는 다음과 같은 기능들이 있다.&#xA;코어 헬름 도구에 영향을 주지 않고 헬름 설치에서 추가하거나 제거할 수 있다.</description>
    </item>
    <item>
      <title>템플릿 디버깅</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/debugging/</guid>
      <description>렌더링된 템플릿이 쿠버네티스 API 서버로 전송될 때 문서 형식 이외의 이유로 YAML 파일들이 거부될 수 있기 때문에, 템플릿 디버깅은 다소 까다로울 수 있다.&#xA;디버깅에 도움이 되는 몇 가지 명령어들이 있다.&#xA;helm lint 는 내 차트가 모범 사례에 맞는지 검증하는 믿을만한 도구이다. helm install --dry-run --debug 혹은 helm template --debug: 앞에서 설명한 적이 있는 방법이다. 서버가 템플릿을 렌더링한 결과물을 매니페스트 파일로 돌려받아 볼 수 있는 매우 유용한 방법이다. helm get manifest: 서버에 어떤 템플릿들이 설치되어 있는지 알아 볼 수 있는 유용한 방법이다.</description>
    </item>
    <item>
      <title>헬름 v2를 v3로 마이그레이션</title>
      <link>https://helm.sh/ko/docs/topics/v2_v3_migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/v2_v3_migration/</guid>
      <description>이 가이드에서는 헬름 v2를 v3로 마이그레이션하는 방법을 보여준다. 헬름 v2가 설치되어 있어야 하며, 하나 이상의 클러스터에서 릴리스가 관리되어야 한다.&#xA;헬름 3 변경사항 개요 헬름 2 에서 3로의 변경사항 전체 목록은 FAQ 에 작성되어 있다. 다음은 마이그레이션 준비 및 작업간에 사용자가 알아야 할 몇 가지 변경 사항에 대한 요약이다:&#xA;Tiller 제거: 클라이언트/서버 구조는 클라이언트/라이브러리 아키텍처로 대체됨 (helm 바이너리만 해당) 보안 서비스는 이제 사용자 단위로 제공됨 (쿠버네티스 사용자 클러스터 보안에 위임) 릴리스는 이제 클러스터 내의 시크릿으로 저장되고 릴리스 객체 메타 데이터도 변경됨 릴리스는 더 이상 Tiller 네임스페이스가 아니라 릴리스 네임스페이스 기반으로 유지됨 차트 저장소 업데이트: helm search 는 이제 로컬 저장소 검색과 헬름 허브에 대한 검색 쿼리를 모두 지원함 다음의 사양 변경에 대하여 차트 apiVersion 이 &amp;quot;v2&amp;quot;로 증가: 동적으로 연결된 차트 의존성이 Chart.</description>
    </item>
    <item>
      <title>다음 단계</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/wrapping_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/wrapping_up/</guid>
      <description>본 가이드는 차트 개발자에게 헬름의 템플릿 언어를 사용하는 방법을 깊이 이해시키기 위한 것이다. 템플릿 개발의 기술적 관점이 중심이 된다.&#xA;그러나 이 가이드에서도 실제 차트 개발에 필요한 많은 것들을 모두 다루지는 못했다. 새로운 차트를 작성할 때 도움이 되는 다른 유용한 문서들은 다음과 같다.&#xA;Helm Charts project is an indispensable source of charts. That project is also sets the standard for best practices in chart development. The Kubernetes Documentation provides detailed examples of the various resource kinds that you can use, from ConfigMaps and Secrets to DaemonSets and Deployments.</description>
    </item>
    <item>
      <title>부록: YAML 기법</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/yaml_techniques/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/yaml_techniques/</guid>
      <description>Most of this guide has been focused on writing the template language. Here, we&#39;ll look at the YAML format. YAML has some useful features that we, as template authors, can use to make our templates less error prone and easier to read.&#xA;스칼라(scalar)와 콜렉션(collection) According to the YAML spec, there are two types of collections, and many scalar types.&#xA;The two types of collections are maps and sequences:&#xA;map: one: 1 two: 2 three: 3 sequence: - one - two - three Scalar values are individual values (as opposed to collections)</description>
    </item>
    <item>
      <title>부록: Go 자료형과 템플릿</title>
      <link>https://helm.sh/ko/docs/chart_template_guide/data_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/chart_template_guide/data_types/</guid>
      <description>헬름 템플릿 언어는 강한 타이핑(strongly typed)인 Go 프로그래밍 언어로 구현된다. 이러한 이유로, 템플릿에서의 변수는 _타이핑(typed)_된다. 대부분의 경우, 변수는 다음 자료형 중 하나로 노출된다.&#xA;string: 텍스트 문자열 bool: true 또는 false int: 정수 값 (8, 16, 32, 64 비트의 부호가 있거나(signed) 없는(unsinged) 다양한 자료형이 있다) float64: 64비트 부동 소수점 값 (8, 16, 32 비트의 다양한 자료형이 있다) byte slice([]byte), 흔히 (잠재적으로) 바이너리 데이터를 담기 위해 사용된다. struct(구조체): 프로퍼티와 메소드를 가지는 객체 위의 자료형 중 하나에 대한 슬라이스(인덱스 있는 리스트) 위의 자료형 중 하나에 대한 문자열-키 맵(map[string]interface{}) Go에는 다른 여러가지 자료형이 있는데, 템플릿에서는 때에 따라 자료형을 변환해야 할 수도 있다.</description>
    </item>
    <item>
      <title>헬름 차트 저장소 지원 중단 업데이트</title>
      <link>https://helm.sh/ko/blog/charts-repo-deprecation/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/charts-repo-deprecation/</guid>
      <description>2019 년에 헬름 v2 지원 타임 라인 및 수명 종료 계획이 발표되었을 때 helm/charts GitHub 저장소의 지원 중단도 발표되었다. 지원 중단의 주된 이유는 저장소 관리자의 유지 관리가 크게 증가했기 때문이다. 지난 몇 년 동안 유지 관리중인 차트 수가 100 개 이하에서 300 개 이상으로 증가하여 저장소에 대한 풀 요청 및 업데이트가 이에 상응하게 증가했다. 안타깝게도 검토 및 유지 관리 작업을 자동화하려는 많은 노력에도 불구하고 관리자의 유지 관리 시간은 단축되지 않았다.</description>
    </item>
    <item>
      <title>Stable 및 Incubator 차트를 위한 새로운 공간</title>
      <link>https://helm.sh/ko/blog/new-location-stable-incubator-charts/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/new-location-stable-incubator-charts/</guid>
      <description>이전에 발표한 것과 같이, stable 및 incubator 저장소가 새로운 공간으로 이동하게 된다. 이 게시물은 새로운 위치에 대한 업데이트를 제공하고 그것을 사용하는 방법을 제공한다.&#xA;중요한 참고사항: 이는 2019 년에 발표된 stable 및 incubator 저장소의 오래된 타임 라인에 영향을 주지 않는다. 2020 년 11 월 13 일에 stable 및 incubator 차트 저장소는 개발이 끝나고 아카이브가 된다. 많은 차트가 커뮤니티에서 관리하는 다른 저장소로 이동했음을 알 수 있다. 아티팩트 허브에서 확인할 수 있다. 노후화에 대한 자세한 정보는 향후 블로그 게시물 및 커뮤니케이션에서 이어질 예정이다.</description>
    </item>
    <item>
      <title>헬름 5주년과 깃헙으로부터의 차트 선물</title>
      <link>https://helm.sh/ko/blog/helm-turns-five/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/helm-turns-five/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://helm.sh/blog/images/happy-5th.png&#34;&#xA;         alt=&#34;헬름의 5번째 생일 축하&#34;/&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;5년 전, Deis(그 후 마이크로스프트에 인수됨)의 해커톤에서 헬름이 탄생했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>헬름 허브의 아티팩트 허브로의 이동</title>
      <link>https://helm.sh/ko/blog/helm-hub-moving-to-artifact-hub/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/helm-hub-moving-to-artifact-hub/</guid>
      <description>오늘 헬름 허브가 아티팩트 허브로 이동한다. 즉, 헬름 허브로 이동하면 아티팩트 허브로 리다이렉션된다.&#xA;이것은 무엇을 의미하는가? 헬름 허브를 검색하거나 헬름 허브에서 차트 목록을 조회할 때 의문이 들지도 모르겠다. 무슨 차이가 있는걸까?&#xA;아티팩트 허브에서는 헬름 허브에서 조회된 것과 동일한 차트 목록이 모두 조회된다. 더 빠른 검색을 제공하며 국면 검색을 포함한다. 이전과 비슷한 방식으로 차트를 검색할 수 있다. 검색은 헬름 CLI에서도 계속 작동한다.&#xA;아티팩트 허브에는 차트를 검색하는 것 외에도 많은 기능이 있다. 차트가 업데이트되면 이메일 또는 웹훅을 통해 알림을 받을 수 있다.</description>
    </item>
    <item>
      <title>헬름 v2 사용중단 타임라인</title>
      <link>https://helm.sh/ko/blog/helm-v2-deprecation-timeline/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/helm-v2-deprecation-timeline/</guid>
      <description>&lt;p&gt;&lt;em&gt;&#xD;&#xA;&lt;a href=&#34;https://www.jabberwocky.com/carroll/walrus.html&#34; target=&#34;_blank&#34;&gt;루이스 캐롤에게 고개를 끄덕이며...&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;“때가 되었습니다,” 메인테이너(maintainers)는 말한다,&#xD;&#xA;  “소프트웨어의 운명에 대하여 이야기하기 위해:&#xD;&#xA;업그레이드와 -- 헬름 v3의 출시와 --&#xD;&#xA;  버그의 수정 -- 그리고 k8s. --”&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;헬름 v3는 &#xD;&#xA;&lt;a href=&#34;https://helm.sh/blog/helm-3-released/&#34;&gt;2019년 11월에 출시되었으며&lt;/a&gt;, 커뮤니티의 요구에 부응하여 헬름을 계속 발전시켜온 커뮤니티의 노력의 결과입니다. 간소화된 클라이언트 단독 사용환경, 새로운 보안 관점, 쿠버네티스 API와의 더욱 긴밀한 연계를 통하여 헬름 v3는 쿠버네티스에 대한 운영 테스트 패키지 관리 기능을 계속 제공합니다. 그리고 &#xD;&#xA;&lt;a href=&#34;https://helm.sh/blog/celebrating-helms-cncf-graduation/&#34;&gt;졸업한 CNCF 프로젝트&lt;/a&gt;인 헬름은 클라우드 네이티브 생태계의 핵심부분입니다.&lt;/p&gt;&#xA;&lt;p&gt;운영 환경에 주(major) 버전 변경사항을 반영하려면 시간이 필요하다는 것을 우리도 인지하고 있다. 헬름 메인테이너(maintainer)는 2020년 5월까지 헬름 v2에 대한 버그픽스(&#xD;&#xA;&lt;a href=&#34;https://helm.sh/blog/covid-19-extending-helm-v2-bug-fixes/&#34;&gt;2020년 8월로 연장됨&lt;/a&gt;), 2020년 11월까지 헬름 v2에 대한 보안패치를 제공하기로 했다. 그리고 이제 버그픽스 창은 닫힙니다. &#xD;&#xA;&lt;a href=&#34;https://github.com/helm/helm/releases/tag/v2.16.10&#34; target=&#34;_blank&#34;&gt;헬름 v2.16.10&lt;/a&gt;은 최종 버그픽스 릴리스이며 2.17.0은 &#xD;&#xA;&lt;a href=&#34;https://github.com/helm/helm/issues/8346&#34; target=&#34;_blank&#34;&gt;다운로드 위치가 변경&lt;/a&gt;되어 나올 것이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>헬름의 CNCF 졸업을 축하하며</title>
      <link>https://helm.sh/ko/blog/celebrating-helms-cncf-graduation/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/celebrating-helms-cncf-graduation/</guid>
      <description>오늘 헬름이 CNCF 사다리의 마지막 단계에 도달한 것을 보게 되어 기쁘다. 헬름은 CNCF 프로젝트의 인큐베이팅 단계에서 졸업 단계로 이동하여, 쿠버네티스 등 다른 선택된 프로젝트들과 나란히 서게 되었다.&#xA;헬름은 작은 스타트업 Deis의 해커톤 프로젝트로 소박하게 시작되었는데, 우리의 작은 아기가 완전히 성인으로 성장한 것처럼 기분이 정말 좋다. 그리고 우리는 지난 5년 동안 코딩, 커뮤니티, 조직 정책에 대해 많은 것을 배웠다. 그러나 이것이 우리가 헬름의 졸업을 축하하는 주요 이유는 아니다.&#xA;헬름 프로젝트를 시작하고 몇 달 후, 우리는 쿠버네티스의 하위 프로젝트가 되었다.</description>
    </item>
    <item>
      <title>COVID-19: 헬름 v2 버그 수정 확장</title>
      <link>https://helm.sh/ko/blog/covid-19-extending-helm-v2-bug-fixes/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/covid-19-extending-helm-v2-bug-fixes/</guid>
      <description>전 세계가 전염병에 맞서 싸우기 위해 힘을 모으는 것처럼 헬름 유지관리자들도, 개발 및 운영 일정이 조정되는 시기에도 최대 수요로 작동하는 주요 시스템을 유지보수하는 사용자들에게, 도움을 주는 역할을 잘 수행하고 있는지 점검하고자 한다.&#xA;헬름 v3가 2019년 11월에 출시되었을 때, 원래의 약속은 6개월 동안 헬름 v2 버그 수정을 제공하겠다는 것이었다. 버그 수정은 2020년 5월 13일에 종료되고, 그 후로 6개월 간 보안 수정이 예정되어 있었다. 감염병 예방이 우선이라는 전제 하에, 헬름 v2 버그 수정을 2020년 8월 13일까지 3개월 연장하여 헬름 사용자들이 커뮤니티의 가장 필요한 요구 사항에 대응할 계획이다.</description>
    </item>
    <item>
      <title>KubeCon &#43; CloudNativeCon NA 2019 에서의 헬름</title>
      <link>https://helm.sh/ko/blog/2019-11-15-helm-at-cloudnativecon/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/2019-11-15-helm-at-cloudnativecon/</guid>
      <description>다음 주에는 연례행사인 KubeCon 과 CloudNativeCon 이 북미에서 열린다. 헬름 프로젝트 및 유지관리자들은 몇 가지를 준비하고 있고 여러분을 초대하고 싶다.&#xA;헬름 관련으로는 유지관리자 트랙 세션이 2개 있으며, 헬름 소개 및 헬름 3 심층 분석에 초점을 둔 내용이다. 헬름을 처음 사용하거나, 사용해야 하는 이유와 방법에 관심이 있는 사람은 헬름 소개 세션에 참석해보자. 최근 출시된 헬름 3가 궁금한 사용자는 헬름 3 심층 분석 세션이 적당할 것 같다. 관심을 가질 법한 주변 사람들에게도 널리 알려주자.</description>
    </item>
    <item>
      <title>Helm 3.0.0 출시!</title>
      <link>https://helm.sh/ko/blog/helm-3-released/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/blog/helm-3-released/</guid>
      <description>헬름 팀은 헬름 3의 첫번째 안정적 릴리스를 발표하게 된 것을 자랑스럽게 생각한다.&#xA;헬름 3는 CLI 도구의 최신 주(major) 릴리스이다. 헬름 2의 성공을 기반으로, 헬름 3도 진화하는 생태계의 요구에 계속 부응하고 있다.&#xA;헬름 3의 내부 구현은 헬름 2와는 상당히 다르게 변경되었다. 가장 눈에 띄는 변화는 틸러(Tiller)가 제거된 것이다. 다만 새 릴리스에서 다른 변경사항들도 확인해두는 게 좋다. 커뮤니티의 의견과 요구사항에 따라 다양한 새로운 기능들이 추가되었다. 일부 기능은 헬름 2와 호환되지 않는 방식으로, 더 이상 사용되지 않거나 리팩토링되었다.</description>
    </item>
    <item>
      <title>helm</title>
      <link>https://helm.sh/ko/docs/helm/helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm/</guid>
      <description>helm 쿠버네티스를 위한 헬름 패키지 매니저&#xA;개요 쿠버네티스 패키지 매니저&#xA;일반적으로 사용되는 헬름 작업:&#xA;helm search: 차트를 검색 helm pull: 확인하려는 로컬 디렉토리에 차트를 다운로드 helm install: 쿠버네티스에 차트 업로드 helm list: 차트 릴리스 리스트 표시 환경 변수:&#xA;Name Description $HELM_CACHE_HOME 캐시된 파일을 저장할 대체 위치를 지정 $HELM_CONFIG_HOME 헬름 설정을 저장할 대체 위치를 지정 $HELM_DATA_HOME 헬름 데이터를 저장할 대체 위치를 지정 $HELM_DEBUG 헬름이 디버그 모드에서 실행 중인지 여부 표시 $HELM_DRIVER 백엔드 스토리지 드라이버 설정.</description>
    </item>
    <item>
      <title>Helm Completion</title>
      <link>https://helm.sh/ko/docs/helm/helm_completion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_completion/</guid>
      <description>helm completion 지정될 셸에 대한 자동 스크립트 생성&#xA;개요 지정된 셸의 헬름에 대한 자동 완성 스크립트를 생성한다.&#xA;옵션 -h, --help helm completion 명령어에 대한 도움말 부모 명령어에 상속된 옵션 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업할 그룹 지정. 플래그를 반복하여 여러 그룹 지정도 가능 --kube-as-user string 작업할 사용자 이름 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 요청에 대한 네임스페이스 지정 --registry-config string 레지스트리 구성에 대한 파일 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Completion - bash</title>
      <link>https://helm.sh/ko/docs/helm/helm_completion_bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_completion_bash/</guid>
      <description>helm completion bash bash에 대한 자동 완성 스크립트 생성&#xA;개요 bash 셸의 헬름에 대한 자동 완성 스크립트를 생성한다.&#xA;현재 셸 세션에서 완성 기능을 로드하려면:&#xA;source &amp;lt;(helm completion bash)&#xD;새로운 세션마다 완성 기능을 로드하려면 다음 작업을 한 번 실행한다:&#xA;Linux:&#xA;helm completion bash &amp;gt; /etc/bash_completion.d/helm&#xD;MacOS:&#xA;helm completion bash &amp;gt; /usr/local/etc/bash_completion.d/helm&#xD;helm completion bash 옵션 -h, --help helm completion bash 명령어에 대한 도움말 부모 명령어에 상속된 옵션들 --add-dir-header 이 값이 참이면, 헤더에 파일 디렉토리를 추가 --alsologtostderr 파일처럼 표준 오류로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Completion - fish</title>
      <link>https://helm.sh/ko/docs/helm/helm_completion_fish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_completion_fish/</guid>
      <description>helm completion fish fish에 대한 자동 완성 스크립트 생성&#xA;개요 fish 셸의 헬름에 대한 자동 완성 스크립트를 생성한다.&#xA;현재 셸 세션에서 completion 기능을 로드하려면:&#xA;helm completion fish | source&#xD;모든 새 세션에서 completion 기능을 로드하려면 다음 작업을 한 번 실행한다:&#xA;helm completion fish &amp;gt; ~/.config/fish/completions/helm.fish&#xD;이 설정을 적용하려면 새 셸을 시작해야 한다.&#xA;helm completion fish [flags] 옵션 -h, --help helm completion fish 명령어에 대한 도움말 --no-descriptions completion 세부 정보 비활성화 부모 명령어에 상속된 옵션 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업할 그룹 지정.</description>
    </item>
    <item>
      <title>Helm Completion - zsh</title>
      <link>https://helm.sh/ko/docs/helm/helm_completion_zsh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_completion_zsh/</guid>
      <description>helm completion zsh zsh에 대한 자동 완성 스크립트 생성&#xA;개요 zsh 셸의 헬름에 대한 자동 완성 스크립트를 생성한다.&#xA;현재 셸 세션에서 완성 기능을 로드하려면:&#xA;source &amp;lt;(helm completion zsh)&#xD;새로운 세션마다 완성 기능을 로드하려면 다음 작업을 한 번 실행한다:&#xA;helm completion zsh &amp;gt; &amp;quot;${fpath[1]}/_helm&amp;quot;&#xD;helm completion zsh [flags] 옵션 -h, --help helm completion zsh 명령어에 대한 도움말 부모 명령어에 상속된 옵션들 --add-dir-header 이 값이 참이면, 헤더에 파일 디렉토리를 추가 --alsologtostderr 파일처럼 표준 오류로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Create</title>
      <link>https://helm.sh/ko/docs/helm/helm_create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_create/</guid>
      <description>helm create 주어진 이름으로 새로운 차트를 생성&#xA;개요 이 명령은 차트에 사용되는 공통 파일 및 디렉토리와 함께 차트 디렉토리를 만든다.&#xA;예를 들어, &#39;helm create foo&#39; 는 다음과 같은 디렉토리 구조를 생성한다:&#xA;foo/&#xD;├── .helmignore # 헬름 차트를 패키징할 때 무시할 패턴 포함&#xD;├── Chart.yaml # 차트에 대한 정보&#xD;├── values.yaml # 템플릿의 기본값&#xD;├── charts/ # 이 차트가 의존하는 차트&#xD;└── templates/ # 템플릿 파일&#xD;└── tests/ # 테스트 파일&#xD;&#39;helm create&#39; 는 인수로 경로를 받는다.</description>
    </item>
    <item>
      <title>Helm Dependency</title>
      <link>https://helm.sh/ko/docs/helm/helm_dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_dependency/</guid>
      <description>helm dependency 차트의 종속성을 관리&#xA;개요 차트의 종속성을 관리한다.&#xA;헬름 차트는 종속성을 &#39;charts/&#39; 에 저장한다. 차트 개발자의 경우 모든 종속성을 선언하는 &#39;Chart.yaml&#39; 에서 종속성을 관리하는 것이 더 쉬운 경우가 많다.&#xA;종속성 명령은 해당 파일에서 작동하므로 원하는 종속성과 &#39;charts/&#39; 디렉토리에 저장된 실제 종속성을 쉽게 동기화 할 수 있다.&#xA;예를 들어 이 Chart.yaml 은 두 가지 종속성을 선언한다.&#xA;# Chart.yaml&#xD;dependencies:&#xD;- name: nginx&#xD;version: &amp;quot;1.2.3&amp;quot;&#xD;repository: &amp;quot;https://example.com/charts&amp;quot;&#xD;- name: memcached&#xD;version: &amp;quot;3.</description>
    </item>
    <item>
      <title>Helm Dependency Build</title>
      <link>https://helm.sh/ko/docs/helm/helm_dependency_build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_dependency_build/</guid>
      <description>helm dependency build Chart.lock 파일을 기반으로 charts/ 디렉토리를 다시 빌드&#xA;개요 Chart.lock 파일에서 charts/ 디렉토리를 빌드한다.&#xA;빌드는 잠금파일에 지정된 상태에 대한 차트의 종속성을 재구성하는데 사용된다. 이것은 &#39;helm dependency update&#39; 처럼 종속성을 다시 재협상하지 않는다.&#xA;잠금 파일이 없으면 &#39;helm dependency build&#39;는 &#39;helm dependency update&#39;의 동작을 미러링합니다.&#xA;helm dependency build CHART [flags] 옵션 -h, --help helm dependency build 명령어에 대한 도움말 --keyring string 공개 키를 포함하는 키링 (기본값 &amp;#34;~/.gnupg/pubring.gpg&amp;#34;) --verify 서명과 비교하여 패키지 확인 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹.</description>
    </item>
    <item>
      <title>Helm Dependency List</title>
      <link>https://helm.sh/ko/docs/helm/helm_dependency_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_dependency_list/</guid>
      <description>helm dependency list 주어진 차트에 대한 종속성을 나열&#xA;개요 차트에 선언된 모든 종속성을 나열한다.&#xA;이것은 차트 아카이브 및 차트 디렉토리를 입력으로 사용할수 있다. 차트의 내용은 변경되지 않는다.&#xA;차트를 로드할 수 없는 경우 오류가 발생한다.&#xA;helm dependency list CHART [flags] 옵션 -h, --help helm dependency list 명령어에 대한 도움말 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹. 플래그를 여러 번 사용하여 여러 그룹 지정 가능 --kube-as-user string 작업에 관해 제시할 사용자명 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청에 대한 네임스페이스 스코프 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Dependency Update</title>
      <link>https://helm.sh/ko/docs/helm/helm_dependency_update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_dependency_update/</guid>
      <description>helm dependency update Chart.yaml 의 내용에 따라 charts/ 업데이트&#xA;개요 Chart.yaml 을 미러링하도록 온-디스크 종속성을 업데이트한다.&#xA;이 명령은 &#39;Chart.yaml&#39; 에 표현된 필수 차트가 &#39;charts/&#39; 에 있고 허용 가능한 버전인지를 확인한다. 종속성을 충족하는 최신 차트를 풀다운(pull down)하고 이전 종속성을 정리한다.&#xA;업데이트가 성공하면 종속성을 정확한 버전으로 다시 빌드하는데 사용할 수 있는 잠금파일이 생성된다.&#xA;종속성은 &#39;Chart.yaml&#39; 에 표시할 필요가 없다. 따라서 업데이트 명령은 차트가 (a)Chart.yaml 파일에 있지만, (b)잘못된 버전이 아니면 차트를 제거하지 않는다.</description>
    </item>
    <item>
      <title>Helm Env</title>
      <link>https://helm.sh/ko/docs/helm/helm_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_env/</guid>
      <description>helm env 헬름 클라이언트 환경변수 정보&#xA;개요 Env 는 헬름에서 사용 중인 모든 환경변수 정보를 출력한다.&#xA;helm env [flags] 옵션 -h, --help env 에 대한 도움말 부모 명령어에서 상속된 옵션들 --add-dir-header 이 값이 참이면, 헤더에 파일 디렉토리를 추가 --alsologtostderr 표준 오류를 로그 및 파일로 표시 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Get</title>
      <link>https://helm.sh/ko/docs/helm/helm_get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_get/</guid>
      <description>helm get 명명된 릴리스의 확장 정보 다운로드&#xA;개요 이 명령은 다음을 포함하여 릴리스에 대한 확장 정보를 가져오는 데 사용할 수 있는 여러가지 하위 명령으로 구성된다.&#xA;릴리스 생성에 사용되는 값 생성된 매니페스트 파일 릴리스 차트에서 제공하는 노트 릴리스와 관련된 훅(hooks) 옵션 -h, --help get 에 대한 도움말 부모 명령어에서 상속된 옵션들 --add-dir-header 이 값이 true이면, 헤더에 파일 디렉토리를 추가한다 --alsologtostderr 파일처럼 표준오류(stderr)로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Get All</title>
      <link>https://helm.sh/ko/docs/helm/helm_get_all/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_get_all/</guid>
      <description>helm get all 명명된 릴리스에 대한 모든 정보 다운로드&#xA;개요 이 명령어는 지정한 릴리스에서 노트, 훅, 제공된 값 및 생성된 매니페스트 파일에 대한 정보를 사람이 읽을 수 있는 콜렉션으로 출력한다.&#xA;helm get all RELEASE_NAME [flags] 옵션 -h, --help all 에 대한 도움말 --revision int 리비전으로 명명된 릴리스 가져오기 --template string 출력 형식 지정을 위한 go 템플릿. 예: {{.Release.Name}} 부모 명령어에서 상속된 옵션들 --add-dir-header 이 값이 true이면, 헤더에 파일 디렉토리를 추가한다 --alsologtostderr 파일처럼 표준오류(stderr)로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Get Hooks</title>
      <link>https://helm.sh/ko/docs/helm/helm_get_hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_get_hooks/</guid>
      <description>helm get hooks 명명된 릴리스에 대한 모든 훅 다운로드&#xA;개요 이 명령어는 지정한 릴리스에 대한 훅을 다운로드한다.&#xA;훅은 YAML로 형식이며 YAML &#39;---\n&#39; 구분자로 구분된다.&#xA;helm get hooks RELEASE_NAME [flags] 옵션 -h, --help hooks 에 대한 도움말 --revision int 리비전으로 명명된 릴리스 가져오기 부모 명령어에서 상속된 옵션들 --add-dir-header 이 값이 true이면, 헤더에 파일 디렉토리를 추가한다 --alsologtostderr 파일처럼 표준오류(stderr)로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Get Manifest</title>
      <link>https://helm.sh/ko/docs/helm/helm_get_manifest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_get_manifest/</guid>
      <description>helm get manifest 명명된 릴리스에 대한 매니페스트 다운로드&#xA;개요 이 명령어는 지정한 릴리스에 대해 생성된 매니페스트를 가져온다.&#xA;매니페스트는 이 릴리스의 차트에서 생성된 쿠버네티스 리소스를 YAML 로 인코딩한 표현이다. 차트가 다른 차트에 종속된 경우 해당 리소스도 매니페스트에 포함된다.&#xA;helm get manifest RELEASE_NAME [flags] 옵션 -h, --help manifest 에 대한 도움말 --revision int 리비전으로 명명된 릴리스 가져오기 부모 명령어에서 상속된 옵션들 --add-dir-header 이 값이 true이면, 헤더에 파일 디렉토리를 추가한다 --alsologtostderr 파일처럼 표준오류(stderr)로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Get Notes</title>
      <link>https://helm.sh/ko/docs/helm/helm_get_notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_get_notes/</guid>
      <description>helm get notes 명명된 릴리스에 대한 노트 다운로드&#xA;개요 이 명령어는 명명된 릴리스의 차트에서 제공하는 노트를 보여준다.&#xA;helm get notes RELEASE_NAME [flags] 옵션 -h, --help notes 에 대한 도움말 --revision int 리비전으로 명명된 릴리스 가져오기 부모 명령어에서 상속된 옵션들 --add-dir-header 이 값이 true이면, 헤더에 파일 디렉토리를 추가한다 --alsologtostderr 파일처럼 표준오류(stderr)로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Get Values</title>
      <link>https://helm.sh/ko/docs/helm/helm_get_values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_get_values/</guid>
      <description>helm get values 명명된 릴리스에 대한 값 파일 다운로드&#xA;개요 이 명령어는 주어진 릴리스에 대한 값 파일을 다운로드한다.&#xA;helm get values RELEASE_NAME [flags] 옵션 -a, --all 모든 (계산 된) 값 덤프 -h, --help values 에 대한 도움말 -o, --output format 지정한 형식으로 출력을 표시. 허용되는 값: table, json, yaml (기본값 table) --revision int 리비전으로 명명된 릴리스 가져오기 부모 명령어에서 상속된 옵션들 --add-dir-header 이 값이 true이면, 헤더에 파일 디렉토리를 추가한다 --alsologtostderr 파일처럼 표준오류(stderr)로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm History</title>
      <link>https://helm.sh/ko/docs/helm/helm_history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_history/</guid>
      <description>helm history 릴리스 히스토리를 가져온다.&#xA;개요 History 명령어는 주어진 릴리즈에 대한 리비젼 기록을 출력한다.&#xA;기본 최대 256개 리비전이 반환된다. &#39;--max&#39; 설정은 반환되는 리비젼 목록의 최대 길이를 지정한다.&#xA;릴리스 기록은 형식이 지정된 테이블의 형태로 출력된다. 예:&#xA;$ helm history angry-bird&#xD;REVISION UPDATED STATUS CHART APP VERSION DESCRIPTION&#xD;1 Mon Oct 3 10:15:13 2016 superseded alpine-0.1.0 1.0 Initial install&#xD;2 Mon Oct 3 10:15:13 2016 superseded alpine-0.1.0 1.0 Upgraded successfully&#xD;3 Mon Oct 3 10:15:13 2016 superseded alpine-0.</description>
    </item>
    <item>
      <title>Helm Install</title>
      <link>https://helm.sh/ko/docs/helm/helm_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_install/</guid>
      <description>helm install 차트를 설치한다.&#xA;개요 이 명령은 차트 아카이브를 설치한다.&#xA;install 인수는 차트 참조, 패키지 된 차트 경로, 압축 해제 된 차트 디렉토리 경로 또는 URL 이어야한다.&#xA;차트의 값을 재정의하려면 &#39;--values&#39; 플래그를 사용하고 파일을 전달하거나 &#39;--set&#39; 플래그를 사용하고 명령 줄에서 구성을 전달하고 문자열 값에 &#39;--set-string&#39; 을 사용한다. 값이 커서 &#39;--values&#39; 도 &#39;--set&#39; 도 사용하지 않으려면 &#39;--set-file&#39; 을 사용하여 파일에서 하나의 큰 값을 읽도록 하자.&#xA;$ helm install -f myvalues.yaml myredis .</description>
    </item>
    <item>
      <title>Helm Lint</title>
      <link>https://helm.sh/ko/docs/helm/helm_lint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_lint/</guid>
      <description>helm lint 이슈가 발생하지 않을지 차트를 검토한다&#xA;개요 이 명령은 차트 경로를 받아 해당 차트가 올바른 형식(well-formed)인지 검증하는 일련의 테스트를 실행한다.&#xA;만약 린터(linter)가 차트 설치 실패를 일으킬만한 사항을 발견하면, [ERROR] 메세지를 발생시킬 것이다. 컨벤션이나 권장사항을 위반한 이슈를 발견하면, [WARNING] 메세지를 발생시킬 것이다.&#xA;helm lint PATH [flags] 옵션 -h, --help lint 에 대한 도움말 --set stringArray 명령 줄에 값을 설정 (쉼표로 여러 값 또는 개별 값을 지정 가능: 키1=값1,키2=값2) --set-file stringArray 명령 줄을 통해 지정된 각 파일에서 값을 설정 (쉼표로 여러 값 또는 개별 값을 지정 가능: 키1=값1,키2=값2) --set-string stringArray 명령 줄에서 STRING 값 설정 (쉼표로 여러 값 또는 개별 값을 지정 가능: 키1=값1,키2=값2) --strict 검토 경고(lint warning)시 실패로 판정 -f, --values strings YAML 파일 또는 URL 에 값 지정 (여러 개 지정 가능) --with-subcharts 하위 차트 의존성 검토 부모 명령어에서 상속된 옵션들 --add-dir-header true이면, 헤더에 파일 디렉토리를 추가 --alsologtostderr 파일처럼 로그를 표준 오류로로 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm List</title>
      <link>https://helm.sh/ko/docs/helm/helm_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_list/</guid>
      <description>helm list 릴리스를 나열한다.&#xA;개요 이 명령은 지정된 네임 스페이스에 대한 모든 릴리스를 나열헌다 (네임 스페이스가 지정되지 않은 경우 현재 네임 스페이스 컨텍스트 사용).&#xA;기본적으로는, 배포되었거나 실패한 릴리스만 나열한다. &#39;--uninstalled&#39; 및 &#39;--all&#39; 과 같은 플래그는 이 동작을 변경한다. 이러한 플래그는 &#39;--uninstalled --failed&#39; 와 같이 결합 할 수 있다.&#xA;기본적으로, 항목은 알파벳순으로 정렬된다. 출시 날짜별로 정렬하려면 &#39;-d&#39; 플래그를 사용하자.&#xA;--filter 플래그가 제공되면 필터로 처리된다. 필터는 릴리스 목록에 적용되는 정규식 (Perl 호환 가능)이다.</description>
    </item>
    <item>
      <title>Helm Package</title>
      <link>https://helm.sh/ko/docs/helm/helm_package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_package/</guid>
      <description>helm package 차트 디렉토리를 차트 아카이브로 패키징&#xA;개요 이 명령어는 차트를, 버전이 지정된 차트 아카이브 파일로 패키징한다. 경로가 지정되면 차트(Chart.yaml 파일을 포함해야 함)에 대한 그 경로를 찾은 다음 해당 디렉토리를 패키징한다.&#xA;버전이 지정된 차트 아카이브는 헬름 패키지 저장소에서 사용된다.&#xA;차트에 서명하려면 --sign 플래그를 사용하자. 대부분의 경우, &#39;--keyring path/to/secret/keys&#39; 와 &#39;--key keyname&#39; 도 지정해야 할 것이다.&#xA;$ helm package --sign ./mychart --key mykey --keyring ~/.gnupg/secring.gpg&#xA;&#39;--keyring&#39; 을 지정하지 않았고 별다른 설정을 하지 않은 환경이라면 헬름은 보통 공개 키링을 기본값으로 사용한다.</description>
    </item>
    <item>
      <title>Helm Plugin</title>
      <link>https://helm.sh/ko/docs/helm/helm_plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_plugin/</guid>
      <description>helm plugin 헬름 플러그인 설치, 나열, 제거&#xA;개요 클라이언트 측 헬름 플러그인을 관리한다.&#xA;옵션 -h, --help helm plugin 명령어의 도움말 부모 명령어로부터 상속된 옵션 --debug 자세한 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업을 가장(impersonate)하기 위한 그룹. 이 플래그를 반복하여 여러 그룹을 지정 가능 --kube-as-user string 작업을 가장할 사용자 이름 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 전달자(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청의 네임스페이스 범위 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Plugin Install</title>
      <link>https://helm.sh/ko/docs/helm/helm_plugin_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_plugin_install/</guid>
      <description>helm plugin install 하나 이상의 헬름 플러그인을 설치한다.&#xA;Synopsis 이 명령을 사용하면 URL에서 VCS 저장소 또는 로컬 경로로 플러그인을 설치할 수 있다.&#xA;helm plugin install [options] &amp;lt;path|url&amp;gt;... [flags] 옵션 -h, --help helm plugin install 명령어의 도움말 --version string 버전을 강제로 지정. 지정하지 않으면 최신 버전을 설치 부모 명령어로부터 상속된 옵션 --debug 자세한 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업을 가장(impersonate)하기 위한 그룹. 이 플래그를 반복하여 여러 그룹을 지정 가능 --kube-as-user string 작업을 가장할 사용자 이름 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 전달자(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청의 네임스페이스 범위 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Plugin List</title>
      <link>https://helm.sh/ko/docs/helm/helm_plugin_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_plugin_list/</guid>
      <description>helm plugin list 설치된 헬름 플러그인 나열&#xA;개요 설치된 헬름 플러그인을 나열한다.&#xA;helm plugin list [flags] 옵션 -h, --help helm plugin list 명령어의 도움말 부모 명령어로부터 상속된 옵션 --debug 자세한 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업을 가장(impersonate)하기 위한 그룹. 이 플래그를 반복하여 여러 그룹을 지정 가능 --kube-as-user string 작업을 가장할 사용자 이름 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 전달자(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청의 네임스페이스 범위 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Plugin Uninstall</title>
      <link>https://helm.sh/ko/docs/helm/helm_plugin_uninstall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_plugin_uninstall/</guid>
      <description>helm plugin uninstall 하나 이상의 헬름 플러그인을 제거&#xA;개요 하나 이상의 헬름 플러그인을 제거한다.&#xA;helm plugin uninstall &amp;lt;plugin&amp;gt;... [flags] 옵션 -h, --help helm plugin uninstall 명령어의 도움말 부모 명령어로부터 상속된 옵션 --debug 자세한 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업을 가장(impersonate)하기 위한 그룹. 이 플래그를 반복하여 여러 그룹을 지정 가능 --kube-as-user string 작업을 가장할 사용자 이름 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 전달자(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청의 네임스페이스 범위 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Plugin Update</title>
      <link>https://helm.sh/ko/docs/helm/helm_plugin_update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_plugin_update/</guid>
      <description>helm plugin update 하나 이상의 헬름 플러그인 업데이트&#xA;Synopsis 하나 이상의 헬름 플러그인을 업데이트한다.&#xA;helm plugin update &amp;lt;plugin&amp;gt;... [flags] 옵션 -h, --help helm plugin update 명령어의 도움말 부모 명령어로부터 상속된 옵션 --debug 자세한 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업을 가장(impersonate)하기 위한 그룹. 이 플래그를 반복하여 여러 그룹을 지정 가능 --kube-as-user string 작업을 가장할 사용자 이름 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용할 전달자(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청의 네임스페이스 범위 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Pull</title>
      <link>https://helm.sh/ko/docs/helm/helm_pull/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_pull/</guid>
      <description>helm pull 저장소에서 차트를 다운로드하고 (선택적으로) 로컬 디렉터리에 압축 해제&#xA;개요 패키지 저장소에서 패키지를 검색하고 로컬로 다운로드 한다.&#xA;이는 검사, 수정 또는 리패키지를 위하여 패키지를 가져올 때 유용하다. 또한 설치하지 않고 차트의 암호화 검증을 수행하는 데 사용할 수도 있다.&#xA;다운로드 후 차트를 풀 수 있는 옵션이 있다. 그러면 차트에 대한 디렉터리가 생성되고 해당 디렉터리에 압축이 해제된다.&#xA;--verify 플래그가 지정된 경우, 요청된 차트에는 출처 파일이 있어야 하며 확인 프로세스를 통과해야 한다. 프로세스 중 어느 부분에서라도 실패할 경우 오류가 발생할 수 있으며, 차트가 로컬에 저장되지 않는다.</description>
    </item>
    <item>
      <title>Helm Repo</title>
      <link>https://helm.sh/ko/docs/helm/helm_repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_repo/</guid>
      <description>helm repo 차트 저장소 추가, 나열, 제거, 업데이트, 색인 생성&#xA;개요 이 명령은 차트 저장소와 상호작용하는 여러 하위명령으로 구성된다.&#xA;차트 저장소를 추가, 제거, 나열, 색인화 하는데 사용될 수 있다.&#xA;옵션 -h, --help helm repo 에 대한 도움말 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹. 플래그를 여러 번 사용하여 여러 그룹 지정 가능 --kube-as-user string 작업에 관해 제시할 사용자명 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청에 대한 네임스페이스 스코프 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Repo Add</title>
      <link>https://helm.sh/ko/docs/helm/helm_repo_add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_repo_add/</guid>
      <description>helm repo add 차트 저장소를 추가&#xA;개요 차트 저장소를 추가한다.&#xA;helm repo add [NAME] [URL] [flags] 옵션 --allow-deprecated-repos 기본적으로, 이 명령은 영구적으로 삭제된 공식 저장소를 추가하는 것을 허용하지 않으며, 이 옵션을 통해 해당 동작을 비활성화. --ca-file string 이 CA 번들을 사용하여 HTTPS 사용 서버의 인증서를 확인 --cert-file string 이 SSL 인증서 파일을 사용하여 HTTPS 클라이언트 식별 --force-update 레포지터리가 이미 있는 경우 교체(덮어쓰기) -h, --help helm repo add 명령어에 대한 도움말 --insecure-skip-tls-verify 저장소에 대한 TLS 인증서 검사 건너뛰기 --key-file string 이 SSL 키 파일을 사용하여 HTTPS 클라이언트 식별 --no-update 무시.</description>
    </item>
    <item>
      <title>Helm Repo Index</title>
      <link>https://helm.sh/ko/docs/helm/helm_repo_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_repo_index/</guid>
      <description>helm repo index 패키지된 차트를 포함하는 디렉터리에 인덱스 파일을 생성&#xA;개요 현재 디렉터리를 읽고 찾은 차트를 기반으로 색인 파일을 생성한다.&#xA;이 도구는 차트 저장소에 대한 &#39;index.yaml&#39; 파일을 만드는데 사용된다. 차트에 대한 절대 URL을 설정하려면 &#39;--url&#39; 플래그를 사용하자.&#xA;생성된 인덱스를 기존 인덱스 파일과 병합하려면, &#39;--merge&#39; 플래그를 사용하자. 이 경우 현재 디렉터리에 있는 차트가 기존 인덱스에 병합되고 로컬차트가 기존차트보다 우선한다.&#xA;helm repo index [DIR] [flags] 옵션 -h, --help helm repo index 명령어의 도움말 --merge string 생성된 색인을 주어진 색인에 병합 --url string 차트 저장소의 url 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹.</description>
    </item>
    <item>
      <title>Helm Repo List</title>
      <link>https://helm.sh/ko/docs/helm/helm_repo_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_repo_list/</guid>
      <description>helm repo list 차트 저장소 나열&#xA;개요 차트 저장소를 나열한다.&#xA;helm repo list [flags] Options -h, --help helm repo list 명령어의 도움말 -o, --output format 지정된 형식으로 출력. 허용되는 값: table, json, yaml (기본값 table) 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹. 플래그를 여러 번 사용하여 여러 그룹 지정 가능 --kube-as-user string 작업에 관해 제시할 사용자명 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청에 대한 네임스페이스 스코프 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Repo Remove</title>
      <link>https://helm.sh/ko/docs/helm/helm_repo_remove/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_repo_remove/</guid>
      <description>helm repo remove 하나 이상의 차트 저장소 제거&#xA;개요 하나 이상의 차트 저장소를 제거한다.&#xA;helm repo remove [REPO1 [REPO2 ...]] [flags] 옵션 -h, --help helm repo remove 명령어에 대한 도움말 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹. 플래그를 여러 번 사용하여 여러 그룹 지정 가능 --kube-as-user string 작업에 관해 제시할 사용자명 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청에 대한 네임스페이스 스코프 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Repo Update</title>
      <link>https://helm.sh/ko/docs/helm/helm_repo_update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_repo_update/</guid>
      <description>helm repo update 차트 저장소에서 로컬로 사용 가능한 차트의 정보를 업데이트한다.&#xA;개요 업데이트 명령어는 각 차트 레포지터리에서 차트에 대한 최신 정보를 가져온다. 정보는 &#39;helm search&#39; 와 같은 명령에서 사용되는 것과 같이 로컬에 캐싱된다.&#xA;helm repo update [flags] 옵션 -h, --help helm repo update 명령어에 대한 도움말 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹. 플래그를 여러 번 사용하여 여러 그룹 지정 가능 --kube-as-user string 작업에 관해 제시할 사용자명 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청에 대한 네임스페이스 스코프 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Rollback</title>
      <link>https://helm.sh/ko/docs/helm/helm_rollback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_rollback/</guid>
      <description>helm rollback 릴리스를 이전 리비젼으로 롤백한다.&#xA;개요 이 명령은 릴리스를 이전 리비젼으로 롤백한다.&#xA;rollback 명령어의 첫 번째 인수는 릴리스의 이름이고, 두 번째 인수는 리비젼(버전) 번호이다. 이 인수를 생략하면 바로 이전 릴리스로 롤백 된다.&#xA;리비젼 번호를 보려면 &#39;helm history RELEASE&#39; 를 실행하자.&#xA;helm rollback &amp;lt;RELEASE&amp;gt; [REVISION] [flags] 옵션 --cleanup-on-fail 롤백이 실패할 때 이 롤백에서 생성된 새 리소스의 삭제를 허용 --dry-run 롤백 모의 실행 --force 필요한 경우 삭제/재작성을 통해 리소스를 강제로 업데이트 -h, --help rollback 명령어에 대한 도움말 --history-max int 릴리스 당 저장되는 최대 리비젼 수를 제한.</description>
    </item>
    <item>
      <title>Helm Search</title>
      <link>https://helm.sh/ko/docs/helm/helm_search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_search/</guid>
      <description>helm search 차트에서 키워드 검색&#xA;개요 검색은 추가 한 헬름 허브 및 저장소를 포함하여 저장할 수있는 다양한 위치에서 Helm 차트를 검색하는 기능을 제공한다. search 하위 명령을 사용하여 차트의 다른 위치를 검색한다.&#xA;옵션 -h, --help helm search 명령어에 대한 도움말 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹. 플래그를 여러 번 사용하여 여러 그룹 지정 가능 --kube-as-user string 작업에 관해 제시할 사용자명 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 -n, --namespace string 이 요청에 대한 네임스페이스 스코프 --registry-config string 레지스트리 구성 파일에 대한 경로 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Search Hub</title>
      <link>https://helm.sh/ko/docs/helm/helm_search_hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_search_hub/</guid>
      <description>helm search hub 헬름 허브 또는 모노큘러 인스턴스에서 차트 검색&#xA;개요 헬름 차트에 대한 헬름 허브 또는 모노큘러 인스턴스를 검색한다.&#xA;헬름허브는 공개적으로 사용 가능한 분산 형 차트에 대한 중앙 집중식 검색을 제공한다. 헬름 프로젝트에서 관리한다. https://hub.helm.sh에서 방문 할 수 있다.&#xA;모노큘러(Monocular)는 여러 헬름 차트 저장소에서 차트를 검색 할 수있는 웹 기반 애플리케이션이다. 헬름 허브를 구동하는 코드베이스이다. https://github.com/helm/monocular에서 찾을 수 있다.&#xA;helm search hub [keyword] [flags] Options --endpoint string 차트에 대해 질의할 모노큘러 인스턴스 (기본값 &amp;#34;https://hub.</description>
    </item>
    <item>
      <title>Helm Search Repo</title>
      <link>https://helm.sh/ko/docs/helm/helm_search_repo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_search_repo/</guid>
      <description>helm search repo 차트에서 키워드에 대한 저장소 검색&#xA;개요 검색은 시스템에 구성된 모든 저장소를 읽고 일치하는 항목을 찾는다. 이러한 저장소 검색은 시스템에 저장된 메타 데이터를 사용한다.&#xA;찾은 차트의 최신 안정 버전을 표시한다. --devel 플래그를 지정하면 출력에 시험판 버전이 포함된다. 버전 제약을 사용하여 검색하려면 --version 을 사용하자.&#xA;예:&#xA;# 키워드 &amp;quot;nginx&amp;quot; 와 일치하는 안정적인 릴리스 버전 검색&#xD;$ helm search repo nginx&#xD;# 시험판 버전을 포함하여 키워드 &amp;quot;nginx&amp;quot; 와 일치하는 리릴스 버전 검색&#xD;$ helm search repo nginx --devel&#xD;# 주 버전이 1인 nginx-ingress 의 최신 안정 릴리스 검색&#xD;$ helm search repo nginx-ingress --version ^1.</description>
    </item>
    <item>
      <title>Helm Show</title>
      <link>https://helm.sh/ko/docs/helm/helm_show/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_show/</guid>
      <description>helm show 차트의 정보를 보여준다&#xA;개요 이 명령어는 차트에 대한 정보를 표시하는 여러 하위 명령어들로 구성된다&#xA;옵션 -h, --help show 에 대한 도움말 부모 명령어에서 상속된 옵션들 --add-dir-header 이 값이 참이면, 헤더에 파일 디렉토리를 추가 --alsologtostderr 파일처럼 표준 오류로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 베어러(bearer) 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 값을 지정하면, 지정한 디렉토리에 로그 파일 기록 --log-file string 값을 지정하면, 지정한 로그 파일 사용 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Show All</title>
      <link>https://helm.sh/ko/docs/helm/helm_show_all/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_show_all/</guid>
      <description>helm show all 차트의 모든 정보를 표시한다&#xA;개요 이 명령어는 차트(디렉터리, 파일 또는 URL)를 검사하고 모든 내용을 보여준다. (values.yaml, Charts.yaml, README)&#xA;helm show all [CHART] [flags] 옵션 --ca-file string CA 번들을 사용하여 HTTPS 사용 서버의 인증서를 확인 --cert-file string SSL 인증서 파일을 사용하여 HTTPS 클라이언트 식별 --devel 개발 버전도 사용. 버전 &amp;#39;&amp;gt;0.0.0-0&amp;#39;에 해당하며 --version 이 설정되면 무시 -h, --help all 에 대한 도움말 --key-file string SSL 키 파일을 사용하여 HTTPS 클라이언트 식별 --keyring string 확인에 사용되는 공개 키의 위치 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Show Chart</title>
      <link>https://helm.sh/ko/docs/helm/helm_show_chart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_show_chart/</guid>
      <description>helm show chart 차트의 정의를 보여준다&#xA;개요 이 명령어는 차트(디렉터리, 파일 또는 URL)를 검사하고 Charts.yaml 파일의 내용을 보여준다.&#xA;helm show chart [CHART] [flags] 옵션 --ca-file string CA 번들을 사용하여 HTTPS 사용 서버의 인증서를 확인 --cert-file string SSL 인증서 파일을 사용하여 HTTPS 클라이언트 식별 --devel 개발 버전도 사용. 버전 &amp;#39;&amp;gt;0.0.0-0&amp;#39;에 해당하며 --version 이 설정되면 무시 -h, --help chart 에 대한 도움말 --key-file string SSL 키 파일을 사용하여 HTTPS 클라이언트 식별 --keyring string 확인에 사용되는 공개 키의 위치 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Show Readme</title>
      <link>https://helm.sh/ko/docs/helm/helm_show_readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_show_readme/</guid>
      <description>helm show readme 차트의 README 파일을 표시&#xA;개요 이 명령어는 차트(디렉터리, 파일 또는 URL)을 검사하고 README 파일의 내용을 보여준다.&#xA;helm show readme [CHART] [flags] 옵션 --ca-file string CA 번들을 사용하여 HTTPS 사용 서버의 인증서를 확인 --cert-file string SSL 인증서 파일을 사용하여 HTTPS 클라이언트 식별 --devel 개발 버전도 사용. 버전 &amp;#39;&amp;gt;0.0.0-0&amp;#39;과 동등하다. --version 이 지정되면, 이것은 무시된다 -h, --help readme 에 대한 도움말 --key-file string SSL 키 파일을 사용하여 HTTPS 클라이언트 식별 --keyring string 확인에 사용되는 공개 키의 위치 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Show Values</title>
      <link>https://helm.sh/ko/docs/helm/helm_show_values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_show_values/</guid>
      <description>helm show values 차트의 값을 표시&#xA;개요 이 명령어는 차트(디렉터리, 파일 또는 URL)를 검사하고, values.yaml 파일의 내용을 보여준다.&#xA;helm show values [CHART] [flags] 옵션 --ca-file string CA 번들을 사용하여 HTTPS 사용 서버의 인증서를 확인 --cert-file string SSL 인증서 파일을 사용하여 HTTPS 클라이언트 식별 --devel 개발 버전도 사용. 버전 &amp;#39;&amp;gt;0.0.0-0&amp;#39;에 해당하며 --version 이 설정되면 무시 -h, --help values 에 대한 도움말 --key-file string SSL 키 파일을 사용하여 HTTPS 클라이언트 식별 --keyring string 확인에 사용되는 공개 키의 위치 (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Status</title>
      <link>https://helm.sh/ko/docs/helm/helm_status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_status/</guid>
      <description>helm status 명명된 릴리스의 상태를 표시한다&#xA;개요 이 명령어는 명명된 릴리스의 상태를 표시한다. 상태는 다음으로 구성된다:&#xA;마지막 배포 시간 릴리스가 있는 k8s 네임스페이스 릴리스의 상태 (가능한 값: unknown, deployed, uninstalled, superseded, failed, uninstalling, pending-install, pending-upgrade or pending-rollback) 이 릴리스를 구성하는, 종류(kind)로 정렬된 리소스 목록 해당되는 경우, 마지막 테스트 스위트(test suite) 수행에 관한 세부 정보 차트에서 제공하는 추가적인 참고 사항 helm status RELEASE_NAME [flags] 옵션 -h, --help helm status 에 대한 도움말 -o, --output format 지정된 형식으로 결과를 표시한다.</description>
    </item>
    <item>
      <title>Helm Template</title>
      <link>https://helm.sh/ko/docs/helm/helm_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_template/</guid>
      <description>helm template 로컬에서 템플릿을 렌더링 한다.&#xA;개요 차트 템플릿을 로컬에서 렌더링하고 그 결과를 표시한다.&#xA;일반적으로 클러스터 내에서 조회되거나 검색되는 모든 값은 로컬에서 즉흥적으로 사용(faked)된다. 또한 차트 유효성에 대한 서버 측 테스트 (예 : API 지원 여부)가 수행되지는 않는다.&#xA;helm template [NAME] [CHART] [flags] 옵션 -a, --api-versions stringArray Capabilities.APIVersions에 사용되는 쿠버네티스 API 버전 --atomic 설정된 경우, 설치 프로세스는 실패할 경우에 대하여 설치본을 삭제. --atomic 을 사용하면 --wait 플래그도 자동으로 설정 --ca-file string 이 CA 번들을 사용하여 HTTPS 사용 서버의 인증서를 확인 --cert-file string 이 SSL 인증서 파일을 사용하여 HTTPS 클라이언트 식별 --create-namespace 릴리스 네임스페이스가 없는 경우 생성 --dependency-update 차트를 설치하기 전에 헬름 종속성 업데이트 실행 --description string 사용자 정의 설명 추가 --devel 개발버전으로도 사용 가능.</description>
    </item>
    <item>
      <title>Helm Test</title>
      <link>https://helm.sh/ko/docs/helm/helm_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_test/</guid>
      <description>helm test 릴리스에 대하여 테스트를 수행한다.&#xA;개요 test 명령어는 릴리스에 대한 테스트를 실행한다.&#xA;이 명령어가 받는 인수는 배포된 릴리스의 이름이다. 실행할 테스트는 설치된 차트에 정의되어 있다.&#xA;helm test [RELEASE] [flags] 옵션 -h, --help helm test 에 대한 도움말 --logs 테스트 파드에서 로그를 덤프 (모든 테스트가 완료된 후 정리 전에 실행) --timeout duration 개별 쿠버네티스 작업(예: 훅에 대한 작업)을 기다리는 시간 제한 (기본값 5m0s) 부모 명령어에서 상속된 옵션들 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-as-group stringArray 작업에 관해 제시할 그룹.</description>
    </item>
    <item>
      <title>Helm Uninstall</title>
      <link>https://helm.sh/ko/docs/helm/helm_uninstall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_uninstall/</guid>
      <description>helm uninstall 릴리스 언인스톨&#xA;개요 이 명령어는 릴리스 이름을 사용하여 릴리스를 언인스톨한다.&#xA;차트의 마지막 릴리스 및 릴리스 내역과 관련된 모든 리소스를 제거하여 나중에 사용할 수 있도록 해제한다.&#xA;실제 언인스톨은 하지 않고 릴리스가 언인스톨되는 것을 확인해보려면 &#39;--dry-run&#39; 플래그를 사용하자.&#xA;helm uninstall RELEASE_NAME [...] [flags] Options --description string 사용자 정의 설명 추가 --dry-run 언인스톨 시뮬레이션 -h, --help uninstall 에 대한 도움말 --keep-history 모든 관련 리소스를 제거하고 릴리스를 삭제로 표시하지만 릴리스 내역은 유지 --no-hooks 언인스톨 중 훅(hook) 실행 방지 --timeout duration 개별 쿠버네티스 작업(예: 훅(hook)을 위한 작업)을 기다리는 시간 (기본값 5m0s) 상위 명령에서 상속된 옵션들 --add-dir-header 이 값이 true이면, 헤더에 파일 디렉토리를 추가 --alsologtostderr 파일처럼 표준 오류로도 로그 출력 --debug 장황한(verbose) 출력 활성화 --kube-apiserver string 쿠버네티스 API 서버의 주소 및 포트 --kube-context string 사용할 kubeconfig 컨텍스트 이름 --kube-token string 인증에 사용될 문자열 전달 토큰 --kubeconfig string kubeconfig 파일 경로 --log-backtrace-at traceLocation 로깅 시 N 행에 걸친 스택 추적 내용을 표시 (기본값 :0) --log-dir string 이 값이 비어있지 않을 경우, 이 값에 지정된 디렉토리에 로그 파일 쓰기 수행 --log-file string 이 값이 비어있지 않을 경우, 이 값에 지정된 파일명으로 로그 파일 쓰기 수행 --log-file-max-size uint 로그파일이 증가할 수 있는 최대 크기 지정.</description>
    </item>
    <item>
      <title>Helm Upgrade</title>
      <link>https://helm.sh/ko/docs/helm/helm_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_upgrade/</guid>
      <description>helm upgrade 릴리스를 업그레이드한다.&#xA;개요 이 명령어는 릴리스를 새 버전의 차트로 업그레이드한다.&#xA;업그레이드 시 사용되는 인수는 릴리스 및 차트여야 한다. 차트의 인수는 차트 참조(&#39;example/mariadb&#39;), 차트 디렉터리 경로, 패키지 차트 또는 정규화된 URL 중 하나일 수 있다. 차트 참조 시 &#39;--version&#39; 플래그가 설정되지 않았을 경우 최신 버전이 지정된다.&#xA;차트의 값을 재정의하려면 &#39;--values&#39; 플래그를 사용하고 파일을 전달하거나 &#39;--set&#39; 플래그를 사용하고 명령 줄에서 구성을 전달하고, 문자열 값을 강제하려면 &#39;--set-string&#39; 을 사용한다. 값이 큰 경우 &#39;--value&#39;나 &#39;--set&#39; 대신 &#39;--set-file&#39;을 사용하여 파일에서 하나의 큰 값을 읽을 수도 있다.</description>
    </item>
    <item>
      <title>Helm Verify</title>
      <link>https://helm.sh/ko/docs/helm/helm_verify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_verify/</guid>
      <description>helm verify 주어진 경로의 차트가 서명되었고, 유효한지 확인한다.&#xA;개요 주어진 차트에 유효한 출처(provenance) 파일이 있는지를 검증한다.&#xA;출처 파일은 차트가 변조되지 않았으며 신뢰할 수 있는 공급자가 패키징했다는 암호화 검증을 제공한다.&#xA;이 명령어는 로컬 차트를 검증하는데 사용될 수 있다. 다른 여러 명령어는 동일한 유효성 검사를 실행하는 &#39;--verify&#39; 플래그를 제공한다. 서명된 패키지를 생성하기 위해서는 &#39;helm package --sign&#39; 명령어를 사용하자.&#xA;helm verify PATH [flags] 옵션 -h, --help verify 에 대한 도움말 --keyring string 공개 키를 포함하는 키링(keyring) (기본값 &amp;#34;~/.</description>
    </item>
    <item>
      <title>Helm Version</title>
      <link>https://helm.sh/ko/docs/helm/helm_version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/helm/helm_version/</guid>
      <description>helm version 클라이언트 버전 정보를 출력한다.&#xA;개요 헬름의 버전을 표시한다.&#xA;이 명령어는 헬름 버전을 특정 형식으로 출력한다. 출력결과는 대략 다음과 같을 것이다.&#xA;version.BuildInfo{Version:&amp;quot;v3.2.1&amp;quot;, GitCommit:&amp;quot;fe51cd1e31e6a202cba7dead9552a6d418ded79a&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, GoVersion:&amp;quot;go1.13.10&amp;quot;}&#xA;Version 은 릴리스의 유의적(semantic) 버전이다.&#xA;GitCommit 은 이 버전이 빌드된 커밋의 SHA 값이다.&#xA;GitTreeState 는 이 바이너리를 빌드할 때 로컬 코드 변경이 없었으면 &amp;quot;clean&amp;quot; 이고, 로컬에서 수정된 코드로 빌드한 바이너리이면 &amp;quot;dirty&amp;quot; 이다.&#xA;GoVersion 은 헬름을 컴파일할 때 사용된 Go 버전이다. --template 플래그를 사용하면 템플릿에서 다음 속성을 사용할 수 있다:</description>
    </item>
    <item>
      <title>SQL 스토리지 백엔드에 대한 권한 관리</title>
      <link>https://helm.sh/ko/docs/topics/permissions_sql_storage_backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/permissions_sql_storage_backend/</guid>
      <description>이 문서는 SQL 스토리지 백엔드를 사용할 때 권한을 설정하고 관리하기 위한 지침을 사용자에게 제공하는 것을 목표로 한다.&#xA;소개 권한을 처리하기 위해 헬름은 쿠버네티스의 RBAC 기능을 사용한다. SQL 스토리지 백엔드를 사용할 때 쿠버네티스의 역할을 사용하여 사용자가 주어진 리소스에 액세스 할 수 있는지 여부를 결정할 수 없다. 이 문서는 이러한 권한을 생성하고 관리하는 방법을 보여준다.&#xA;초기화 헬름 CLI 가 처음으로 데이터베이스에 연결되면, 클라이언트는 이전에 초기화 되었는지 확인한다. 그렇지 않은 경우 필요한 설정을 자동으로 처리한다.</description>
    </item>
    <item>
      <title>릴리스 스케줄 정책</title>
      <link>https://helm.sh/ko/docs/topics/release_policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/release_policy/</guid>
      <description>사용자를 위해 헬름은 사전에 출시 날짜를 정의하고 발표한다. 이 문서는 헬름의 출시 스케줄을 관리하는 정책을 설명한다.&#xA;유의적 버전 헬름 버전은 x.y.z 로 표시된다. 여기서 x 는 주 버전, y 는 부 버전, z 는 패치 버전으로서 유의적 버전을 따른 것이다.&#xA;패치 릴리스 패치 릴리스는 사용자에게 버그 수정 및 보안 수정을 제공한다. 새로운 기능은 포함되어 있지 않다.&#xA;최신 부/주 릴리스와 관련된 새 패치 릴리스는 일반적으로 한 달에 한 번, 각 달의 두 번째 수요일에 나온다.</description>
    </item>
    <item>
      <title>사용 중단된 쿠버네티스 APIs</title>
      <link>https://helm.sh/ko/docs/topics/kubernetes_apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/kubernetes_apis/</guid>
      <description>쿠버네티스는 API 주도 시스템이며, 시간이 지남에 따라 문제 공간(problem space)에 대한 이해가 깊어지면서 이를 반영하기 위해 API 도 진화한다. 이는 어떤 시스템이나 그에 따른 API에서 나타나는 일반적인 관행이다. 진화하는 API에서 중요한 것은, 적절한 지원 중단 정책과 구현된 API의 변화를 사용자에게 알리는 프로세스이다. 다시 말해서, API 소비자는 사전에 API 가 제거되거나 변경되는 릴리스에 대하여 알 수 있어야 한다. 그렇게 해야 소비자는 예상하지 못한 부분이나 규모가 단절적(breaking) 변화의 요소를 방지할 수 있다.</description>
    </item>
    <item>
      <title>헬름 버전 지원 정책</title>
      <link>https://helm.sh/ko/docs/topics/version_skew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://helm.sh/ko/docs/topics/version_skew/</guid>
      <description>이 문서는 헬름과 쿠버네티스 간에 지원되는 최대의 버전 차이를 설명한다.&#xA;지원되는 버전 헬름 버전들은 x.y.z 로 표현된다. 여기서 x 는 주 버전, y 는 부 버전, z는 패치 버전으로 유의적 버전 을 따른다.&#xA;헬름 프로젝트는 최신 부 릴리스에 대한 릴리스 브랜치를 유지한다. 보안 픽스를 포함하여 적용가능한 픽스는 심각도와 타당성에 따라 릴리스 브랜치로 선별 적용된다. 패치 릴리스는 필요한 경우 해당 브랜치에서 제외된다. 이 결정은 릴리스 관리자가 담당한다.&#xA;지원되는 버전 차이(skew) 헬름의 새 버전이 출시 되면, 쿠버네티스의 특정 부 버전에 대해 컴파일된다.</description>
    </item>
  </channel>
</rss>
