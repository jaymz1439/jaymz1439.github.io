<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>모범 사례 on 헬름</title>
    <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/</link>
    <description>Recent content in 모범 사례 on 헬름</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <atom:link href="https://jaymz1439.github.io/ko/docs/chart_best_practices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>일반적인 관례</title>
      <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/ko/docs/chart_best_practices/conventions/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 일반적인 관례를 설명한다.&#xA;차트 이름 차트 이름은 소문자와 숫자여야 한다. 단어는 대시(-)로 구분할 수 있다.&#xA;예시:&#xA;drupal nginx-lego aws-cluster-autoscaler 대문자나 밑줄문자는 차트 이름에 사용할 수 없다. 점도 사용할 수 없다.&#xA;버전 번호 가능하다면 어디서든, 헬름은 버전 번호를 표현할 때 SemVer 2를 사용한다. (도커 이미지 태그는 SemVer를 따를 필요가 없고 아쉽지만 규칙에서 예외로 취급된다는 점을 알아두자.)&#xA;SemVer 버전을 쿠버네티스 레이블로 저장할 때, 관례적으로 + 문자를 _ 문자로 변경하는데, + 기호는 레이블 값으로 허용되지 않기 때문이다.</description>
    </item>
    <item>
      <title>값</title>
      <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/ko/docs/chart_best_practices/values/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 값(values)을 사용하는 방법을 다룬다. 여기서는 차트의 values.yaml 파일을 설계하는 데 초점을 맞추고, 값을 어떻게 구성하고 사용할지에 대한 권고사항을 제시한다.&#xA;네이밍 컨벤션 변수 이름은 소문자로 시작해야하며 단어는 카멜케이스로 구분해야 한다.&#xA;올바른 경우:&#xA;chicken: true chickenNoodleSoup: true 잘못된 경우:&#xA;Chicken: true # 첫 글자가 대문자이면 빌트인 변수와 충돌이 발생할 수 있다 chicken-noodle-soup: true # 변수명에 하이픈(-)을 사용하지 말자 헬름의 모든 빌트인 변수는 사용자 정의 값과 쉽게 구분할 수 있도록 대문자로 시작한다: .</description>
    </item>
    <item>
      <title>템플릿</title>
      <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/ko/docs/chart_best_practices/templates/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 템플릿을 자세히 알아본다.&#xA;templates/의 구조 templates/ 디렉토리는 다음과 같이 구조화되어야 한다.&#xA;YAML을 만드는 템플릿 파일들은 확장자가 .yaml이어야 한다. 형식이 정해지지 않은 컨텐츠를 만드는 템플릿 파일에는 .tpl 확장자를 쓸 수 있다. 템플릿 파일 이름은 대시 표기법(my-example-configmap.yaml)을 따라야 하며, 카멜 표기법이 아니다. 각 리소스 정의는 자체 템플릿 파일 내에 있어야 한다. 템플릿 파일 이름은 이름 내에 리소스 종류를 반영해야 한다. 예 : foo-pod.yaml,bar-svc.yaml 정의된 템플릿의 이름 정의된 템플릿 ({{ define }} 지시문 내에 생성된 템플릿)은 전역에서 접근가능하다.</description>
    </item>
    <item>
      <title>의존성</title>
      <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/ko/docs/chart_best_practices/dependencies/</guid>
      <description>이 부분은 가이드의 일부로서 Chart.yaml에서 선언되는 dependencies에 관한 모범사례를 다룬다.&#xA;버전 가능하면 특정 버전을 콕 집어서 사용하기 보다는 버전 범위를 사용하자. 권장되는 기본값은 다음과 같이 패치-수준의 버전 매치(match)를 사용하는 것이다.&#xA;version: ~1.2.3 이렇게 하면 1.2.3과 그 릴리스의 다른 패치들도 매치된다. 다시 말하면 ~1.2.3은 &amp;gt;= 1.2.3, &amp;lt; 1.3.0과 동등하다.&#xA;버전 매칭 구문에 대한 자세한 설명은 semver 문서에서 볼 수 있다.&#xA;리포지터리 URL 가능하면 https:// 리포지터리 URL 뒤에 http:// URL을 사용하자.&#xA;리포지터리가 리포지터리 인덱스 파일에 추가되면, 리포지터리 이름은 URL의 별칭으로 사용될 수 있다.</description>
    </item>
    <item>
      <title>레이블과 어노테이션</title>
      <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/ko/docs/chart_best_practices/labels/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 차트 내에서 레이블과 어노테이션을 사용하는 모범사례에 대해 논한다.&#xA;레이블인가, 어노테이션인가? 다음 조건에 해당하는 메타데이터 항목은 레이블이어야 한다.&#xA;쿠버네티스에서 해당 리소스를 식별하기 위해 사용된다. 시스템 쿼리를 목적으로 운영자에게 유용하게 노출되어야 한다. 예를 들어, helm.sh/chart: NAME-VERSION을 레이블로서 사용하는 것을 권장하는데, 이렇게 하면 운영자는 레이블을 통해 특정 차트의 모든 인스턴스들을 편리하게 찾을 수 있다.&#xA;메타데이터 항목이 쿼리에 사용되지 않는다면, 어노테이션으로 설정해야 한다.&#xA;헬름 훅은 항상 어노테이션이다.&#xA;표준 레이블 아래 표에 헬름 차트에서 널리 사용되는 레이블이 있다.</description>
    </item>
    <item>
      <title>파드와 파드템플릿</title>
      <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/ko/docs/chart_best_practices/pods/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 차트 매니페스트에 있는 파드와 파드템플릿 부분의 형식을 논한다.&#xA;파드템플릿을 사용하는 리소스들(일부)은 다음과 같다.&#xA;디플로이먼트(Deployment) 레플리케이션컨트롤러(ReplicationController) 레플리카셋(ReplicaSet) 데몬셋(DaemonSet) 스테이트풀셋(StatefulSet) 이미지 컨테이너 이미지는 고정된 태그나 이미지의 SHA를 사용해야 한다. latest, head, canary 등 &amp;quot;유동적인&amp;quot; 목적으로 고안된 태그를 사용해서는 안된다.&#xA;이미지를 쉽게 교체하기 위해 values.yaml 파일 내에 이미지를 정의할 수 있다.&#xA;image: {{ .Values.redisImage | quote }} values.yaml 내에서 이미지와 태그를 각각의 필드로 정의할 수도 있다.&#xA;image: &amp;#34;{{ .</description>
    </item>
    <item>
      <title>커스텀 리소스 데피니션(CRD)</title>
      <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/custom_resource_definitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/ko/docs/chart_best_practices/custom_resource_definitions/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 커스텀 리소스 데피니션 객체를 생성하고 사용하는 것을 다룬다.&#xA;커스텀 리소스 데피니션(CRD)를 다룰 때에는, 다음 2가지를 구분하는 것이 중요하다.&#xA;CRD의 선언이 있다. 이것은 종류(kind)가 CustomResourceDefinition인 YAML 파일이다. 그리고 그 CRD를 사용하는 리소스들이 있다. 어떤 CRD가 foo.example.com/v1를 정의한다고 해보자. apiVersion: example.com/v1가 있고 종류(kind)가 Foo인 모든 리소스들은 그 CRD를 사용하는 리소스이다. 리소스를 사용하기 전에 CRD 선언을 설치하기 헬름은 되도록 많은 리소스들을 빨리 쿠버네티스 내에 로드(load)하도록 최적화되어 있다. 설계상, 쿠버네티스는 전체 매니페스트 세트를 받고 온라인으로 반영한다(이것을 조정(reconciliation) 루프라고 한다).</description>
    </item>
    <item>
      <title>역할 기반 접근 제어</title>
      <link>https://jaymz1439.github.io/ko/docs/chart_best_practices/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jaymz1439.github.io/ko/docs/chart_best_practices/rbac/</guid>
      <description>이 부분은 모범사례 가이드의 일부로서 차트 매니페스트에 있는 RBAC 리소스의 생성과 형식을 논한다.&#xA;RBAC 리소스는 다음과 같다.&#xA;ServiceAccount (네임스페이스 구분) Role (네임스페이스 구분) ClusterRole RoleBinding (네임스페이스 구분) ClusterRoleBinding YAML 설정 RBAC과 서비스어카운트(ServiceAccount) 설정은 개별 키로 되어야 한다. 둘은 별개의 것이다. 이 두가지 개념을 YAML 내에서 구분함으로써 둘 사이의 애매함을 없애고 명확히 할 수 있다.&#xA;rbac: # RBAC 리소스를 생성할지 지정 create: true serviceAccount: # 서비스어카운트를 생성할지 지정 create: true # 사용할 서비스어카운트 이름 # create가 true인데 이름이 지정되지 않으면, 풀네임 템플릿에 따라 이름이 생성됨 name: 이 구조는 여러 개의 서비스어카운트를 필요로 하는 더 복잡한 차트로 확장할 수 있다.</description>
    </item>
  </channel>
</rss>
