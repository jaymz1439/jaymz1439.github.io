<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>주제 on 헬름</title>
    <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/</link>
    <description>Recent content in 주제 on 헬름</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <atom:link href="https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>차트</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/charts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/charts/</guid>
      <description>헬름은 charts 라는 패키지 포맷을 사용한다. 차트는 쿠버네티스 리소스와 관련된 셋을 설명하는 파일의 모음이다. 하나의 차트는 memcached 파드를 배포하는 것처럼 단순한 형태나 HTTP 서버, 데이터베이스, 캐시 등으로 구성된 완전한 웹앱 같이 복잡한 형태로 사용될수 있다.&#xA;차트는 특정한 디렉터리 구조를 가진 파일들로 생성된다. 이 파일들은 배포할 버전이 지정된 아카이브로 패키지화 될 수 있다.&#xA;설치하지 않고 공개된 차트를 다운로드 받거나 보기 위해, helm pull chartrepo/chartname 명령을 사용할 수 있다.&#xA;이 문서는 차트 형식을 설명하고, 차트를 헬름으로 구성하는 기본 가이드를 제공한다.</description>
    </item>
    <item>
      <title>차트 훅(hooks)</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/charts_hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/charts_hooks/</guid>
      <description>헬름은 차트 개발자가 릴리스 수명주기의 특정 지점에 개입할 수 있도록 hook 매커니즘을 제공한다. 예를 들어 다음과 같은 것들을 하기 위해 훅을 사용할 수 있다.&#xA;설치 시 다른 차트가 로드되기 전에 컨피그맵이나 시크릿을 로드한다. 새 차트를 설치하기 전에 데이터베이스를 백업하는 작업을 실행하고, 데이터 복원을 위해 업그레이드 후 2번째 작업을 수행한다. 릴리스를 제거하기 전에 서비스를 순환에서 안전하게 제거하기 위하여, 릴리스 삭제 전에 작업을 수행한다. 훅은 일반적인 템플릿처럼 작동하지만 헬름이 다른 방식으로 처리하도록 하는 특수한 어노테이션이 있다.</description>
    </item>
    <item>
      <title>차트 테스트</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/chart_tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/chart_tests/</guid>
      <description>차트에는 함께 작동하는 여러 쿠버네티스 리소스 및 구성요소가 포함되어 있다. 차트 작성자는 차트가 설치될 때 예상대로 작동하는지 확인하는 몇 가지 테스트를 작성할 수 있다. 이러한 테스트는 차트 사용자가 차트에 따라 수행될 작업을 이해하는 데에도 도움이 된다.&#xA;헬름 차트의 테스트 는 template/ 디렉토리에 있으며 실행하기 위해 주어진 명령어로 컨테이너를 지정하는 작업 정의이다. 테스트가 성공한 것으로 판정되려면 컨테이너가 성공적으로 종료되어야 한다(exit 0). 작업 정의에는 헬름 테스트 훅 어노테이션(helm.sh/hook: test)이 반드시 포함되어야 한다.</description>
    </item>
    <item>
      <title>라이브러리 차트</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/library_charts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/library_charts/</guid>
      <description>A library chart is a type of Helm chart that defines chart primitives or definitions which can be shared by Helm templates in other charts. This allows users to share snippets of code that can be re-used across charts, avoiding repetition and keeping charts DRY.&#xA;The library chart was introduced in Helm 3 to formally recognize common or helper charts that have been used by chart maintainers since Helm 2. By including it as a chart type, it provides:</description>
    </item>
    <item>
      <title>헬름 출처 및 무결성</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/provenance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/provenance/</guid>
      <description>헬름에는 차트 사용자가 패키지의 무결성과 출처를 검증하는 데 도움이 되는 출처 도구가 있다. 헬름은 PKI, GnuPG 및 평판이 좋은 패키지 관리자에 기반한 업계 표준 도구를 사용하여 서명 파일을 생성하고 검증할 수 있다.&#xA;개요 무결성은 차트를 출처기록과 비교하여 설정된다. 출처 레코드는 패키지 차트와 함께 저장되는 _출처 파일_에 저장되며 패키지 차트와 함께 저장된다. 예를 들어 차트 이름이 myapp-1.2.3.tgz 인 경우 출처 파일은 myapp-1.2.3.tgz.prov 이 된다.&#xA;출처 파일은 패키징 시 (helm package --sign .</description>
    </item>
    <item>
      <title>차트 저장소 가이드</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/chart_repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/chart_repository/</guid>
      <description>이 섹션에서는 Helm 차트 저장소를 만들고 작업하는 방법을 설명한다. 고수준에서 차트 저장소는 패키지형 차트를 저장하고 공유할 수 있는 장소다.&#xA;공식 차트 저장소는 쿠버네티스 차트가 관리하고 있으며 참여를 환영한다. 하지만 헬름도 자신만의 차트 저장소를 쉽게 만들고 운영할 수 있게 해준다. 이 가이드에서는 그렇게 하는 방법을 설명한다.&#xA;전제 조건 빠른 시작 가이드 살펴보기 차트 문서 읽기 차트 저장소 생성 차트 저장소 는 index.yaml 파일과 패키지화된 차트를 저장하는 HTTP 서버다. 차트를 공유할 준비가 되면 차트 저장소에 업로드하는 것이 가장 선호되는 방법이다.</description>
    </item>
    <item>
      <title>레지스트리</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/registries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/registries/</guid>
      <description>헬름 3는 패키지 배포를 위해 OCI를 지원한다. 차트 패키지는 OCI 기반 레지스트리 간에 저장 및 공유할 수 있다.&#xA;OCI 지원 활성화 현재 OCI 지원은 실험적(experimental) 으로 간주되고 있다.&#xA;아래에서 기술된 명령들을 사용하려면 환경에서 HELM_EXPERIMENTAL_OCI 변수를 설정하자:&#xA;export HELM_EXPERIMENTAL_OCI=1 레지스트리 실행 테스트 목적으로 레지스트리를 시작하는 것은 간단하다. 도커를 설치한 경우, 다음 명령어를 실행하자.&#xA;docker run -dp 5000:5000 --restart=always --name registry registry 이렇게 하면 localhost:5000에서 레지스트리 서버가 시작될 것이다.&#xA;docker logs -f registry를 사용하여 로그를 확인하고 docker rm -f registry를 사용하여 중지하자.</description>
    </item>
    <item>
      <title>헬름 아키텍처</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/architecture/</guid>
      <description>쿠버네티스 헬름 아키텍처 이 문서에서는 헬름 아키텍처를 개괄적으로 설명한다.&#xA;헬름의 목적 헬름은 _차트_라고 하는 쿠버네티스 패키지를 관리하는 도구이다. 헬름으로 다음과 같은 것들을 할 수 있다.&#xA;스크래치(scratch)부터 새로운 차트 생성 차트 아카이브(tgz) 파일로 차트 패키징 차트가 저장되는 곳인 차트 리포지터리와 상호작용 쿠버네티스 클러스터에 차트 인스톨 및 언인스톨 헬름으로 설치된 차트들의 릴리스 주기 관리 헬름에는 다음과 같은 중요한 3가지 개념이 있다.&#xA;_차트_는 쿠버네티스 애플리케이션의 인스턴스를 생성하는 데에 필요한 정보의 꾸러미이다. _설정_은 릴리스 가능한 객체를 생성하기 위해 패키징된 차트로 병합될 수 있는 설정 정보를 가진다.</description>
    </item>
    <item>
      <title>고급 헬름 기법</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/advanced/</guid>
      <description>이 섹션에서는 헬름 사용에 관한 다양한 고급 기능과 기법을 설명한다. 이 섹션의 정보는 차트 및 릴리스의 고급 사용자 정의 및 조작을 수행하려는 헬름의 &amp;quot;숙련 사용자&amp;quot;를 위한 것이다. 이러한 각 고급 기능에는 고유한 장단점 및 주의사항이 있으므로, 각 기능은 헬름에 대해 충분한 지식을 가지고 신중하게 사용해야한다. 바꿔 말해서, Peter Parker 원칙을 유념하자.&#xA;포스트 렌더링 포스트 렌더링은 차트 설치 프로그램이 헬름으로 설치하기 전에 렌더링된 매니페스트를 수동으로 조작, 구성 및 유효성 검사를 할 수 있는 기능을 제공한다.</description>
    </item>
    <item>
      <title>쿠버네티스 배포판 가이드</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/kubernetes_distros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/kubernetes_distros/</guid>
      <description>헬름은 (&#xD;인증 여부와 관계 없이) 모든 쿠버네티스 적합 버전에서 작동해야 한다.&#xA;이 문서는 특정 쿠버네티스 환경에서 헬름을 사용하는 방법에 대한 정보를 정리한다. 원한다면, 특정 배포판(알파벳순 정렬)에 대한 추가 내용을 기여하자.&#xA;AKS 헬름은 Azure 쿠버네티스 서비스에서 동작한다.&#xA;DC/OS 헬름은 Mesospheres DC/OS 1.11 쿠버네티스 플랫폼에서 테스트를 거쳤고 동작하며, 추가 구성이 필요치 않다.&#xA;EKS 헬름은 Amazon Elastic 쿠버네티스 서비스 (Amazon EKS)에서 동작한다. Amazon EKS에서 헬름 사용.&#xA;GKE 구글의 GKE 호스팅 쿠버네티스 플랫폼은 헬름이 동작하는 것으로 알려져 있으며, 추가 구성이 필요치 않다.</description>
    </item>
    <item>
      <title>역할 기반 접근 제어</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/rbac/</guid>
      <description>쿠버네티스에서 사용자 또는 애플리케이션별 서비스 계정에 역할을 부여하는 것은 애플리케이션이 지정한 권한범위 내에서 작동하도록 하는 모범 사례이다. 공식 쿠버네티스 문서에서 서비스 계정 권한에 대해 자세히 알아보도록 하자.&#xA;쿠버네티스 1.6 부터는 역할 기반 접근 제어(RBAC)가 기본적으로 활성화된다. RBAC을 사용하면 조직에서 사용자와 역할에 따라 허용되는 작업유형을 지정할 수 있다.&#xA;RBAC을 사용하여, 사용자는 다음을 수행할 수 있다.&#xA;관리자에게 특별 작업권한(새 역할과 같은 클러스터 전체 리소스 생성)을 부여한다. 리소스(파드, 퍼시스턴트 볼륨, 디플로이먼트)를 생성하는 사용자의 권한을 특정 네임스페이스 또는 클러스터 전체 범위(리소스 할당량, 역할, 사용자 지정 리소스 정의)로 제한한다.</description>
    </item>
    <item>
      <title>헬름 플러그인 가이드</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/plugins/</guid>
      <description>헬름 플러그인은 helm CLI를 통해 액세스할 수 있는 도구이지만 기본 제공 헬름 코드 베이스에 포함되지는 않는다.&#xA;기존 플러그인은 관련 섹션 또는 GitHub을 검색하여 찾을 수 있다.&#xA;이 가이드에서는 플러그인을 사용하고 만드는 방법을 설명한다.&#xA;개요 헬름 플러그인은 헬름과 원활하게 연계되는 애드온 도구이다. 새로운 모든 기능을 Go로 작성하거나 코어 도구에 추가하지 않더라도, 헬름 플러그인을 사용하여 코어 기능 세트를 확장하는 방법을 제공한다.&#xA;헬름 플러그인에는 다음과 같은 기능들이 있다.&#xA;코어 헬름 도구에 영향을 주지 않고 헬름 설치에서 추가하거나 제거할 수 있다.</description>
    </item>
    <item>
      <title>헬름 v2를 v3로 마이그레이션</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/v2_v3_migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/v2_v3_migration/</guid>
      <description>이 가이드에서는 헬름 v2를 v3로 마이그레이션하는 방법을 보여준다. 헬름 v2가 설치되어 있어야 하며, 하나 이상의 클러스터에서 릴리스가 관리되어야 한다.&#xA;헬름 3 변경사항 개요 헬름 2 에서 3로의 변경사항 전체 목록은 FAQ 에 작성되어 있다. 다음은 마이그레이션 준비 및 작업간에 사용자가 알아야 할 몇 가지 변경 사항에 대한 요약이다:&#xA;Tiller 제거: 클라이언트/서버 구조는 클라이언트/라이브러리 아키텍처로 대체됨 (helm 바이너리만 해당) 보안 서비스는 이제 사용자 단위로 제공됨 (쿠버네티스 사용자 클러스터 보안에 위임) 릴리스는 이제 클러스터 내의 시크릿으로 저장되고 릴리스 객체 메타 데이터도 변경됨 릴리스는 더 이상 Tiller 네임스페이스가 아니라 릴리스 네임스페이스 기반으로 유지됨 차트 저장소 업데이트: helm search 는 이제 로컬 저장소 검색과 헬름 허브에 대한 검색 쿼리를 모두 지원함 다음의 사양 변경에 대하여 차트 apiVersion 이 &amp;quot;v2&amp;quot;로 증가: 동적으로 연결된 차트 의존성이 Chart.</description>
    </item>
    <item>
      <title>SQL 스토리지 백엔드에 대한 권한 관리</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/permissions_sql_storage_backend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/permissions_sql_storage_backend/</guid>
      <description>이 문서는 SQL 스토리지 백엔드를 사용할 때 권한을 설정하고 관리하기 위한 지침을 사용자에게 제공하는 것을 목표로 한다.&#xA;소개 권한을 처리하기 위해 헬름은 쿠버네티스의 RBAC 기능을 사용한다. SQL 스토리지 백엔드를 사용할 때 쿠버네티스의 역할을 사용하여 사용자가 주어진 리소스에 액세스 할 수 있는지 여부를 결정할 수 없다. 이 문서는 이러한 권한을 생성하고 관리하는 방법을 보여준다.&#xA;초기화 헬름 CLI 가 처음으로 데이터베이스에 연결되면, 클라이언트는 이전에 초기화 되었는지 확인한다. 그렇지 않은 경우 필요한 설정을 자동으로 처리한다.</description>
    </item>
    <item>
      <title>릴리스 스케줄 정책</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/release_policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/release_policy/</guid>
      <description>사용자를 위해 헬름은 사전에 출시 날짜를 정의하고 발표한다. 이 문서는 헬름의 출시 스케줄을 관리하는 정책을 설명한다.&#xA;유의적 버전 헬름 버전은 x.y.z 로 표시된다. 여기서 x 는 주 버전, y 는 부 버전, z 는 패치 버전으로서 유의적 버전을 따른 것이다.&#xA;패치 릴리스 패치 릴리스는 사용자에게 버그 수정 및 보안 수정을 제공한다. 새로운 기능은 포함되어 있지 않다.&#xA;최신 부/주 릴리스와 관련된 새 패치 릴리스는 일반적으로 한 달에 한 번, 각 달의 두 번째 수요일에 나온다.</description>
    </item>
    <item>
      <title>사용 중단된 쿠버네티스 APIs</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/kubernetes_apis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/kubernetes_apis/</guid>
      <description>쿠버네티스는 API 주도 시스템이며, 시간이 지남에 따라 문제 공간(problem space)에 대한 이해가 깊어지면서 이를 반영하기 위해 API 도 진화한다. 이는 어떤 시스템이나 그에 따른 API에서 나타나는 일반적인 관행이다. 진화하는 API에서 중요한 것은, 적절한 지원 중단 정책과 구현된 API의 변화를 사용자에게 알리는 프로세스이다. 다시 말해서, API 소비자는 사전에 API 가 제거되거나 변경되는 릴리스에 대하여 알 수 있어야 한다. 그렇게 해야 소비자는 예상하지 못한 부분이나 규모가 단절적(breaking) 변화의 요소를 방지할 수 있다.</description>
    </item>
    <item>
      <title>헬름 버전 지원 정책</title>
      <link>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/version_skew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://zou-zongming.github.houston.softwaregrp.net/ko/docs/topics/version_skew/</guid>
      <description>이 문서는 헬름과 쿠버네티스 간에 지원되는 최대의 버전 차이를 설명한다.&#xA;지원되는 버전 헬름 버전들은 x.y.z 로 표현된다. 여기서 x 는 주 버전, y 는 부 버전, z는 패치 버전으로 유의적 버전 을 따른다.&#xA;헬름 프로젝트는 최신 부 릴리스에 대한 릴리스 브랜치를 유지한다. 보안 픽스를 포함하여 적용가능한 픽스는 심각도와 타당성에 따라 릴리스 브랜치로 선별 적용된다. 패치 릴리스는 필요한 경우 해당 브랜치에서 제외된다. 이 결정은 릴리스 관리자가 담당한다.&#xA;지원되는 버전 차이(skew) 헬름의 새 버전이 출시 되면, 쿠버네티스의 특정 부 버전에 대해 컴파일된다.</description>
    </item>
  </channel>
</rss>
